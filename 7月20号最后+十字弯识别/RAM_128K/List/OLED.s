///////////////////////////////////////////////////////////////////////////////
//                                                                            /
//                                                      30/Oct/2014  20:23:24 /
// IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM               /
// Copyright 1999-2012 IAR Systems AB.                                        /
//                                                                            /
//    Cpu mode     =  thumb                                                   /
//    Endian       =  little                                                  /
//    Source file  =  E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\OLED\OLED /
//                    .c                                                      /
//    Command line =  E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\OLED\OLED /
//                    .c -D IAR -lCN E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ /
//                    ÷ÊÔ°æ\RAM_128K\List\ -lB E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ /
//                    ³ÌÐò\1029µ÷ÊÔ°æ\RAM_128K\List\ -o                       /
//                    E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\RAM_128K\ /
//                    Obj\ --debug --endian=little --cpu=Cortex-M4 -e         /
//                    --fpu=None --dlib_config "C:\Program Files\IAR          /
//                    Systems\Embedded Workbench 6.0                          /
//                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I           /
//                    E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\Library\C /
//                    PU\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\Li /
//                    brary\Drivers\ADC\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐ /
//                    ò\1029µ÷ÊÔ°æ\Library\Drivers\FTM\ -I                    /
//                    E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\Library\D /
//                    rivers\GPIO\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029 /
//                    µ÷ÊÔ°æ\Library\Drivers\PIT\ -I                          /
//                    E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\System_In /
//                    it\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\So /
//                    urce\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\ /
//                    OLED\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\ /
//                    SD_System\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ /
//                    ÊÔ°æ\Simple_AD\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1 /
//                    029µ÷ÊÔ°æ\Delay\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\ /
//                    1029µ÷ÊÔ°æ\Make_Desicion\ -Oh                           /
//    List file    =  E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\RAM_128K\ /
//                    List\OLED.s                                             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME OLED

        #define SHT_PROGBITS 0x1

        EXTERN GPIO_SetPinDir
        EXTERN GPIO_SetPinMod
        EXTERN GPIO_SetPinStat

        PUBLIC Dis_Num
        PUBLIC F14x16
        PUBLIC F14x16_Idx
        PUBLIC F6x8
        PUBLIC F8X16
        PUBLIC LIBLOGO60x58
        PUBLIC OLED_DLY_ms
        PUBLIC OLED_Fill
        PUBLIC OLED_Init
        PUBLIC OLED_P6x8Str
        PUBLIC OLED_Set_Pos
        PUBLIC OLED_WrCmd
        PUBLIC OLED_WrDat
        PUBLIC SetAddressingMode
        PUBLIC SetColumnAddress
        PUBLIC SetContrastControl
        PUBLIC SetPageAddress
        PUBLIC SetStartColumn
        PUBLIC SetStartLine
        PUBLIC SetStartPage
        PUBLIC Set_Charge_Pump
        PUBLIC Set_Common_Config
        PUBLIC Set_Common_Remap
        PUBLIC Set_Display_Clock
        PUBLIC Set_Display_Offset
        PUBLIC Set_Display_On_Off
        PUBLIC Set_Entire_Display
        PUBLIC Set_Inverse_Display
        PUBLIC Set_Multiplex_Ratio
        PUBLIC Set_NOP
        PUBLIC Set_Precharge_Period
        PUBLIC Set_Segment_Remap
        PUBLIC Set_VCOMH
        PUBLIC adjust
        PUBLIC longqiu96x64


        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant {0}>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0
// E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\OLED\OLED.c
//    1 #include "AllHeaders.h"
//    2 
//    3 #define OLED_SCL PORTE,2  
//    4 #define OLED_SDA PORTE,3
//    5 #define OLED_RST PORTE,1 
//    6 #define OLED_DC  PORTE,5 
//    7 
//    8 #define XLevelL		0x00
//    9 #define XLevelH		0x10
//   10 #define XLevel	 	((XLevelH&0x0F)*16+XLevelL)
//   11 #define Max_Column	128
//   12 #define Max_Row		  64
//   13 #define	Brightness	0xCF 
//   14 
//   15 /*
//   16 4ÏßSPIÊ¹ÓÃËµÃ÷£º
//   17 VBT ¹©ÄÚ²¿DC-DCµçÑ¹£¬3.3~4.3V£¬Èç¹ûÊ¹ÓÃ5VµçÑ¹£¬Îª±£ÏÕÆð¼û´®Ò»¸ö100~500Å·µÄµç×è  
//   18 
//   19 CS  Æ¬Ñ¡¹Ü½Å
//   20 DC  ÃüÁîÊý¾ÝÑ¡Ôñ¹Ü½Å
//   21 RES Ä£¿é¸´Î»¹Ü½Å 
//   22 D0£¨SCLK£© £¬Ê±ÖÓ½Å£¬ÓÉMCU¿ØÖÆ
//   23 D1£¨MOSI£© £¬Ö÷Êä³ö´ÓÊäÈëÊý¾Ý½Å£¬ÓÉMCU¿ØÖÆ
//   24 */
//   25 
//   26 #define X_WIDTH 128
//   27 #define Y_WIDTH 64
//   28 //======================================
//   29 const byte F6x8[][6] =
//   30 {
//   31     { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
//   32     { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
//   33     { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
//   34     { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
//   35     { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
//   36     { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
//   37     { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
//   38     { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
//   39     { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
//   40     { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
//   41     { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
//   42     { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
//   43     { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
//   44     { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
//   45     { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
//   46     { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
//   47     { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
//   48     { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
//   49     { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
//   50     { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
//   51     { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
//   52     { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
//   53     { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
//   54     { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
//   55     { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
//   56     { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
//   57     { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
//   58     { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
//   59     { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
//   60     { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
//   61     { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
//   62     { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
//   63     { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
//   64     { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
//   65     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
//   66     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
//   67     { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
//   68     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
//   69     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
//   70     { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
//   71     { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
//   72     { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
//   73     { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
//   74     { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
//   75     { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
//   76     { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
//   77     { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
//   78     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
//   79     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
//   80     { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
//   81     { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
//   82     { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
//   83     { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
//   84     { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
//   85     { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
//   86     { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
//   87     { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
//   88     { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
//   89     { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
//   90     { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
//   91     { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
//   92     { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
//   93     { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
//   94     { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
//   95     { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
//   96     { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
//   97     { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
//   98     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
//   99     { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
//  100     { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
//  101     { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
//  102     { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
//  103     { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
//  104     { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
//  105     { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
//  106     { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
//  107     { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
//  108     { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
//  109     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
//  110     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
//  111     { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
//  112     { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
//  113     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
//  114     { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
//  115     { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
//  116     { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
//  117     { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
//  118     { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
//  119     { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
//  120     { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
//  121     { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
//  122     { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
//  123 };

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
//  124 const byte F14x16_Idx[] = 
F14x16_Idx:
        DC8 0B1H, 0B1H, 0BEH, 0A9H, 0C1H, 0FAH, 0C7H, 0F0H
        DC8 0C7H, 0F1H, 0BFH, 0C6H, 0BCH, 0BCH, 0BFH, 0AAH
        DC8 0B7H, 0A2H, 0B0H, 0E5H, 0D6H, 0C7H, 0C4H, 0DCH
        DC8 0B3H, 0B5H, 0CAH, 0D7H, 0D1H, 0A1H, 0D2H, 0BAH
        DC8 0BEH, 0A7H, 0CAH, 0D2H, 0CEH, 0C2H, 0B6H, 0C8H
        DC8 0B0H, 0B4H, 0BCH, 0FCH, 0B4H, 0CEH, 0B5H, 0E7H
        DC8 0D1H, 0B9H, 0
        DC8 0
//  125 {
//  126 	"±±¾©ÁúÇðÇñ¿Æ¼¼¿ª·¢°åÖÇÄÜ³µÊ×Ñ¡Òº¾§ÊÒÎÂ¶È°´¼ü´ÎµçÑ¹"
//  127 };

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
//  128 const byte F14x16[] = {  
F14x16:
        DC8 32, 32, 32, 32, 255, 0, 0, 0, 255, 64, 32, 48, 24, 16, 48, 24, 8, 4
        DC8 127, 0, 0, 0, 63, 64, 64, 64, 64, 120, 4, 4, 228, 36, 36, 37, 38
        DC8 36, 36, 36, 228, 6, 4, 0, 32, 16, 25, 13, 65, 129, 127, 1, 1, 5, 13
        DC8 56, 16, 0, 16, 16, 16, 16, 16, 255, 16, 240, 18, 28, 208, 16, 16
        DC8 16, 64, 32, 16, 12, 3, 16, 8, 63, 66, 65, 64, 64, 64, 112, 0, 0
        DC8 254, 132, 132, 132, 132, 130, 130, 130, 130, 192, 128, 0, 32, 32
        DC8 63, 32, 32, 32, 32, 32, 63, 32, 32, 32, 48, 32, 0, 252, 36, 36, 226
        DC8 34, 34, 0, 254, 2, 34, 82, 142, 2, 16, 31, 16, 8, 15, 8, 8, 0, 255
        DC8 0, 8, 8, 16, 15, 18, 146, 114, 254, 81, 145, 0, 34, 204, 0, 0, 255
        DC8 0, 0, 2, 1, 0, 255, 0, 4, 4, 4, 2, 2, 2, 255, 1, 1, 8, 136, 255, 72
        DC8 40, 0, 200, 72, 72, 127, 72, 200, 72, 8, 65, 128, 127, 0, 64, 64
        DC8 32, 19, 12, 12, 18, 33, 96, 32, 66, 66, 66, 66, 254, 66, 66, 66, 66
        DC8 254, 66, 66, 66, 66, 64, 32, 16, 12, 3, 0, 0, 0, 0, 127, 0, 0, 0, 0
        DC8 16, 62, 16, 16, 240, 159, 144, 144, 146, 148, 28, 16, 16, 16, 32
        DC8 16, 136, 135, 65, 70, 40, 16, 40, 39, 64, 192, 64, 0, 16, 208, 255
        DC8 80, 144, 0, 254, 98, 162, 34, 33, 161, 97, 0, 3, 0, 127, 0, 17, 14
        DC8 65, 32, 17, 10, 14, 49, 96, 32, 20, 19, 146, 126, 50, 82, 146, 0
        DC8 124, 68, 68, 68, 124, 0, 1, 1, 0, 255, 73, 73, 73, 73, 73, 73, 255
        DC8 0, 0, 0, 184, 151, 146, 144, 148, 184, 16, 0, 127, 72, 72, 68, 116
        DC8 32, 255, 10, 10, 74, 138, 127, 0, 0, 63, 68, 68, 66, 114, 32, 4
        DC8 132, 196, 164, 156, 135, 132, 244, 132, 132, 132, 132, 132, 0, 4, 4
        DC8 4, 4, 4, 4, 4, 255, 4, 4, 4, 4, 4, 4, 4, 4, 228, 37, 38, 52, 44, 36
        DC8 36, 38, 229, 4, 4, 4, 0, 0, 127, 37, 37, 37, 37, 37, 37, 37, 127, 0
        DC8 0, 0, 64, 66, 204, 0, 80, 78, 200, 72, 127, 200, 72, 72, 64, 0, 64
        DC8 32, 31, 32, 72, 70, 65, 64, 64, 71, 72, 72, 78, 64, 97, 6, 224, 24
        DC8 132, 228, 28, 132, 101, 190, 36, 164, 100, 4, 4, 255, 0, 1, 0, 255
        DC8 65, 33, 18, 12, 27, 97, 192, 64, 0, 0, 0, 126, 42, 42, 42, 42, 42
        DC8 42, 126, 0, 0, 0, 127, 37, 37, 37, 37, 127, 0, 0, 127, 37, 37, 37
        DC8 37, 127, 16, 44, 36, 164, 100, 37, 38, 36, 36, 164, 36, 52, 44, 4
        DC8 64, 72, 73, 73, 73, 73, 127, 73, 73, 73, 75, 72, 64, 64, 33, 134
        DC8 112, 0, 126, 74, 74, 74, 74, 74, 126, 0, 0, 0, 254, 1, 64, 127, 65
        DC8 65, 127, 65, 65, 127, 65, 65, 127, 64, 0, 252, 4, 36, 36, 252, 165
        DC8 166, 164, 252, 36, 36, 36, 4, 96, 31, 128, 128, 66, 70, 42, 18, 18
        DC8 42, 38, 66, 192, 64, 16, 16, 255, 144, 80, 152, 136, 136, 233, 142
        DC8 136, 136, 152, 136, 66, 129, 127, 0, 64, 64, 38, 37, 24, 8, 22, 49
        DC8 96, 32, 48, 239, 40, 40, 68, 100, 220, 16, 84, 255, 84, 84, 124, 16
        DC8 1, 127, 33, 81, 34, 20, 15, 20, 37, 63, 69, 69, 69, 68, 2, 28, 192
        DC8 48, 76, 48, 15, 8, 248, 8, 8, 40, 24, 8, 94, 67, 32, 32, 16, 8, 4
        DC8 3, 1, 6, 8, 48, 96, 32, 0, 248, 72, 72, 72, 72, 255, 72, 72, 72, 72
        DC8 248, 0, 0, 0, 15, 4, 4, 4, 4, 63, 68, 68, 68, 68, 79, 64, 112, 0
        DC8 254, 2, 66, 66, 66, 66, 250, 66, 66, 66, 98, 66, 2, 24, 39, 32, 32
        DC8 32, 32, 32, 63, 32, 33, 46, 36, 32, 32
//  129 0x20,0x20,0x20,0x20,0xFF,0x00,0x00,0x00,0xFF,0x40,0x20,0x30,0x18,0x10,
//  130 0x30,0x18,0x08,0x04,0x7F,0x00,0x00,0x00,0x3F,0x40,0x40,0x40,0x40,0x78,//±±0
//  131 0x04,0x04,0xE4,0x24,0x24,0x25,0x26,0x24,0x24,0x24,0xE4,0x06,0x04,0x00,
//  132 0x20,0x10,0x19,0x0D,0x41,0x81,0x7F,0x01,0x01,0x05,0x0D,0x38,0x10,0x00,//¾©1
//  133 0x10,0x10,0x10,0x10,0x10,0xFF,0x10,0xF0,0x12,0x1C,0xD0,0x10,0x10,0x10,
//  134 0x40,0x20,0x10,0x0C,0x03,0x10,0x08,0x3F,0x42,0x41,0x40,0x40,0x40,0x70,//Áú2
//  135 0x00,0x00,0xFE,0x84,0x84,0x84,0x84,0x82,0x82,0x82,0x82,0xC0,0x80,0x00,
//  136 0x20,0x20,0x3F,0x20,0x20,0x20,0x20,0x20,0x3F,0x20,0x20,0x20,0x30,0x20,//Çð3
//  137 0x00,0xFC,0x24,0x24,0xE2,0x22,0x22,0x00,0xFE,0x02,0x22,0x52,0x8E,0x02,
//  138 0x10,0x1F,0x10,0x08,0x0F,0x08,0x08,0x00,0xFF,0x00,0x08,0x08,0x10,0x0F,//Çñ4
//  139 0x12,0x92,0x72,0xFE,0x51,0x91,0x00,0x22,0xCC,0x00,0x00,0xFF,0x00,0x00,
//  140 0x02,0x01,0x00,0xFF,0x00,0x04,0x04,0x04,0x02,0x02,0x02,0xFF,0x01,0x01,//¿Æ5
//  141 0x08,0x88,0xFF,0x48,0x28,0x00,0xC8,0x48,0x48,0x7F,0x48,0xC8,0x48,0x08,
//  142 0x41,0x80,0x7F,0x00,0x40,0x40,0x20,0x13,0x0C,0x0C,0x12,0x21,0x60,0x20,//¼¼6
//  143 0x42,0x42,0x42,0x42,0xFE,0x42,0x42,0x42,0x42,0xFE,0x42,0x42,0x42,0x42,
//  144 0x40,0x20,0x10,0x0C,0x03,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,//¿ª7
//  145 0x10,0x3E,0x10,0x10,0xF0,0x9F,0x90,0x90,0x92,0x94,0x1C,0x10,0x10,0x10,
//  146 0x20,0x10,0x88,0x87,0x41,0x46,0x28,0x10,0x28,0x27,0x40,0xC0,0x40,0x00,//·¢8
//  147 0x10,0xD0,0xFF,0x50,0x90,0x00,0xFE,0x62,0xA2,0x22,0x21,0xA1,0x61,0x00,
//  148 0x03,0x00,0x7F,0x00,0x11,0x0E,0x41,0x20,0x11,0x0A,0x0E,0x31,0x60,0x20,//°å9
//  149 0x14,0x13,0x92,0x7E,0x32,0x52,0x92,0x00,0x7C,0x44,0x44,0x44,0x7C,0x00,
//  150 0x01,0x01,0x00,0xFF,0x49,0x49,0x49,0x49,0x49,0x49,0xFF,0x00,0x00,0x00,//ÖÇ10
//  151 0xB8,0x97,0x92,0x90,0x94,0xB8,0x10,0x00,0x7F,0x48,0x48,0x44,0x74,0x20,
//  152 0xFF,0x0A,0x0A,0x4A,0x8A,0x7F,0x00,0x00,0x3F,0x44,0x44,0x42,0x72,0x20,//ÄÜ11
//  153 0x04,0x84,0xC4,0xA4,0x9C,0x87,0x84,0xF4,0x84,0x84,0x84,0x84,0x84,0x00,
//  154 0x04,0x04,0x04,0x04,0x04,0x04,0x04,0xFF,0x04,0x04,0x04,0x04,0x04,0x04,//³µ12
//  155 0x04,0x04,0xE4,0x25,0x26,0x34,0x2C,0x24,0x24,0x26,0xE5,0x04,0x04,0x04,
//  156 0x00,0x00,0x7F,0x25,0x25,0x25,0x25,0x25,0x25,0x25,0x7F,0x00,0x00,0x00,//Ê×13
//  157 0x40,0x42,0xCC,0x00,0x50,0x4E,0xC8,0x48,0x7F,0xC8,0x48,0x48,0x40,0x00,
//  158 0x40,0x20,0x1F,0x20,0x48,0x46,0x41,0x40,0x40,0x47,0x48,0x48,0x4E,0x40,//Ñ¡14
//  159 0x61,0x06,0xE0,0x18,0x84,0xE4,0x1C,0x84,0x65,0xBE,0x24,0xA4,0x64,0x04,
//  160 0x04,0xFF,0x00,0x01,0x00,0xFF,0x41,0x21,0x12,0x0C,0x1B,0x61,0xC0,0x40,//Òº15
//  161 0x00,0x00,0x00,0x7E,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x7E,0x00,0x00,0x00,
//  162 0x7F,0x25,0x25,0x25,0x25,0x7F,0x00,0x00,0x7F,0x25,0x25,0x25,0x25,0x7F,//¾§16
//  163 0x10,0x2C,0x24,0xA4,0x64,0x25,0x26,0x24,0x24,0xA4,0x24,0x34,0x2C,0x04,
//  164 0x40,0x48,0x49,0x49,0x49,0x49,0x7F,0x49,0x49,0x49,0x4B,0x48,0x40,0x40,//ÊÒ17
//  165 0x21,0x86,0x70,0x00,0x7E,0x4A,0x4A,0x4A,0x4A,0x4A,0x7E,0x00,0x00,0x00,
//  166 0xFE,0x01,0x40,0x7F,0x41,0x41,0x7F,0x41,0x41,0x7F,0x41,0x41,0x7F,0x40,//ÎÂ18
//  167 0x00,0xFC,0x04,0x24,0x24,0xFC,0xA5,0xA6,0xA4,0xFC,0x24,0x24,0x24,0x04,
//  168 0x60,0x1F,0x80,0x80,0x42,0x46,0x2A,0x12,0x12,0x2A,0x26,0x42,0xC0,0x40,//¶È19
//  169 0x10,0x10,0xFF,0x90,0x50,0x98,0x88,0x88,0xE9,0x8E,0x88,0x88,0x98,0x88,
//  170 0x42,0x81,0x7F,0x00,0x40,0x40,0x26,0x25,0x18,0x08,0x16,0x31,0x60,0x20,//°´20
//  171 0x30,0xEF,0x28,0x28,0x44,0x64,0xDC,0x10,0x54,0xFF,0x54,0x54,0x7C,0x10,
//  172 0x01,0x7F,0x21,0x51,0x22,0x14,0x0F,0x14,0x25,0x3F,0x45,0x45,0x45,0x44,//¼ü21
//  173 0x02,0x1C,0xC0,0x30,0x4C,0x30,0x0F,0x08,0xF8,0x08,0x08,0x28,0x18,0x08,
//  174 0x5E,0x43,0x20,0x20,0x10,0x08,0x04,0x03,0x01,0x06,0x08,0x30,0x60,0x20,//´Î22
//  175 0x00,0xF8,0x48,0x48,0x48,0x48,0xFF,0x48,0x48,0x48,0x48,0xF8,0x00,0x00,
//  176 0x00,0x0F,0x04,0x04,0x04,0x04,0x3F,0x44,0x44,0x44,0x44,0x4F,0x40,0x70,//µç23
//  177 0x00,0xFE,0x02,0x42,0x42,0x42,0x42,0xFA,0x42,0x42,0x42,0x62,0x42,0x02,
//  178 0x18,0x27,0x20,0x20,0x20,0x20,0x20,0x3F,0x20,0x21,0x2E,0x24,0x20,0x20,//Ñ¹24  
//  179 };
//  180 
//  181 //======================================================
//  182 // 128X64IÒº¾§µ×²ãÇý¶¯[8X16]×ÖÌå¿â
//  183 // Éè¼ÆÕß: powerint
//  184 // Ãè  Êö: [8X16]Î÷ÎÄ×Ö·ûµÄ×ÖÄ£Êý¾Ý (×ÝÏòÈ¡Ä£,×Ö½Úµ¹Ðò)
//  185 // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
//  186 //======================================================

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
//  187 const byte F8X16[]=
F8X16:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
        DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
        DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
        DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
        DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
        DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
        DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
        DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
        DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
        DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
        DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
        DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
        DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
        DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
        DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
        DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
        DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
        DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
        DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
        DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
        DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
        DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
        DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
        DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
        DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
        DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
        DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
        DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
        DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
        DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
        DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
        DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
        DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
        DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
        DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
        DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
        DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
        DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
        DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
        DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
        DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
        DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
        DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
        DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
        DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
        DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
        DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
        DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
        DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
        DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
        DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
        DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
        DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
        DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
        DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
        DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
        DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
        DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
        DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
        DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
        DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
        DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
        DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
        DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
        DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
        DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
        DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
        DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
        DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
        DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
        DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
        DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
        DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
        DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
        DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
//  188 {
//  189 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
//  190   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
//  191   0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
//  192   0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
//  193   0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
//  194   0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
//  195   0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
//  196   0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
//  197   0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
//  198   0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
//  199   0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
//  200   0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
//  201   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
//  202   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
//  203   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
//  204   0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
//  205   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
//  206   0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
//  207   0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
//  208   0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
//  209   0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
//  210   0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
//  211   0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
//  212   0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
//  213   0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
//  214   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
//  215   0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
//  216   0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
//  217   0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
//  218   0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
//  219   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
//  220   0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
//  221   0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
//  222   0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
//  223   0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
//  224   0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
//  225   0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
//  226   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
//  227   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
//  228   0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
//  229   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
//  230   0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
//  231   0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
//  232   0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
//  233   0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
//  234   0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
//  235   0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
//  236   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
//  237   0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
//  238   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
//  239   0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
//  240   0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
//  241   0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
//  242   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
//  243   0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
//  244   0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
//  245   0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
//  246   0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
//  247   0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
//  248   0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
//  249   0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
//  250   0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
//  251   0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
//  252   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
//  253   0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
//  254   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
//  255   0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
//  256   0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
//  257   0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
//  258   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
//  259   0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
//  260   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
//  261   0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
//  262   0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
//  263   0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
//  264   0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
//  265   0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
//  266   0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
//  267   0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
//  268   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
//  269   0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
//  270   0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
//  271   0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
//  272   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
//  273   0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
//  274   0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85
//  275   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
//  276   0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
//  277   0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
//  278   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
//  279   0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
//  280   0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
//  281   0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
//  282   0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
//  283   0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
//  284 
//  285 };
//  286 //Êý¾ÝË®Æ½£¬×Ö½Ú´¹Ö±

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  287 byte longqiu96x64[768] = {
longqiu96x64:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 192
        DC8 192, 192, 96, 96, 96, 48, 48, 48, 56, 24, 24, 24, 24, 12, 12, 12
        DC8 12, 12, 14, 14, 14, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 14, 14
        DC8 12, 12, 12, 12, 12, 28, 24, 24, 24, 24, 48, 48, 48, 112, 96, 96
        DC8 224, 192, 192, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 224, 112, 48, 56, 28, 12
        DC8 6, 7, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 0, 0, 0, 0, 0, 128, 128, 240, 248, 248, 240, 128, 0
        DC8 0, 128, 224, 240, 248, 252, 60, 28, 12, 12, 28, 252, 248, 240, 224
        DC8 128, 0, 0, 0, 192, 192, 193, 1, 3, 3, 7, 6, 14, 12, 24, 56, 112, 96
        DC8 192, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 192, 240, 120, 30, 7, 51, 49
        DC8 56, 120, 252, 254, 246, 192, 128, 0, 0, 0, 0, 192, 192, 128, 0, 248
        DC8 252, 222, 14, 15, 30, 190, 252, 240, 6, 255, 255, 255, 255, 3, 7
        DC8 255, 255, 254, 128, 30, 63, 255, 255, 249, 249, 255, 255, 127, 31
        DC8 14, 127, 255, 255, 255, 193, 128, 206, 206, 198, 192, 255, 255, 255
        DC8 255, 63, 128, 252, 252, 253, 125, 1, 192, 248, 248, 240, 112, 0
        DC8 192, 128, 128, 128, 0, 0, 1, 7, 14, 60, 248, 224, 128, 0, 0, 254
        DC8 255, 3, 0, 0, 0, 0, 0, 0, 0, 1, 3, 15, 31, 127, 254, 252, 240, 240
        DC8 240, 127, 127, 62, 16, 3, 3, 15, 31, 31, 15, 15, 3, 4, 7, 7, 7, 7
        DC8 6, 0, 7, 7, 7, 15, 30, 63, 127, 127, 127, 121, 115, 63, 63, 31, 14
        DC8 0, 1, 3, 3, 7, 7, 6, 14, 15, 15, 31, 63, 61, 8, 12, 31, 31, 31, 25
        DC8 60, 127, 127, 127, 243, 240, 252, 254, 63, 31, 7, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 207, 255, 112, 0, 3, 31, 126, 240, 192, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 3, 3, 1, 1, 0, 0, 0, 0, 192, 192, 64, 64, 64, 64, 248, 120
        DC8 64, 192, 64, 88, 88, 64, 64, 64, 0, 0, 0, 0, 0, 128, 128, 128, 0, 0
        DC8 0, 0, 0, 0, 96, 240, 224, 32, 32, 32, 32, 48, 48, 56, 24, 16, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 224, 248, 63, 15, 0, 0, 0, 0, 0, 0, 3, 7, 14, 28, 56, 48, 96
        DC8 224, 192, 128, 0, 0, 0, 0, 0, 0, 0, 64, 96, 96, 112, 48, 24, 12, 7
        DC8 17, 8, 63, 125, 102, 231, 227, 192, 192, 192, 224, 96, 0, 0, 0, 3
        DC8 3, 3, 0, 0, 96, 96, 96, 96, 96, 127, 127, 97, 97, 97, 97, 127, 127
        DC8 97, 97, 225, 224, 224, 192, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 192, 192, 224, 112, 56, 24, 12, 7, 3, 1, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 6, 6, 12, 12, 24, 24, 56
        DC8 48, 48, 112, 96, 96, 224, 192, 192, 192, 192, 192, 128, 128, 128
        DC8 129, 128, 128, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128
        DC8 128, 128, 128, 128, 128, 128, 128, 192, 192, 192, 192, 192, 96, 96
        DC8 96, 48, 48, 48, 24, 24, 28, 12, 14, 6, 7, 3, 3, 1, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1
        DC8 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  288 
//  289 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  290 0X00,0X00,0X80,0X80,0XC0,0XC0,0XC0,0X60,0X60,0X60,0X30,0X30,0X30,0X38,0X18,0X18,
//  291 0X18,0X18,0X0C,0X0C,0X0C,0X0C,0X0C,0X0E,0X0E,0X0E,0X06,0X06,0X06,0X06,0X06,0X06,
//  292 0X06,0X06,0X06,0X06,0X06,0X06,0X06,0X0E,0X0E,0X0C,0X0C,0X0C,0X0C,0X0C,0X1C,0X18,
//  293 0X18,0X18,0X18,0X30,0X30,0X30,0X70,0X60,0X60,0XE0,0XC0,0XC0,0X80,0X80,0X00,0X00,
//  294 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  295 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0XC0,0XE0,0X70,0X30,0X38,0X1C,0X0C,0X06,
//  296 0X07,0X03,0X03,0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  297 0X00,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X80,0X80,
//  298 0XF0,0XF8,0XF8,0XF0,0X80,0X00,0X00,0X80,0XE0,0XF0,0XF8,0XFC,0X3C,0X1C,0X0C,0X0C,
//  299 0X1C,0XFC,0XF8,0XF0,0XE0,0X80,0X00,0X00,0X00,0XC0,0XC0,0XC1,0X01,0X03,0X03,0X07,
//  300 0X06,0X0E,0X0C,0X18,0X38,0X70,0X60,0XC0,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X00,
//  301 0X00,0X00,0XC0,0XF0,0X78,0X1E,0X07,0X33,0X31,0X38,0X78,0XFC,0XFE,0XF6,0XC0,0X80,
//  302 0X00,0X00,0X00,0X00,0XC0,0XC0,0X80,0X00,0XF8,0XFC,0XDE,0X0E,0X0F,0X1E,0XBE,0XFC,
//  303 0XF0,0X06,0XFF,0XFF,0XFF,0XFF,0X03,0X07,0XFF,0XFF,0XFE,0X80,0X1E,0X3F,0XFF,0XFF,
//  304 0XF9,0XF9,0XFF,0XFF,0X7F,0X1F,0X0E,0X7F,0XFF,0XFF,0XFF,0XC1,0X80,0XCE,0XCE,0XC6,
//  305 0XC0,0XFF,0XFF,0XFF,0XFF,0X3F,0X80,0XFC,0XFC,0XFD,0X7D,0X01,0XC0,0XF8,0XF8,0XF0,
//  306 0X70,0X00,0XC0,0X80,0X80,0X80,0X00,0X00,0X01,0X07,0X0E,0X3C,0XF8,0XE0,0X80,0X00,
//  307 0X00,0XFE,0XFF,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X0F,0X1F,0X7F,
//  308 0XFE,0XFC,0XF0,0XF0,0XF0,0X7F,0X7F,0X3E,0X10,0X03,0X03,0X0F,0X1F,0X1F,0X0F,0X0F,
//  309 0X03,0X04,0X07,0X07,0X07,0X07,0X06,0X00,0X07,0X07,0X07,0X0F,0X1E,0X3F,0X7F,0X7F,
//  310 0X7F,0X79,0X73,0X3F,0X3F,0X1F,0X0E,0X00,0X01,0X03,0X03,0X07,0X07,0X06,0X0E,0X0F,
//  311 0X0F,0X1F,0X3F,0X3D,0X08,0X0C,0X1F,0X1F,0X1F,0X19,0X3C,0X7F,0X7F,0X7F,0XF3,0XF0,
//  312 0XFC,0XFE,0X3F,0X1F,0X07,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XCF,0XFF,0X70,
//  313 0X00,0X03,0X1F,0X7E,0XF0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  314 0X03,0X03,0X01,0X01,0X00,0X00,0X00,0X00,0XC0,0XC0,0X40,0X40,0X40,0X40,0XF8,0X78,
//  315 0X40,0XC0,0X40,0X58,0X58,0X40,0X40,0X40,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,
//  316 0X00,0X00,0X00,0X00,0X00,0X00,0X60,0XF0,0XE0,0X20,0X20,0X20,0X20,0X30,0X30,0X38,
//  317 0X18,0X10,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
//  318 0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0XE0,0XF8,0X3F,0X0F,0X00,
//  319 0X00,0X00,0X00,0X00,0X00,0X03,0X07,0X0E,0X1C,0X38,0X30,0X60,0XE0,0XC0,0X80,0X00,
//  320 0X00,0X00,0X00,0X00,0X00,0X00,0X40,0X60,0X60,0X70,0X30,0X18,0X0C,0X07,0X11,0X08,
//  321 0X3F,0X7D,0X66,0XE7,0XE3,0XC0,0XC0,0XC0,0XE0,0X60,0X00,0X00,0X00,0X03,0X03,0X03,
//  322 0X00,0X00,0X60,0X60,0X60,0X60,0X60,0X7F,0X7F,0X61,0X61,0X61,0X61,0X7F,0X7F,0X61,
//  323 0X61,0XE1,0XE0,0XE0,0XC0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  324 0X00,0X80,0XC0,0XC0,0XE0,0X70,0X38,0X18,0X0C,0X07,0X03,0X01,0X00,0X00,0X00,0X00,
//  325 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X01,0X03,
//  326 0X03,0X06,0X06,0X0C,0X0C,0X18,0X18,0X38,0X30,0X30,0X70,0X60,0X60,0XE0,0XC0,0XC0,
//  327 0XC0,0XC0,0XC0,0X80,0X80,0X80,0X81,0X80,0X80,0X80,0X80,0X80,0X00,0X00,0X00,0X00,
//  328 0X00,0X00,0X00,0X00,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0XC0,0XC0,
//  329 0XC0,0XC0,0XC0,0X60,0X60,0X60,0X30,0X30,0X30,0X18,0X18,0X1C,0X0C,0X0E,0X06,0X07,
//  330 0X03,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  331 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  332 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  333 0X00,0X00,0X01,0X01,0X01,0X01,0X01,0X01,0X01,0X03,0X03,0X03,0X03,0X03,0X03,0X03,
//  334 0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X01,0X01,0X01,0X01,0X01,0X01,0X01,0X00,0X00,
//  335 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  336 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  337 
//  338 
//  339 };

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
//  340 const byte LIBLOGO60x58[480] = { 
LIBLOGO60x58:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192
        DC8 224, 248, 252, 254, 127, 63, 15, 15, 7, 7, 7, 135, 199, 199, 199
        DC8 231, 239, 255, 255, 255, 239, 231, 231, 231, 231, 231, 239, 255
        DC8 255, 255, 239, 231, 231, 231, 231, 231, 247, 7, 15, 63, 127, 255
        DC8 254, 252, 240, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 220, 223
        DC8 223, 223, 223, 215, 1, 0, 0, 0, 0, 0, 0, 62, 127, 255, 255, 227
        DC8 225, 225, 255, 255, 255, 224, 224, 224, 224, 224, 224, 224, 255
        DC8 255, 255, 224, 224, 224, 224, 193, 131, 7, 0, 0, 0, 0, 1, 215, 223
        DC8 223, 223, 223, 220, 216, 0, 0, 0, 0, 0, 0, 0, 1, 3, 15, 31, 63, 255
        DC8 255, 254, 248, 240, 224, 192, 128, 0, 0, 248, 240, 224, 192, 192
        DC8 192, 255, 255, 255, 192, 192, 192, 192, 192, 192, 192, 255, 255
        DC8 255, 192, 224, 225, 243, 255, 127, 63, 0, 192, 224, 248, 254, 255
        DC8 255, 255, 63, 31, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
        DC8 7, 15, 63, 127, 255, 254, 252, 249, 243, 193, 129, 1, 1, 255, 255
        DC8 255, 1, 1, 1, 1, 1, 1, 1, 255, 255, 255, 3, 1, 129, 192, 240, 252
        DC8 254, 255, 255, 127, 63, 15, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 15, 63, 127, 255
        DC8 255, 255, 251, 243, 227, 195, 3, 3, 3, 3, 3, 131, 195, 243, 243
        DC8 251, 255, 255, 255, 127, 63, 15, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 3, 7, 7, 31, 63, 127, 255, 254, 252, 252, 254, 255, 255
        DC8 127, 63, 15, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 15, 15, 7, 1, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  341   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  342   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  343   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  344   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  345   0X00,0X00,0XC0,0XE0,0XF8,0XFC,0XFE,0X7F,0X3F,0X0F,0X0F,0X07,0X07,0X07,0X87,0XC7,
//  346   0XC7,0XC7,0XE7,0XEF,0XFF,0XFF,0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XEF,0XFF,0XFF,
//  347   0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XF7,0X07,0X0F,0X3F,0X7F,0XFF,0XFE,0XFC,0XF0,
//  348   0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XD8,0XDC,0XDF,0XDF,0XDF,
//  349   0XDF,0XD7,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X3E,0X7F,0XFF,0XFF,0XE3,0XE1,0XE1,
//  350   0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,
//  351   0XE0,0XC1,0X83,0X07,0X00,0X00,0X00,0X00,0X01,0XD7,0XDF,0XDF,0XDF,0XDF,0XDC,0XD8,
//  352   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X0F,0X1F,0X3F,0XFF,0XFF,0XFE,0XF8,
//  353   0XF0,0XE0,0XC0,0X80,0X00,0X00,0XF8,0XF0,0XE0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,
//  354   0XC0,0XC0,0XC0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,0XE0,0XE1,0XF3,0XFF,0X7F,0X3F,
//  355   0X00,0XC0,0XE0,0XF8,0XFE,0XFF,0XFF,0XFF,0X3F,0X1F,0X07,0X01,0X00,0X00,0X00,0X00,
//  356   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X07,0X0F,0X3F,0X7F,0XFF,
//  357   0XFE,0XFC,0XF9,0XF3,0XC1,0X81,0X01,0X01,0XFF,0XFF,0XFF,0X01,0X01,0X01,0X01,0X01,
//  358   0X01,0X01,0XFF,0XFF,0XFF,0X03,0X01,0X81,0XC0,0XF0,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,
//  359   0X0F,0X07,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  360   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,0X0F,0X3F,
//  361   0X7F,0XFF,0XFF,0XFF,0XFB,0XF3,0XE3,0XC3,0X03,0X03,0X03,0X03,0X03,0X83,0XC3,0XF3,
//  362   0XF3,0XFB,0XFF,0XFF,0XFF,0X7F,0X3F,0X0F,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,
//  363   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  364   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,
//  365   0X07,0X1F,0X3F,0X7F,0XFF,0XFE,0XFC,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,0X0F,0X07,0X03,
//  366   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  367   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  368   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  369   0X00,0X03,0X07,0X0F,0X0F,0X07,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  370   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00
//  371 }; 
//  372 
//  373 

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  374 void OLED_WrDat(byte data)
//  375 {
OLED_WrDat:
        PUSH     {R4-R6,LR}
//  376 	byte i=8;
//  377 	//LCD_CS=0;;
//  378 	OLED_DCH;;
        LDR.N    R5,??DataTable8  ;; 0x400ff100
        MOV      R4,R0
        MOVS     R2,#+1
        MOVS     R1,#+5
        MOV      R0,R5
        BL       GPIO_SetPinStat
//  379   OLED_SCLL;;
        MOVS     R2,#+0
        MOVS     R1,#+2
        MOV      R0,R5
        BL       GPIO_SetPinStat
        MOVS     R6,#+8
//  380   //asm("nop");    
//  381   while(i--)
//  382   {
//  383     if(data&0x80){OLED_SDAH;}
??OLED_WrDat_0:
        SUBS     R6,R6,#+1
        LSLS     R0,R4,#+24
        ITE      MI 
        MOVMI    R2,#+1
        MOVPL    R2,#+0
//  384     else{OLED_SDAL;}
        MOVS     R1,#+3
        MOV      R0,R5
        BL       GPIO_SetPinStat
//  385     OLED_SCLH; 
        MOVS     R2,#+1
        MOVS     R1,#+2
        MOV      R0,R5
        BL       GPIO_SetPinStat
//  386     asm("nop");;
        nop              
//  387 		//asm("nop");            
//  388     OLED_SCLL;;    
        MOVS     R2,#+0
        MOVS     R1,#+2
        MOV      R0,R5
        BL       GPIO_SetPinStat
//  389     data<<=1;    
        LSLS     R4,R4,#+1
//  390   }
        CMP      R6,#+0
        BNE.N    ??OLED_WrDat_0
//  391 	//LCD_CS=1;
//  392 }
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  393 void OLED_WrCmd(byte cmd)
//  394 {
OLED_WrCmd:
        PUSH     {R4-R6,LR}
//  395 	byte i=8;
//  396 	
//  397 	//LCD_CS=0;;
//  398 	OLED_DCL;;
        LDR.N    R5,??DataTable8  ;; 0x400ff100
        MOV      R4,R0
        MOVS     R2,#+0
        MOVS     R1,#+5
        MOV      R0,R5
        BL       GPIO_SetPinStat
//  399   OLED_SCLL;;
        MOVS     R2,#+0
        MOVS     R1,#+2
        MOV      R0,R5
        BL       GPIO_SetPinStat
        MOVS     R6,#+8
//  400   //asm("nop");   
//  401   while(i--)
//  402   {
//  403     if(cmd&0x80){OLED_SDAH;}
??OLED_WrCmd_0:
        SUBS     R6,R6,#+1
        LSLS     R0,R4,#+24
        ITE      MI 
        MOVMI    R2,#+1
        MOVPL    R2,#+0
//  404     else{OLED_SDAL;;}
        MOVS     R1,#+3
        MOV      R0,R5
        BL       GPIO_SetPinStat
//  405     OLED_SCLH;;
        MOVS     R2,#+1
        MOVS     R1,#+2
        MOV      R0,R5
        BL       GPIO_SetPinStat
//  406     asm("nop");;
        nop              
//  407 		//asm("nop");             
//  408     OLED_SCLL;;    
        MOVS     R2,#+0
        MOVS     R1,#+2
        MOV      R0,R5
        BL       GPIO_SetPinStat
//  409     cmd<<=1;;   
        LSLS     R4,R4,#+1
//  410   } 	
        CMP      R6,#+0
        BNE.N    ??OLED_WrCmd_0
//  411 	//LCD_CS=1;
//  412 }
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  413 void OLED_Set_Pos(byte x, byte y)
//  414 { 
OLED_Set_Pos:
        PUSH     {R4,LR}
        MOV      R4,R0
//  415   OLED_WrCmd(0xb0+y);
        SUB      R0,R1,#+80
        UXTB     R0,R0
        BL       OLED_WrCmd
//  416   OLED_WrCmd(((x&0xf0)>>4)|0x10);
        LSRS     R0,R4,#+4
        ORR      R0,R0,#0x10
        BL       OLED_WrCmd
//  417   OLED_WrCmd((x&0x0f)|0x01); 
        AND      R0,R4,#0xF
        POP      {R4,LR}
        ORR      R0,R0,#0x1
        B.N      OLED_WrCmd
//  418 } 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  419 void OLED_Fill(byte bmp_data)
//  420 {
OLED_Fill:
        PUSH     {R4-R6,LR}
        MOV      R4,R0
//  421 	byte y,x;
//  422 	
//  423 	for(y=0;y<8;y++)
        MOVS     R5,#+0
//  424 	{
//  425 		OLED_WrCmd(0xb0+y);
??OLED_Fill_0:
        SUB      R0,R5,#+80
        UXTB     R0,R0
        BL       OLED_WrCmd
//  426 		OLED_WrCmd(0x01);
        MOVS     R0,#+1
        BL       OLED_WrCmd
//  427 		OLED_WrCmd(0x10);
        MOVS     R0,#+16
        BL       OLED_WrCmd
//  428 		for(x=0;x<X_WIDTH;x++)
        MOVS     R6,#+128
//  429 			OLED_WrDat(bmp_data);
??OLED_Fill_1:
        MOV      R0,R4
        BL       OLED_WrDat
        SUBS     R6,R6,#+1
        BNE.N    ??OLED_Fill_1
//  430 	}
        ADDS     R5,R5,#+1
        CMP      R5,#+8
        BCC.N    ??OLED_Fill_0
//  431 }
        POP      {R4-R6,PC}       ;; return
//  432 /*void OLED_CLS(void)
//  433 {
//  434 	byte y,x;	
//  435 	for(y=0;y<8;y++)
//  436 	{
//  437 		OLED_WrCmd(0xb0+y);
//  438 		OLED_WrCmd(0x01);
//  439 		OLED_WrCmd(0x10); 
//  440 		for(x=0;x<X_WIDTH;x++)
//  441 			OLED_WrDat(0);
//  442 	}
//  443 } */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  444 void OLED_DLY_ms(word ms)
//  445 {                         
OLED_DLY_ms:
        CBZ.N    R0,??OLED_DLY_ms_0
//  446   word a;
//  447   while(ms)
//  448   {
//  449     a=1335;
//  450     while(a--);
//  451     ms--;
??OLED_DLY_ms_1:
        SUBS     R0,R0,#+1
//  452   }
        BNE.N    ??OLED_DLY_ms_1
//  453   return;
??OLED_DLY_ms_0:
        BX       LR               ;; return
//  454 }

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  455 void adjust(byte a)
//  456 {
//  457   OLED_WrCmd(a);	//Ö¸ÁîÊý¾Ý0x0000~0x003f  
adjust:
        B.N      OLED_WrCmd
//  458 }
//  459 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  460 void SetStartColumn(unsigned char d)
//  461 {
SetStartColumn:
        PUSH     {R4,LR}
        MOV      R4,R0
//  462 	OLED_WrCmd(0x00+d%16);		// Set Lower Column Start Address for Page Addressing Mode
        AND      R0,R4,#0xF
        BL       OLED_WrCmd
//  463 						//   Default => 0x00
//  464 	OLED_WrCmd(0x10+d/16);		// Set Higher Column Start Address for Page Addressing Mode
        LSRS     R0,R4,#+4
        POP      {R4,LR}
        ADDS     R0,R0,#+16
        UXTB     R0,R0
        B.N      OLED_WrCmd
//  465 						//   Default => 0x10
//  466 }
//  467 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  468 void SetAddressingMode(unsigned char d)
//  469 {
SetAddressingMode:
        PUSH     {R4,LR}
        MOV      R4,R0
//  470 	OLED_WrCmd(0x20);			// Set Memory Addressing Mode
        MOVS     R0,#+32
        B.N      ?Subroutine1
//  471 	OLED_WrCmd(d);			//   Default => 0x02
//  472 						//     0x00 => Horizontal Addressing Mode
//  473 						//     0x01 => Vertical Addressing Mode
//  474 						//     0x02 => Page Addressing Mode
//  475 }
//  476 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  477 void SetColumnAddress(unsigned char a, unsigned char b)
//  478 {
SetColumnAddress:
        PUSH     {R3-R5,LR}
        MOV      R4,R0
        MOV      R5,R1
//  479 	OLED_WrCmd(0x21);			// Set Column Address
        MOVS     R0,#+33
        B.N      ?Subroutine0
//  480 	OLED_WrCmd(a);			//   Default => 0x00 (Column Start Address)
//  481 	OLED_WrCmd(b);			//   Default => 0x7F (Column End Address)
//  482 }
//  483 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  484 void SetPageAddress(unsigned char a, unsigned char b)
//  485 {
SetPageAddress:
        PUSH     {R3-R5,LR}
        MOV      R4,R0
        MOV      R5,R1
//  486 	OLED_WrCmd(0x22);			// Set Page Address
        MOVS     R0,#+34
        REQUIRE ?Subroutine0
        ;; // Fall through to label ?Subroutine0
//  487 	OLED_WrCmd(a);			//   Default => 0x00 (Page Start Address)
//  488 	OLED_WrCmd(b);			//   Default => 0x07 (Page End Address)
//  489 }

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
?Subroutine0:
        BL       OLED_WrCmd
        MOV      R0,R4
        BL       OLED_WrCmd
        MOV      R0,R5
        POP      {R1,R4,R5,LR}
        B.N      OLED_WrCmd
//  490 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  491 void SetStartLine(unsigned char d)
//  492 {
//  493 	OLED_WrCmd(0x40|d);			// Set Display Start Line
SetStartLine:
        ORR      R0,R0,#0x40
        B.N      OLED_WrCmd
//  494 						//   Default => 0x40 (0x00)
//  495 }
//  496 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  497 void SetContrastControl(unsigned char d)
//  498 {
SetContrastControl:
        PUSH     {R4,LR}
        MOV      R4,R0
//  499 	OLED_WrCmd(0x81);			// Set Contrast Control
        MOVS     R0,#+129
        REQUIRE ?Subroutine1
        ;; // Fall through to label ?Subroutine1
//  500 	OLED_WrCmd(d);			//   Default => 0x7F
//  501 }

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
?Subroutine1:
        BL       OLED_WrCmd
        MOV      R0,R4
        REQUIRE ??Subroutine2_0
        ;; // Fall through to label ??Subroutine2_0

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
??Subroutine2_0:
        POP      {R4,LR}
        B.N      OLED_WrCmd
//  502 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  503 void Set_Charge_Pump(unsigned char d)
//  504 {
Set_Charge_Pump:
        PUSH     {R4,LR}
        MOV      R4,R0
//  505 	OLED_WrCmd(0x8D);			// Set Charge Pump
        MOVS     R0,#+141
        BL       OLED_WrCmd
//  506 	OLED_WrCmd(0x10|d);			//   Default => 0x10
        ORR      R0,R4,#0x10
        B.N      ??Subroutine2_0
//  507 						//     0x10 (0x00) => Disable Charge Pump
//  508 						//     0x14 (0x04) => Enable Charge Pump
//  509 }
//  510 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  511 void Set_Segment_Remap(unsigned char d)
//  512 {
//  513 	OLED_WrCmd(0xA0|d);			// Set Segment Re-Map
Set_Segment_Remap:
        ORR      R0,R0,#0xA0
        B.N      OLED_WrCmd
//  514 						//   Default => 0xA0
//  515 						//     0xA0 (0x00) => Column Address 0 Mapped to SEG0
//  516 						//     0xA1 (0x01) => Column Address 0 Mapped to SEG127
//  517 }
//  518 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  519 void Set_Entire_Display(unsigned char d)
//  520 {
//  521 	OLED_WrCmd(0xA4|d);			// Set Entire Display On / Off
Set_Entire_Display:
        ORR      R0,R0,#0xA4
        B.N      OLED_WrCmd
//  522 						//   Default => 0xA4
//  523 						//     0xA4 (0x00) => Normal Display
//  524 						//     0xA5 (0x01) => Entire Display On
//  525 }
//  526 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  527 void Set_Inverse_Display(unsigned char d)
//  528 {
//  529 	OLED_WrCmd(0xA6|d);			// Set Inverse Display On/Off
Set_Inverse_Display:
        ORR      R0,R0,#0xA6
        B.N      OLED_WrCmd
//  530 						//   Default => 0xA6
//  531 						//     0xA6 (0x00) => Normal Display
//  532 						//     0xA7 (0x01) => Inverse Display On
//  533 }
//  534 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  535 void Set_Multiplex_Ratio(unsigned char d)
//  536 {
Set_Multiplex_Ratio:
        PUSH     {R4,LR}
        MOV      R4,R0
//  537 	OLED_WrCmd(0xA8);			// Set Multiplex Ratio
        MOVS     R0,#+168
        B.N      ?Subroutine1
//  538 	OLED_WrCmd(d);			//   Default => 0x3F (1/64 Duty)
//  539 }
//  540 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  541 void Set_Display_On_Off(unsigned char d)
//  542 {
//  543 	OLED_WrCmd(0xAE|d);			// Set Display On/Off
Set_Display_On_Off:
        ORR      R0,R0,#0xAE
        B.N      OLED_WrCmd
//  544 						//   Default => 0xAE
//  545 						//     0xAE (0x00) => Display Off
//  546 						//     0xAF (0x01) => Display On
//  547 }
//  548 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  549 void SetStartPage(unsigned char d)
//  550 {
//  551 	OLED_WrCmd(0xB0|d);			// Set Page Start Address for Page Addressing Mode
SetStartPage:
        ORR      R0,R0,#0xB0
        B.N      OLED_WrCmd
//  552 						//   Default => 0xB0 (0x00)
//  553 }
//  554 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  555 void Set_Common_Remap(unsigned char d)
//  556 {
//  557 	OLED_WrCmd(0xC0|d);			// Set COM Output Scan Direction
Set_Common_Remap:
        ORR      R0,R0,#0xC0
        B.N      OLED_WrCmd
//  558 						//   Default => 0xC0
//  559 						//     0xC0 (0x00) => Scan from COM0 to 63
//  560 						//     0xC8 (0x08) => Scan from COM63 to 0
//  561 }
//  562 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  563 void Set_Display_Offset(unsigned char d)
//  564 {
Set_Display_Offset:
        PUSH     {R4,LR}
        MOV      R4,R0
//  565 	OLED_WrCmd(0xD3);			// Set Display Offset
        MOVS     R0,#+211
        B.N      ?Subroutine1
//  566 	OLED_WrCmd(d);			//   Default => 0x00
//  567 }
//  568 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  569 void Set_Display_Clock(unsigned char d)
//  570 {
Set_Display_Clock:
        PUSH     {R4,LR}
        MOV      R4,R0
//  571 	OLED_WrCmd(0xD5);			// Set Display Clock Divide Ratio / Oscillator Frequency
        MOVS     R0,#+213
        B.N      ?Subroutine1
//  572 	OLED_WrCmd(d);			//   Default => 0x80
//  573 						//     D[3:0] => Display Clock Divider
//  574 						//     D[7:4] => Oscillator Frequency
//  575 }
//  576 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  577 void Set_Precharge_Period(unsigned char d)
//  578 {
Set_Precharge_Period:
        PUSH     {R4,LR}
        MOV      R4,R0
//  579 	OLED_WrCmd(0xD9);			// Set Pre-Charge Period
        MOVS     R0,#+217
        B.N      ?Subroutine1
//  580 	OLED_WrCmd(d);			//   Default => 0x22 (2 Display Clocks [Phase 2] / 2 Display Clocks [Phase 1])
//  581 						//     D[3:0] => Phase 1 Period in 1~15 Display Clocks
//  582 						//     D[7:4] => Phase 2 Period in 1~15 Display Clocks
//  583 }
//  584 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  585 void Set_Common_Config(unsigned char d)
//  586 {
Set_Common_Config:
        PUSH     {R4,LR}
        MOV      R4,R0
//  587 	OLED_WrCmd(0xDA);			// Set COM Pins Hardware Configuration
        MOVS     R0,#+218
        BL       OLED_WrCmd
//  588 	OLED_WrCmd(0x02|d);			//   Default => 0x12 (0x10)
        ORR      R0,R4,#0x2
        B.N      ??Subroutine2_0
//  589 						//     Alternative COM Pin Configuration
//  590 						//     Disable COM Left/Right Re-Map
//  591 }
//  592 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  593 void Set_VCOMH(unsigned char d)
//  594 {
Set_VCOMH:
        PUSH     {R4,LR}
        MOV      R4,R0
//  595 	OLED_WrCmd(0xDB);			// Set VCOMH Deselect Level
        MOVS     R0,#+219
        B.N      ?Subroutine1
//  596 	OLED_WrCmd(d);			//   Default => 0x20 (0.77*VCC)
//  597 }
//  598 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  599 void Set_NOP(void)
//  600 {
//  601 	OLED_WrCmd(0xE3);			// Command for No Operation
Set_NOP:
        MOVS     R0,#+227
        B.N      OLED_WrCmd
//  602 }
//  603 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  604 void OLED_Init(void)        
//  605 {
OLED_Init:
        PUSH     {R4,LR}
//  606   //DDRM=0XFF;
//  607         GPIO_SetPinMod(OLED_SCL,1);
        LDR.N    R4,??DataTable8  ;; 0x400ff100
        MOVS     R2,#+1
        MOVS     R1,#+2
        MOV      R0,R4
        BL       GPIO_SetPinMod
//  608         GPIO_SetPinMod(OLED_SDA,1);
        MOVS     R2,#+1
        MOVS     R1,#+3
        MOV      R0,R4
        BL       GPIO_SetPinMod
//  609         GPIO_SetPinMod(OLED_RST,1);
        MOVS     R2,#+1
        MOVS     R1,#+1
        MOV      R0,R4
        BL       GPIO_SetPinMod
//  610         GPIO_SetPinMod(OLED_DC,1);
        MOVS     R2,#+1
        MOVS     R1,#+5
        MOV      R0,R4
        BL       GPIO_SetPinMod
//  611         GPIO_SetPinDir(OLED_SCL,1); // Ê±ÖÓ³õÊ¼»¯¶¨Òå
        MOVS     R2,#+1
        MOVS     R1,#+2
        MOV      R0,R4
        BL       GPIO_SetPinDir
//  612         GPIO_SetPinDir(OLED_SDA,1);//Êý¾Ý¿ÚD0
        MOVS     R2,#+1
        MOVS     R1,#+3
        MOV      R0,R4
        BL       GPIO_SetPinDir
//  613         GPIO_SetPinDir(OLED_RST,1);//¸´Î»µÍÄÜµçÆ½
        MOVS     R2,#+1
        MOV      R1,R2
        MOV      R0,R4
        BL       GPIO_SetPinDir
//  614         GPIO_SetPinDir(OLED_DC,1);//Æ«ÖÃ³£µÍ
        MOVS     R2,#+1
        MOVS     R1,#+5
        MOV      R0,R4
        BL       GPIO_SetPinDir
//  615 
//  616 	OLED_SCLH;
        MOVS     R2,#+1
        MOVS     R1,#+2
        MOV      R0,R4
        BL       GPIO_SetPinStat
//  617 	//LCD_CS=1;	//Ô¤ÖÆSLKºÍSSÎª¸ßµçÆ½   	
//  618 	
//  619 	OLED_RSTL;
        MOVS     R2,#+0
        MOVS     R1,#+1
        MOV      R0,R4
        BL       GPIO_SetPinStat
//  620 	OLED_DLY_ms(50);
        MOVS     R0,#+50
        BL       OLED_DLY_ms
//  621 	OLED_RSTH;
        MOVS     R2,#+1
        MOV      R1,R2
        MOV      R0,R4
        BL       GPIO_SetPinStat
//  622 	
//  623 	//´ÓÉÏµçµ½ÏÂÃæ¿ªÊ¼³õÊ¼»¯ÒªÓÐ×ã¹»µÄÊ±¼ä£¬¼´µÈ´ýRC¸´Î»Íê±Ï
//  624   Set_Display_On_Off(0x00);		  // Display Off (0x00/0x01)
        MOVS     R0,#+174
        BL       OLED_WrCmd
//  625   Set_Display_Clock(0x80);		  // Set Clock as 100 Frames/Sec
        MOVS     R0,#+213
        BL       OLED_WrCmd
        MOVS     R0,#+128
        BL       OLED_WrCmd
//  626   Set_Multiplex_Ratio(0x3F);		// 1/64 Duty (0x0F~0x3F)
        MOVS     R0,#+168
        BL       OLED_WrCmd
        MOVS     R0,#+63
        BL       OLED_WrCmd
//  627   Set_Display_Offset(0x00);		  // Shift Mapping RAM Counter (0x00~0x3F)
        MOVS     R0,#+211
        BL       OLED_WrCmd
        MOVS     R0,#+0
        BL       OLED_WrCmd
//  628   SetStartLine(0x00);			      // Set Mapping RAM Display Start Line (0x00~0x3F)
        MOVS     R0,#+64
        BL       OLED_WrCmd
//  629   Set_Charge_Pump(0x04);		    // Enable Embedded DC/DC Converter (0x00/0x04)
        MOVS     R0,#+4
        BL       Set_Charge_Pump
//  630   SetAddressingMode(0x02);		  // Set Page Addressing Mode (0x00/0x01/0x02)
        MOVS     R0,#+32
        BL       OLED_WrCmd
        MOVS     R0,#+2
        BL       OLED_WrCmd
//  631   Set_Segment_Remap(0x01);		  // Set SEG/Column Mapping     0x00×óÓÒ·´ÖÃ 0x01Õý³£
        MOVS     R0,#+161
        BL       OLED_WrCmd
//  632   Set_Common_Remap(0x08);			  // Set COM/Row Scan Direction 0x00ÉÏÏÂ·´ÖÃ 0x08Õý³£
        MOVS     R0,#+200
        BL       OLED_WrCmd
//  633   Set_Common_Config(0x10);		  // Set Sequential Configuration (0x00/0x10)
        MOVS     R0,#+16
        BL       Set_Common_Config
//  634   SetContrastControl(Brightness);	// Set SEG Output Current
        MOVS     R0,#+129
        BL       OLED_WrCmd
        MOVS     R0,#+207
        BL       OLED_WrCmd
//  635   Set_Precharge_Period(0xF1);		// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
        MOVS     R0,#+217
        BL       OLED_WrCmd
        MOVS     R0,#+241
        BL       OLED_WrCmd
//  636   Set_VCOMH(0x40);			        // Set VCOM Deselect Level
        MOVS     R0,#+219
        BL       OLED_WrCmd
        MOVS     R0,#+64
        BL       OLED_WrCmd
//  637   Set_Entire_Display(0x00);		  // Disable Entire Display On (0x00/0x01)
        MOVS     R0,#+164
        BL       OLED_WrCmd
//  638   Set_Inverse_Display(0x00);		// Disable Inverse Display On (0x00/0x01)  
        MOVS     R0,#+166
        BL       OLED_WrCmd
//  639   Set_Display_On_Off(0x01);		  // Display On (0x00/0x01)
        MOVS     R0,#+175
        BL       OLED_WrCmd
//  640   OLED_Fill(0x00);  //³õÊ¼ÇåÆÁ
        MOVS     R0,#+0
        BL       OLED_Fill
//  641 	OLED_Set_Pos(0,0); 
        POP      {R4,LR}
        MOVS     R1,#+0
        MOV      R0,R1
        B.N      OLED_Set_Pos
//  642 	
//  643 } 

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8:
        DC32     0x400ff100
//  644 //==============================================================
//  645 //º¯ÊýÃû£º void LCD_PutPixel(byte x,byte y)
//  646 //¹¦ÄÜÃèÊö£º»æÖÆÒ»¸öµã£¨x,y£©
//  647 //²ÎÊý£ºÕæÊµ×ø±êÖµ(x,y),xµÄ·¶Î§0¡«127£¬yµÄ·¶Î§0¡«64
//  648 //·µ»Ø£ºÎÞ
//  649 //==============================================================
//  650 /*void OLED_PutPixel(byte x,byte y)
//  651 {
//  652 	byte data1;  //data1µ±Ç°µãµÄÊý¾Ý 
//  653 	 
//  654   OLED_Set_Pos(x,y); 
//  655 	data1 = 0x01<<(y%8); 	
//  656 	OLED_WrCmd(0xb0+(y>>3));
//  657 	OLED_WrCmd(((x&0xf0)>>4)|0x10);
//  658 	OLED_WrCmd((x&0x0f)|0x00);
//  659 	OLED_WrDat(data1); 	 	
//  660 } */
//  661 //==============================================================
//  662 //º¯ÊýÃû£º void LCD_Rectangle(byte x1,byte y1,
//  663 //                   byte x2,byte y2,byte color,byte gif)
//  664 //¹¦ÄÜÃèÊö£º»æÖÆÒ»¸öÊµÐÄ¾ØÐÎ
//  665 //²ÎÊý£º×óÉÏ½Ç×ø±ê£¨x1,y1£©,ÓÒÏÂ½Ç×ø±ê£¨x2£¬y2£©
//  666 //      ÆäÖÐx1¡¢x2µÄ·¶Î§0¡«127£¬y1£¬y2µÄ·¶Î§0¡«63£¬¼´ÕæÊµ×ø±êÖµ
//  667 //·µ»Ø£ºÎÞ
//  668 //==============================================================
//  669 /*void OLED_Rectangle(byte x1,byte y1,byte x2,byte y2,byte gif)
//  670 {
//  671 	byte n; 
//  672 		
//  673 	OLED_Set_Pos(x1,y1>>3);
//  674 	for(n=x1;n<=x2;n++)
//  675 	{
//  676 		OLED_WrDat(0x01<<(y1%8)); 			
//  677 		if(gif == 1) 	OLED_DLY_ms(50);
//  678 	}  
//  679 	OLED_Set_Pos(x1,y2>>3);
//  680   for(n=x1;n<=x2;n++)
//  681 	{
//  682 		OLED_WrDat(0x01<<(y2%8)); 			
//  683 		if(gif == 1) 	OLED_DLY_ms(5);
//  684 	}
//  685 	
//  686 } */ 
//  687 //==============================================================
//  688 //º¯ÊýÃû£ºLCD_P6x8Str(byte x,byte y,byte *p)
//  689 //¹¦ÄÜÃèÊö£ºÐ´ÈëÒ»×é±ê×¼ASCII×Ö·û´®
//  690 //²ÎÊý£ºÏÔÊ¾µÄÎ»ÖÃ£¨x,y£©£¬yÎªÒ³·¶Î§0¡«7£¬ÒªÏÔÊ¾µÄ×Ö·û´®
//  691 //·µ»Ø£ºÎÞ
//  692 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  693 void OLED_P6x8Str(byte x,byte y,byte ch[])
//  694 {
OLED_P6x8Str:
        PUSH     {R3-R9,LR}
        MOV      R7,R0
        MOV      R8,R1
        MOV      R9,R2
//  695   byte c=0,i=0,j=0;      
        MOVS     R5,#+0
        ADR.W    R6,F6x8
        B.N      ??OLED_P6x8Str_0
//  696   while (ch[j]!='\0')
//  697   {    
//  698     c =ch[j]-32;
??OLED_P6x8Str_1:
        SUBS     R0,R0,#+32
//  699     if(x>126){x=0;y++;}
        UXTB     R7,R7
        UXTB     R4,R0
        CMP      R7,#+127
        ITT      CS 
        MOVCS    R7,#+0
        ADDCS    R8,R8,#+1
//  700     OLED_Set_Pos(x,y);    
        UXTB     R1,R8
        MOV      R0,R7
        BL       OLED_Set_Pos
//  701   	for(i=0;i<6;i++)     
        ADD      R0,R4,R4, LSL #+1
        LSLS     R0,R0,#+1
        ADDS     R4,R0,R6
//  702   	  OLED_WrDat(F6x8[c][i]);  
        LDRB     R0,[R0, R6]
        BL       OLED_WrDat
        LDRB     R0,[R4, #+1]
        BL       OLED_WrDat
        LDRB     R0,[R4, #+2]
        BL       OLED_WrDat
        LDRB     R0,[R4, #+3]
        BL       OLED_WrDat
        LDRB     R0,[R4, #+4]
        BL       OLED_WrDat
        LDRB     R0,[R4, #+5]
        BL       OLED_WrDat
//  703   	x+=6;
        ADDS     R7,R7,#+6
//  704   	j++;
        ADDS     R5,R5,#+1
??OLED_P6x8Str_0:
        UXTB     R5,R5
        LDRB     R0,[R5, R9]
        CMP      R0,#+0
        BNE.N    ??OLED_P6x8Str_1
//  705   }
//  706 } 
        POP      {R0,R4-R9,PC}    ;; return
//  707 //==============================================================
//  708 //º¯ÊýÃû£ºLCD_P8x16Str(byte x,byte y,byte *p)
//  709 //¹¦ÄÜÃèÊö£ºÐ´ÈëÒ»×é±ê×¼ASCII×Ö·û´®
//  710 //²ÎÊý£ºÏÔÊ¾µÄÎ»ÖÃ£¨x,y£©£¬yÎªÒ³·¶Î§0¡«7£¬ÒªÏÔÊ¾µÄ×Ö·û´®
//  711 //·µ»Ø£ºÎÞ
//  712 //==============================================================  
//  713 /*void OLED_P8x16Str(byte x,byte y,byte ch[])
//  714 {
//  715   byte c=0,i=0,j=0;
//  716         
//  717   while (ch[j]!='\0')
//  718   {    
//  719     c =ch[j]-32;
//  720     if(x>120){x=0;y++;}
//  721     OLED_Set_Pos(x,y);    
//  722   	for(i=0;i<8;i++)     
//  723   	  OLED_WrDat(F8X16[c*16+i]);
//  724   	OLED_Set_Pos(x,y+1);    
//  725   	for(i=0;i<8;i++)     
//  726   	  OLED_WrDat(F8X16[c*16+i+8]);  
//  727   	x+=8;
//  728   	j++;
//  729   }
//  730 } */
//  731 //Êä³öºº×Ö×Ö·û´®
//  732 /*void OLED_P14x16Str(byte x,byte y,byte ch[])
//  733 {
//  734 	byte wm=0,ii = 0;
//  735 	word adder=1; 
//  736 	
//  737 	while(ch[ii] != '\0')
//  738 	{
//  739   	wm = 0;
//  740   	adder = 1;
//  741   	while(F14x16_Idx[wm] > 127)
//  742   	{
//  743   		if(F14x16_Idx[wm] == ch[ii])
//  744   		{
//  745   			if(F14x16_Idx[wm + 1] == ch[ii + 1])
//  746   			{
//  747   				adder = wm * 14;
//  748   				break;
//  749   			}
//  750   		}
//  751   		wm += 2;			
//  752   	}
//  753   	if(x>118){x=0;y++;}
//  754   	OLED_Set_Pos(x , y); 
//  755   	if(adder != 1)// ÏÔÊ¾ºº×Ö					
//  756   	{
//  757   		OLED_Set_Pos(x , y);
//  758   		for(wm = 0;wm < 14;wm++)               
//  759   		{
//  760   			OLED_WrDat(F14x16[adder]);	
//  761   			adder += 1;
//  762   		}      
//  763   		OLED_Set_Pos(x,y + 1); 
//  764   		for(wm = 0;wm < 14;wm++)          
//  765   		{
//  766   			OLED_WrDat(F14x16[adder]);
//  767   			adder += 1;
//  768   		}   		
//  769   	}
//  770   	else			  //ÏÔÊ¾¿Õ°××Ö·û			
//  771   	{
//  772   		ii += 1;
//  773       OLED_Set_Pos(x,y);
//  774   		for(wm = 0;wm < 16;wm++)
//  775   		{
//  776   				OLED_WrDat(0);
//  777   		}
//  778   		OLED_Set_Pos(x,y + 1);
//  779   		for(wm = 0;wm < 16;wm++)
//  780   		{   		
//  781   				OLED_WrDat(0);	
//  782   		}
//  783   	}
//  784   	x += 14;
//  785   	ii += 2;
//  786 	}
//  787 } */
//  788 //Êä³öºº×ÖºÍ×Ö·û»ìºÏ×Ö·û´®
//  789 /*void OLED_Print(byte x, byte y, byte ch[])
//  790 {
//  791 	byte ch2[3];
//  792 	byte ii=0;        
//  793 	while(ch[ii] != '\0')
//  794 	{
//  795 		if(ch[ii] > 127)
//  796 		{
//  797 			ch2[0] = ch[ii];
//  798 	 		ch2[1] = ch[ii + 1];
//  799 			ch2[2] = '\0';			//ºº×ÖÎªÁ½¸ö×Ö½Ú
//  800 			OLED_P14x16Str(x , y, ch2);	//ÏÔÊ¾ºº×Ö
//  801 			x += 14;
//  802 			ii += 2;
//  803 		}
//  804 		else
//  805 		{
//  806 			ch2[0] = ch[ii];	
//  807 			ch2[1] = '\0';			//×ÖÄ¸Õ¼Ò»¸ö×Ö½Ú
//  808 			OLED_P8x16Str(x , y , ch2);	//ÏÔÊ¾×ÖÄ¸
//  809 			x += 8;
//  810 			ii+= 1;
//  811 		}
//  812 	}
//  813 } */
//  814 
//  815 /*void Dis_Char(byte y,byte x,byte asc) 
//  816 {
//  817   byte ch2[2];
//  818 	x=x*8;        
//  819 	ch2[0] = asc;	
//  820 	ch2[1] = '\0';			//×ÖÄ¸Õ¼Ò»¸ö×Ö½Ú
//  821 	OLED_P8x16Str(x , y , ch2);	//ÏÔÊ¾×ÖÄ¸
//  822 } */
//  823 /*void Dis_String(byte y, byte x, byte ch[])
//  824 {
//  825 	byte ch2[3];
//  826 	byte ii=0;
//  827 	x=x*8;        
//  828 	while(ch[ii] != '\0')
//  829 	{
//  830 		if(ch[ii] > 127)
//  831 		{
//  832 			ch2[0] = ch[ii];
//  833 	 		ch2[1] = ch[ii + 1];
//  834 			ch2[2] = '\0';			//ºº×ÖÎªÁ½¸ö×Ö½Ú
//  835 			OLED_P14x16Str(x , y, ch2);	//ÏÔÊ¾ºº×Ö
//  836 			x += 14;
//  837 			ii += 2;
//  838 		}
//  839 		else
//  840 		{
//  841 			ch2[0] = ch[ii];	
//  842 			ch2[1] = '\0';			//×ÖÄ¸Õ¼Ò»¸ö×Ö½Ú
//  843 			OLED_P8x16Str(x , y , ch2);	//ÏÔÊ¾×ÖÄ¸
//  844 			x += 8;
//  845 			ii+= 1;
//  846 		}
//  847 	}
//  848 } */
//  849 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  850 void Dis_Num(byte y, byte x, unsigned int num,byte N) 
//  851 {
Dis_Num:
        PUSH     {R4-R7,LR}
        SUB      SP,SP,#+12
        MOV      R4,R1
//  852   //byte line;
//  853   byte j=0;
//  854   byte n[6]={0};
        ADD      R1,SP,#+0
        MOVS     R5,#+0
        MOVS     R6,#+0
        STM      R1!,{R5,R6}
//  855   x=x*8;
//  856   n[0]=(num/10000)%10; 
        MOVW     R1,#+10000
        UDIV     R5,R2,R1
        MOVS     R1,#+10
        UDIV     R6,R5,R1
        ADD      R7,R6,R6, LSL #+2
        SUB      R5,R5,R7, LSL #+1
        STRB     R5,[SP, #+0]
//  857   n[1]=(num/1000)%10;
        MOV      R5,#+1000
        UDIV     R6,R2,R5
        UDIV     R7,R6,R1
        ADD      R7,R7,R7, LSL #+2
        ADD      R5,SP,#+0
        SUB      R6,R6,R7, LSL #+1
        STRB     R6,[R5, #+1]
//  858   n[2]=(num/100)%10;
        MOVS     R6,#+100
        UDIV     R6,R2,R6
        UDIV     R7,R6,R1
        ADD      R7,R7,R7, LSL #+2
        SUB      R6,R6,R7, LSL #+1
        STRB     R6,[R5, #+2]
//  859   n[3]=(num/10)%10;
        UDIV     R6,R2,R1
        UDIV     R1,R6,R1
        ADD      R7,R1,R1, LSL #+2
        SUB      R1,R6,R7, LSL #+1
        STRB     R1,[R5, #+3]
//  860   n[4]=num%10;
        ADD      R1,R6,R6, LSL #+2
        SUB      R1,R2,R1, LSL #+1
        STRB     R1,[R5, #+4]
//  861   n[5]='\0';    
        MOVS     R1,#+0
        STRB     R1,[R5, #+5]
//  862   for(j=0;j<5;j++) n[j]=n[j]+16+32;
        LDRB     R1,[SP, #+0]
//  863   OLED_P6x8Str(x,y,&n[5-N]);//´ÓACSIIÂë±íÖÐ¶ÁÈ¡×Ö½Ú£¬È»ºóÐ´ÈëÒº¾§
        ADD      R2,SP,#+0
        ADDS     R1,R1,#+48
        STRB     R1,[SP, #+0]
        LDRB     R1,[R5, #+1]
        ADDS     R1,R1,#+48
        STRB     R1,[R5, #+1]
        LDRB     R1,[R5, #+2]
        ADDS     R1,R1,#+48
        STRB     R1,[R5, #+2]
        LDRB     R1,[R5, #+3]
        ADDS     R1,R1,#+48
        STRB     R1,[R5, #+3]
        LDRB     R1,[R5, #+4]
        ADDS     R1,R1,#+48
        STRB     R1,[R5, #+4]
        RSBS     R1,R3,#+0
        ADDS     R1,R1,R2
        ADDS     R2,R1,#+5
        MOV      R1,R0
        LSLS     R0,R4,#+3
        UXTB     R0,R0
        BL       OLED_P6x8Str
//  864 }
        ADD      SP,SP,#+12
        POP      {R4-R7,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
F6x8:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
        DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
        DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
        DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
        DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
        DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
        DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
        DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
        DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
        DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
        DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
        DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
        DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
        DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
        DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
        DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
        DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
        DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
        DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
        DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
        DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
        DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
        DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
        DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
        DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
        DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
        DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
        DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
        DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
        DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
        DC8 20, 20, 20, 20, 20, 20

        SECTION `.iar_vfe_header`:DATA:REORDER:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
//  865 
//  866 /*void Dis_Float(byte Y,byte X,double real,byte N) 
//  867 {
//  868    byte   i_Count=1;
//  869    byte   n[12]={0};
//  870    long   j=1;  
//  871    uint   real_int=0;
//  872    double decimal=0;
//  873    uint   real_decimal=0;
//  874    X=X*8;
//  875    real_int=(int)real;
//  876    //Dis_Num(2,0,real_int,5);
//  877    decimal=real-real_int;
//  878    real_decimal=decimal*1e4;
//  879    //Dis_Num(2,6,real_decimal,4);
//  880    while(real_int/10/j!=0)
//  881    {
//  882       j=j*10;i_Count++;  
//  883    } 
//  884    n[0]=(real_int/10000)%10; 
//  885    n[1]=(real_int/1000)%10;
//  886    n[2]=(real_int/100)%10;
//  887    n[3]=(real_int/10)%10;
//  888    n[4]=(real_int/1)%10; 
//  889    n[5]='.';
//  890    n[6]=(real_decimal/1000)%10;
//  891    n[7]=(real_decimal/100)%10;
//  892    n[8]=(real_decimal/10)%10;
//  893    n[9]=real_decimal%10;
//  894    n[6+N]='\0'; 
//  895    for(j=0;j<10;j++) n[j]=n[j]+16+32;
//  896    n[5]='.';
//  897    n[6+N]='\0';   
//  898    OLED_P8x16Str(X,Y,&n[5-i_Count]); 
//  899 }
//  900 
//  901 void Dis_Float2(byte Y,byte X,double real,byte N1,byte N2) 
//  902 {
//  903    byte   i_Count=1;
//  904    byte   n[12]={0};
//  905    long   j=1;  
//  906    uint   real_int=0;
//  907    double decimal=0;
//  908    uint   real_decimal=0;
//  909    X=X*8;
//  910    real_int=(int)real;
//  911    //Dis_Num(2,0,real_int,5);
//  912    decimal=real-real_int;
//  913    real_decimal=decimal*1e4;
//  914    //Dis_Num(2,6,real_decimal,4);
//  915    while(real_int/10/j!=0)
//  916    {
//  917       j=j*10;i_Count++;  
//  918    } 
//  919    n[0]=(real_int/10000)%10; 
//  920    n[1]=(real_int/1000)%10;
//  921    n[2]=(real_int/100)%10;
//  922    n[3]=(real_int/10)%10;
//  923    n[4]=(real_int/1)%10; 
//  924    n[5]='.';
//  925    n[6]=(real_decimal/1000)%10;
//  926    n[7]=(real_decimal/100)%10;
//  927    n[8]=(real_decimal/10)%10;
//  928    n[9]=real_decimal%10;
//  929    n[6+N2]='\0'; 
//  930    for(j=0;j<10;j++) n[j]=n[j]+16+32;
//  931    n[5]='.';
//  932    n[6+N2]='\0';   
//  933    OLED_P8x16Str(X,Y,&n[5-N1]); 
//  934 }
//  935 
//  936 //==============================================================
//  937 //º¯ÊýÃû£º void Draw_BMP(byte x,byte y)
//  938 //¹¦ÄÜÃèÊö£ºÏÔÊ¾BMPÍ¼Æ¬128¡Á64
//  939 //²ÎÊý£ºÆðÊ¼µã×ø±ê(x,y),xµÄ·¶Î§0¡«127£¬yÎªÒ³µÄ·¶Î§0¡«7
//  940 //·µ»Ø£ºÎÞ
//  941 //==============================================================
//  942 void Draw_BMP(byte x0,byte y0,byte x1,byte y1,byte bmp[])
//  943 { 	
//  944   word ii=0;
//  945   byte x,y;
//  946   
//  947   if(y1%8==0) y=y1/8;      
//  948   else y=y1/8+1;
//  949 	for(y=y0;y<=y1;y++)
//  950 	{
//  951 		OLED_Set_Pos(x0,y);				
//  952     for(x=x0;x<x1;x++)
//  953 	    {      
//  954 	    	OLED_WrDat(bmp[ii++]);	    	
//  955 	    }
//  956 	}
//  957 }
//  958 void Draw_LQLogo(void)
//  959 { 	
//  960   word ii=0;
//  961   byte x,y;       
//  962   
//  963 	for(y=0;y<8;y++)
//  964 	{
//  965 		OLED_Set_Pos(16,y);				
//  966     for(x=16;x<112;x++)
//  967 	    {      
//  968 	    	OLED_WrDat(longqiu96x64[ii++]);	    	
//  969 	    }
//  970 	}
//  971 }
//  972 void Draw_LibLogo(void)
//  973 { 	
//  974   word ii=0;
//  975   byte x,y;       
//  976   
//  977 	for(y=0;y<8;y++)
//  978 	{
//  979 		OLED_Set_Pos(34,y);				
//  980     for(x=34;x<94;x++)
//  981 	    {      
//  982 	    	OLED_WrDat(LIBLOGO60x58[ii++]);	    	
//  983 	    }
//  984 	}
//  985 }      */
// 
//   768 bytes in section .data
// 2 760 bytes in section .rodata
// 1 560 bytes in section .text
// 
// 1 560 bytes of CODE  memory
// 2 760 bytes of CONST memory
//   768 bytes of DATA  memory
//
//Errors: none
//Warnings: none
