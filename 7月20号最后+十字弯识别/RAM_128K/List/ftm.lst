###############################################################################
#                                                                             #
#                                                       30/Oct/2014  20:23:21 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\Library\Dr #
#                    ivers\FTM\ftm.c                                          #
#    Command line =  E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\Library\Dr #
#                    ivers\FTM\ftm.c -D IAR -lCN                              #
#                    E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\RAM_128K\L #
#                    ist\ -lB E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\R #
#                    AM_128K\List\ -o E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029 #
#                    µ÷ÊÔ°æ\RAM_128K\Obj\ --debug --endian=little             #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench 6.0                 #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\Library\CP #
#                    U\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\Libr #
#                    ary\Drivers\ADC\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1 #
#                    029µ÷ÊÔ°æ\Library\Drivers\FTM\ -I                        #
#                    E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\Library\Dr #
#                    ivers\GPIO\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ #
#                    ÊÔ°æ\Library\Drivers\PIT\ -I                             #
#                    E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\System_Ini #
#                    t\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\Sour #
#                    ce\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\OLE #
#                    D\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\SD_S #
#                    ystem\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\ #
#                    Simple_AD\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷Ê #
#                    Ô°æ\Delay\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷Ê #
#                    Ô°æ\Make_Desicion\ -Oh                                   #
#    List file    =  E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\RAM_128K\L #
#                    ist\ftm.lst                                              #
#    Object file  =  E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\RAM_128K\O #
#                    bj\ftm.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\Library\Drivers\FTM\ftm.c
      1          /*****************************************************************
      2          * ÎÄ¼þÃû³Æ£ºftm.c
      3          * Ãè    Êö: FTM(¶à¹¦ÄÜ¶¨Ê±Æ÷Ä£¿é,°üÀ¨PWMÊä³ö¡¢ÊäÈë²¶×½¡¢Êä³ö±È½Ï¡¢
      4                      ¶¨Ê±ÖÐ¶Ï¡¢Âö³å¼Ó¼õ¼ÆÊý¡¢Âö³åÖÜÆÚÂö¿í²âÁ¿)£¬±¾ÎÄ¼þÖ»º¬
      5                      PWMºÍÕý½»½âÂëÇý¶¯³ÌÐò(²Î¿¼ËïÎÄ½¡PWM³õÊ¼»¯³ÌÐò)
      6          * ×÷    Õß£ºÍò±ù±ù
      7          * ÌØ±ðÃùÐ»£º¼Í³ÉÊ¦ÐÖ(²©¿Íhttp://blog.chinaaet.com/jihceng0622)
      8          * Ê±    ¼ä£º2012Äê5ÔÂ21ÈÕ
      9          *****************************************************************/
     10          
     11          #include "ftm.h"
     12          
     13          
     14          /**********************************************************************************
     15          * º¯ÊýÃû³Æ£ºFTM_initPWM
     16          * Èë¿Ú²ÎÊý£ºftm    FTMÄ£¿é
     17                              FTM0
     18                              FTM1
     19                              FTM2
     20                      clks  FTMÊ±ÖÓÔ´Ñ¡Ôñ
     21                              00 No clock selected (This in effect disables the FTM counter.)
     22                              01 System clock(¼´Bus Clock)
     23                              10 Fixed frequency clock
     24                              11 External clock
     25                      div   Ê±ÖÓ·ÖÆµÊý
     26                              000 Divide by 1
     27                              001 Divide by 2
     28                              010 Divide by 4
     29                              011 Divide by 8
     30                              100 Divide by 16
     31                              101 Divide by 32
     32                              110 Divide by 64
     33                              111 Divide by 128                 
     34          * Ãè    Êö£ºPWM»ù´¡³õÊ¼»¯
     35          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     36          void FTM_initPWM(FTM_MemMapPtr ftm, int8u_t clks, int8u_t div)
     37          {
     38            if(ftm == FTM0)
   \                     FTM_initPWM:
   \   00000000   0x....             LDR.N    R3,??DataTable1  ;; 0x40038000
   \   00000002   0xB410             PUSH     {R4}
   \   00000004   0x4298             CMP      R0,R3
   \   00000006   0xBF02             ITTT     EQ 
   \   00000008   0x....             LDREQ.N  R3,??DataTable1_1  ;; 0x40048030
   \   0000000A   0x68DC             LDREQ    R4,[R3, #+12]
   \   0000000C   0xF044 0x7480      ORREQ    R4,R4,#0x1000000
     39            {
     40              SIM_SCGC6 |= SIM_SCGC6_FTM0_MASK;                       // Ê¹ÄÜFTM0Ê±ÖÓ 
   \   00000010   0xD006             BEQ.N    ??FTM_initPWM_0
     41            }
     42            else if(ftm == FTM1)
   \   00000012   0x....             LDR.N    R3,??DataTable1_2  ;; 0x40039000
   \   00000014   0x4298             CMP      R0,R3
   \   00000016   0xD105             BNE.N    ??FTM_initPWM_1
     43            {
     44              SIM_SCGC6 |= SIM_SCGC6_FTM1_MASK;                       // Ê¹ÄÜFTM1Ê±ÖÓ 
   \   00000018   0x....             LDR.N    R3,??DataTable1_1  ;; 0x40048030
   \   0000001A   0x68DC             LDR      R4,[R3, #+12]
   \   0000001C   0xF044 0x7400      ORR      R4,R4,#0x2000000
   \                     ??FTM_initPWM_0:
   \   00000020   0x60DC             STR      R4,[R3, #+12]
   \   00000022   0xE007             B.N      ??FTM_initPWM_2
     45            }
     46            else if(ftm == FTM2)
   \                     ??FTM_initPWM_1:
   \   00000024   0x....             LDR.N    R3,??DataTable1_3  ;; 0x400b8000
   \   00000026   0x4298             CMP      R0,R3
   \   00000028   0xD104             BNE.N    ??FTM_initPWM_2
     47            {
     48              SIM_SCGC3 |= SIM_SCGC3_FTM2_MASK;                       // Ê¹ÄÜFTM2Ê±ÖÓ 
   \   0000002A   0x....             LDR.N    R3,??DataTable1_1  ;; 0x40048030
   \   0000002C   0x681C             LDR      R4,[R3, #+0]
   \   0000002E   0xF044 0x7480      ORR      R4,R4,#0x1000000
   \   00000032   0x601C             STR      R4,[R3, #+0]
     49            }
     50            FTM_MODE_REG(ftm) |= FTM_MODE_WPDIS_MASK;                 // ½ûÓÃÐ´±£»¤
   \                     ??FTM_initPWM_2:
   \   00000034   0x6D43             LDR      R3,[R0, #+84]
   \   00000036   0x00C9             LSLS     R1,R1,#+3
   \   00000038   0xF043 0x0304      ORR      R3,R3,#0x4
   \   0000003C   0x6543             STR      R3,[R0, #+84]
     51            FTM_SC_REG(ftm) &= ~FTM_SC_CLKS_MASK;                     // ½«CLK[1:0]ÉèÎª0:0 
   \   0000003E   0x6803             LDR      R3,[R0, #+0]
   \   00000040   0xF001 0x0118      AND      R1,R1,#0x18
   \   00000044   0xF023 0x0318      BIC      R3,R3,#0x18
   \   00000048   0x6003             STR      R3,[R0, #+0]
     52            FTM_SC_REG(ftm) &= ~FTM_SC_PS_MASK;                       // ½«PS[2:0]ÉèÎª0:0:0
   \   0000004A   0x6803             LDR      R3,[R0, #+0]
   \   0000004C   0xF002 0x0207      AND      R2,R2,#0x7
   \   00000050   0x08DB             LSRS     R3,R3,#+3
   \   00000052   0x00DB             LSLS     R3,R3,#+3
   \   00000054   0x6003             STR      R3,[R0, #+0]
     53            FTM_QDCTRL_REG(ftm) &= ~FTM_QDCTRL_QUADEN_MASK;           // ½ûÖ¹Õý½»½âÂëÄ£Ê½
   \   00000056   0xF8D0 0x3080      LDR      R3,[R0, #+128]
   \   0000005A   0x1851             ADDS     R1,R2,R1
   \   0000005C   0x085B             LSRS     R3,R3,#+1
   \   0000005E   0x005B             LSLS     R3,R3,#+1
   \   00000060   0xF8C0 0x3080      STR      R3,[R0, #+128]
     54            FTM_OUTINIT_REG(ftm) = 0;                                 // ¸÷Í¨µÀ³õÊ¼»¯Ê±µÄÊä³öÎª"0" 
   \   00000064   0x2300             MOVS     R3,#+0
   \   00000066   0x65C3             STR      R3,[R0, #+92]
     55            FTM_OUTMASK_REG(ftm) = 0x0FF;                             // ÆÁ±ÎËùÓÐÍ¨µÀ
   \   00000068   0x23FF             MOVS     R3,#+255
   \   0000006A   0x6603             STR      R3,[R0, #+96]
     56            
     57            FTM_SC_REG(ftm) = FTM_SC_CLKS(clks) + FTM_SC_PS(div);     // ½ûÖ¹ÖÐ¶Ï£¬µÝÔö¼ÆÊý£¬Ê¼ÖÕÀ´Ô´clks£¬·ÖÆµÊýdiv
   \   0000006C   0x6001             STR      R1,[R0, #+0]
     58          }
   \   0000006E   0xBC10             POP      {R4}
   \   00000070   0x4770             BX       LR               ;; return
     59          
     60          /**********************************************************************************
     61          * º¯ÊýÃû³Æ£ºFTM_enablePWMCh
     62          * Èë¿Ú²ÎÊý£ºftm     FTMÄ£¿é
     63                               FTM0
     64                               FTM1
     65                               FTM2
     66                      channel PWMÍ¨µÀºÅ
     67                      st      ¼ÆÊýÆ÷¼ÆÊýÆðÊ¼Öµ
     68                      end     ¼ÆÊýÆ÷ÖÕÖ¹Öµ(ÖÜÆÚ = end-st+1)
     69                      dty     Âö¿í(Õ¼¿Õ±È = wid/(end+1-st))
     70          * Ãè    Êö£ºÉèÖÃPWMÍ¨µÀ²ÎÊý,PWM¿ªÊ¼¹¤×÷
     71          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     72          void FTM_enablePWMCh(FTM_MemMapPtr ftm, int8u_t channel, int16u_t st, int16u_t end, int16u_t dty)
     73          {
   \                     FTM_enablePWMCh:
   \   00000000   0xB4F0             PUSH     {R4-R7}
   \   00000002   0x9C04             LDR      R4,[SP, #+16]
   \   00000004   0xEB00 0x05C1      ADD      R5,R0,R1, LSL #+3
   \   00000008   0x68EE             LDR      R6,[R5, #+12]
   \   0000000A   0x2701             MOVS     R7,#+1
   \   0000000C   0xF026 0x0604      BIC      R6,R6,#0x4
   \   00000010   0x60EE             STR      R6,[R5, #+12]
     74            FTM_CnSC_REG(ftm,channel) &= ~FTM_CnSC_ELSA_MASK;       // ELSA=0£¬ELSB=1£¬×ó¶ÔÆë£¬ÏÈ¸ßºóµÍ
     75            FTM_CnSC_REG(ftm,channel) |= FTM_CnSC_ELSB_MASK;  
   \   00000012   0x68EE             LDR      R6,[R5, #+12]
   \   00000014   0xFA07 0xF101      LSL      R1,R7,R1
   \   00000018   0xF046 0x0608      ORR      R6,R6,#0x8
   \   0000001C   0x60EE             STR      R6,[R5, #+12]
     76            FTM_CnSC_REG(ftm,channel) |= FTM_CnSC_MSB_MASK;         // MSB=1£¬Ä£Ê½Ñ¡Ôñ±ßÑØ¶ÔÆë
   \   0000001E   0x68EE             LDR      R6,[R5, #+12]
   \   00000020   0xB2A4             UXTH     R4,R4
   \   00000022   0xF046 0x0620      ORR      R6,R6,#0x20
   \   00000026   0x60EE             STR      R6,[R5, #+12]
     77            
     78            FTM_OUTMASK_REG(ftm) &= ~((int32u_t)(1)<<channel);      // ½â³ýµ±Ç°Í¨µÀÆÁ±Î
   \   00000028   0x6E06             LDR      R6,[R0, #+96]
   \   0000002A   0xEA26 0x0101      BIC      R1,R6,R1
   \   0000002E   0x6601             STR      R1,[R0, #+96]
     79            FTM_CNTIN_REG(ftm) = st;                                // ÉèÖÃ¼ÆÊýÆðÊ¼Öµ
   \   00000030   0x64C2             STR      R2,[R0, #+76]
     80            FTM_MOD_REG(ftm) = end;                                 // ÉèÖÃ¼ÆÊýÖÕÖ¹Öµ
   \   00000032   0x6083             STR      R3,[R0, #+8]
     81            FTM_CnV_REG(ftm,channel) = dty;                         // ÉèÖÃµçÆ½·´×ªÖµ
   \   00000034   0x612C             STR      R4,[R5, #+16]
     82            FTM_CNT_REG(ftm) = 0;                                   // ÇåÁã¼ÆÊýÆ÷
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x6041             STR      R1,[R0, #+4]
     83          
     84            FTM_MODE_REG(ftm) &= ~FTM_MODE_FTMEN_MASK;              //FTMÊ¹ÄÜ
   \   0000003A   0x6D41             LDR      R1,[R0, #+84]
   \   0000003C   0x0849             LSRS     R1,R1,#+1
   \   0000003E   0x0049             LSLS     R1,R1,#+1
   \   00000040   0x6541             STR      R1,[R0, #+84]
     85          }
   \   00000042   0xBCF0             POP      {R4-R7}
   \   00000044   0x4770             BX       LR               ;; return
     86          
     87          /**********************************************************************************
     88          * º¯ÊýÃû³Æ£ºFTM_setPWMDty
     89          * Èë¿Ú²ÎÊý£ºftm     FTMÄ£¿é
     90                               FTM0
     91                               FTM1
     92                               FTM2
     93                      channel PWMÍ¨µÀºÅ
     94                      dty     Âö¿í(Õ¼¿Õ±È = (wid+1)/(end+1-st))
     95          * Ãè    Êö£ºÉèÖÃPWMÕ¼¿Õ±È
     96          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     97          void FTM_setPWMDty(FTM_MemMapPtr ftm, int8u_t channel, int16u_t dty)
     98          {
     99            FTM_CnV_REG(ftm,channel) = dty;                         // ÉèÖÃµçÆ½·´×ªÖµ  
   \                     FTM_setPWMDty:
   \   00000000   0xEB00 0x00C1      ADD      R0,R0,R1, LSL #+3
   \   00000004   0x6102             STR      R2,[R0, #+16]
    100          }
   \   00000006   0x4770             BX       LR               ;; return
    101          
    102          /**********************************************************************************
    103          * º¯ÊýÃû³Æ£ºFTM_initQUAD
    104          * Èë¿Ú²ÎÊý£ºftm    FTMÄ£¿é
    105                               FTM0
    106                               FTM1
    107                               FTM2
    108                      mod    Õý½»½âÂëÄ£Ê½
    109                              0 Phase A and phase B encoding mode.
    110                              1 Count and direction encoding mode.
    111                      st     ¼ÆÊýÆ÷¼ÆÊýÆðÊ¼Öµ
    112                      end    ¼ÆÊýÆ÷ÖÕÖ¹Öµ
    113          * Ãè    Êö£ºÕý½»½âÂë¹¦ÄÜÉèÖÃ
    114          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    115          void FTM_initQUAD(FTM_MemMapPtr ftm,int8u_t mod, int16s_t st, int16u_t end)
    116          {
   \                     FTM_initQUAD:
   \   00000000   0xB430             PUSH     {R4,R5}
    117            if(ftm == FTM1)
   \   00000002   0x....             LDR.N    R4,??DataTable1_2  ;; 0x40039000
   \   00000004   0x42A0             CMP      R0,R4
   \   00000006   0xD105             BNE.N    ??FTM_initQUAD_0
    118            {
    119              SIM_SCGC6 |= SIM_SCGC6_FTM1_MASK;                     // Ê¹ÄÜFTM1Ê±ÖÓ 
   \   00000008   0x....             LDR.N    R4,??DataTable1_1  ;; 0x40048030
   \   0000000A   0x68E5             LDR      R5,[R4, #+12]
   \   0000000C   0xF045 0x7500      ORR      R5,R5,#0x2000000
   \   00000010   0x60E5             STR      R5,[R4, #+12]
   \   00000012   0xE007             B.N      ??FTM_initQUAD_1
    120            }
    121            else if(ftm == FTM2)
   \                     ??FTM_initQUAD_0:
   \   00000014   0x....             LDR.N    R4,??DataTable1_3  ;; 0x400b8000
   \   00000016   0x42A0             CMP      R0,R4
   \   00000018   0xD104             BNE.N    ??FTM_initQUAD_1
    122            {
    123              SIM_SCGC3 |= SIM_SCGC3_FTM2_MASK;                     // Ê¹ÄÜFTM2Ê±ÖÓ 
   \   0000001A   0x....             LDR.N    R4,??DataTable1_1  ;; 0x40048030
   \   0000001C   0x6825             LDR      R5,[R4, #+0]
   \   0000001E   0xF045 0x7580      ORR      R5,R5,#0x1000000
   \   00000022   0x6025             STR      R5,[R4, #+0]
    124            }
    125            FTM_MODE_REG(ftm) |= FTM_MODE_WPDIS_MASK;               // ½ûÓÃÐ´±£»¤
   \                     ??FTM_initQUAD_1:
   \   00000024   0x6D44             LDR      R4,[R0, #+84]
    126            
    127            if(mod == 1)
   \   00000026   0x2901             CMP      R1,#+1
   \   00000028   0xF044 0x0404      ORR      R4,R4,#0x4
   \   0000002C   0x6544             STR      R4,[R0, #+84]
   \   0000002E   0xF8D0 0x1080      LDR      R1,[R0, #+128]
   \   00000032   0xBF0C             ITE      EQ 
   \   00000034   0xF041 0x0108      ORREQ    R1,R1,#0x8
   \   00000038   0xF021 0x0108      BICNE    R1,R1,#0x8
    128            {
    129              FTM_QDCTRL_REG(ftm) |= FTM_QDCTRL_QUADMODE_MASK;      // ABÏàÍ¬Ê±ÊäÈëÄ£Ê½
    130            }
    131            else
    132            {
    133              FTM_QDCTRL_REG(ftm) &= ~FTM_QDCTRL_QUADMODE_MASK;     // Âö³åºÍ·½ÏòÊäÈëÄ£Ê½
   \   0000003C   0xF8C0 0x1080      STR      R1,[R0, #+128]
    134            }
    135            FTM_CNTIN_REG(ftm) = st;                                // ÉèÖÃ¼ÆÊýÆðÊ¼Öµ
   \   00000040   0x64C2             STR      R2,[R0, #+76]
    136            FTM_MOD_REG(ftm) = end;                                 // ÉèÖÃ¼ÆÊýÖÕÖ¹Öµ
   \   00000042   0x6083             STR      R3,[R0, #+8]
    137            FTM_QDCTRL_REG(ftm) |= FTM_QDCTRL_QUADEN_MASK;          // ÆôÓÃFTMÕý½»½âÂëÄ£Ê½
   \   00000044   0xF8D0 0x1080      LDR      R1,[R0, #+128]
   \   00000048   0xF041 0x0101      ORR      R1,R1,#0x1
   \   0000004C   0xF8C0 0x1080      STR      R1,[R0, #+128]
    138            FTM_CNT_REG(ftm) = 0;                                   // ÇåÁã¼ÆÊýÆ÷
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x6041             STR      R1,[R0, #+4]
    139          }
   \   00000054   0xBC30             POP      {R4,R5}
   \   00000056   0x4770             BX       LR               ;; return
    140          
    141          /*******************************************************************************
    142          * º¯ÊýÃû³Æ£ºFTM_enableQUAD
    143          * Èë¿Ú²ÎÊý£ºftm     FTMÄ£¿é
    144                               FTM0
    145                               FTM1
    146                               FTM2
    147          * Ãè    Êö£ºÕý½»½âÂë¿ªÊ¼¹¤×÷
    148          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    149          void FTM_enableQUAD(FTM_MemMapPtr ftm)
    150          {
    151            FTM_MODE_REG(ftm) |= FTM_MODE_FTMEN_MASK;              // FTM2EN=1	
   \                     FTM_enableQUAD:
   \   00000000   0x6D41             LDR      R1,[R0, #+84]
   \   00000002   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000006   0x6541             STR      R1,[R0, #+84]
    152          }
   \   00000008   0x4770             BX       LR               ;; return
    153          
    154          /*******************************************************************************
    155          * º¯ÊýÃû³Æ£ºFTM_setPWMDty
    156          * Èë¿Ú²ÎÊý£ºftm    FTMÄ£¿é
    157                               FTM0
    158                               FTM1
    159                               FTM2
    160                      val    ¼ÆÊýÖµ
    161          * Ãè    Êö£º¶ÁÈ¡¼ÆÊýÖµ£¬²¢ÇåÁã¼ÆÊý¼Ä´æÆ÷
    162          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    163          void FTM_readQUADValue(FTM_MemMapPtr ftm, int16s_t * val)
    164          {
    165            *val = FTM_CNT_REG(ftm);                                 // ¶ÁÈ¡¼ÆÊýÖµ
   \                     FTM_readQUADValue:
   \   00000000   0x6842             LDR      R2,[R0, #+4]
   \   00000002   0x800A             STRH     R2,[R1, #+0]
    166            FTM_CNT_REG(ftm)=0;                                    // ¼ÆÊý¼Ä´æÆ÷ÇåÁã
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6041             STR      R1,[R0, #+4]
    167          }
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x40039000         DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x400B8000         DC32     0x400b8000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  FTM_enablePWMCh
        0  FTM_enableQUAD
        4  FTM_initPWM
        8  FTM_initQUAD
        0  FTM_readQUADValue
        0  FTM_setPWMDty


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
      70  FTM_enablePWMCh
      10  FTM_enableQUAD
     114  FTM_initPWM
      88  FTM_initQUAD
      10  FTM_readQUADValue
       8  FTM_setPWMDty

 
 316 bytes in section .text
 
 316 bytes of CODE memory

Errors: none
Warnings: none
