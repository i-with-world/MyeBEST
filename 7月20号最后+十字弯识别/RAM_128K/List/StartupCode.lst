###############################################################################
#                                                                             #
#                                                       30/Oct/2014  20:23:28 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\Library\CP #
#                    U\StartupCode.c                                          #
#    Command line =  E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\Library\CP #
#                    U\StartupCode.c -D IAR -lCN                              #
#                    E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\RAM_128K\L #
#                    ist\ -lB E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\R #
#                    AM_128K\List\ -o E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029 #
#                    µ÷ÊÔ°æ\RAM_128K\Obj\ --debug --endian=little             #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench 6.0                 #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\Library\CP #
#                    U\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\Libr #
#                    ary\Drivers\ADC\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1 #
#                    029µ÷ÊÔ°æ\Library\Drivers\FTM\ -I                        #
#                    E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\Library\Dr #
#                    ivers\GPIO\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ #
#                    ÊÔ°æ\Library\Drivers\PIT\ -I                             #
#                    E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\System_Ini #
#                    t\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\Sour #
#                    ce\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\OLE #
#                    D\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\SD_S #
#                    ystem\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\ #
#                    Simple_AD\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷Ê #
#                    Ô°æ\Delay\ -I E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷Ê #
#                    Ô°æ\Make_Desicion\ -Oh                                   #
#    List file    =  E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\RAM_128K\L #
#                    ist\StartupCode.lst                                      #
#    Object file  =  E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\RAM_128K\O #
#                    bj\StartupCode.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

E:\´´ÐÂ»î¶¯\ÖÇÄÜ³µ\µÚÊ®½ì\±¾³µ³ÌÐò\1029µ÷ÊÔ°æ\Library\CPU\StartupCode.c
      1          /*******************************************************************************
      2          * ÎÄ¼þÃû³Æ£ºStartupCode.c
      3          * Ãè    Êö£º¶¨ÒåKinetisµÄ»ù±¾µ×²ã²Ù×÷º¯Êý(ÖÐ¶ÏµÄÉèÖÃÓëCPUÄ£Ê½µÄÉèÖÃ)¡£
      4          
      5          * ×÷    Õß£ºËïÎÄ½¡£¨Ô­×÷Õß£©
      6          *           Íò±ù±ù£¨ÐÞ¸Ä£©
      7          * ÌØ±ðÃùÐ»£º¼Í³ÉÊ¦ÐÖ(²©¿Íhttp://blog.chinaaet.com/jihceng0622)
      8          * Ê±    ¼ä£º2012Äê5ÔÂ17ÈÕ
      9          *******************************************************************************/
     10          
     11          #include "KinetisConfig.h"
     12          
     13          #pragma section = ".data"                        // Êý¾ÝÇøÓò
     14          #pragma section = ".data_init"                   // ³õÊ¼»¯Êý¾ÝÇøÓò
     15          #pragma section = ".bss"                         // ·Ç³õÊ¼»¯Êý¾ÝÇøÓò
     16          #pragma section = "CodeRelocate"                 // ÖØ¶¨Î»´úÂëÇø
     17          #pragma section = "CodeRelocateRam"              // ÖØ¶¨Î»RAMÇø
     18          
     19          /* Íâ²¿º¯ÊýÉùÃ÷ */
     20          extern void main(void);                          // ÉùÃ÷ main º¯Êý
     21          #if EN_InitHook_Kinetis != 0
     22            extern void HOOK_BeforeClk_Kinetis(void);
     23            extern void HOOK_AfterClk_Kinetis(void);
     24          #endif
     25          /* ±äÁ¿¶¨Òå */
     26          #if EN_ResetType_Kinetis != 0
     27            KEEP_Data_Kinetis int16u_t ResetType_Kinetis;  // ¸´Î»ÀàÐÍ
     28          #endif
     29          
     30          
     31          #if EN_CoreClkOut_Kinetis != 0
     32          /******************************************************************************* 
     33          * º¯ÊýÃû³Æ£ºOnCoreClk_Out
     34          * Ãè    Êö£ºÓÃPTA6½ÅÊä³öÆµÂÊÎªCoreClockÆµÂÊ1/2µÄÊ±ÖÓÐÅºÅ
     35          *******************************************************************************/
     36          static void OnCoreClk_Out(void)
     37          {
     38              /* Set the trace clock to the core clock frequency */
     39              SIM_SOPT2 |= SIM_SOPT2_TRACECLKSEL_MASK;
     40              /* Enable the TRACE_CLKOUT pin function on PTA6 (alt7 function) */
     41              PORTA_PCR6 = (PORT_PCR_MUX(7));
     42          }
     43          #endif 
     44          
     45          #if EN_FlexClkOut_Kinetis != 0
     46          /******************************************************************************* 
     47          * º¯ÊýÃû³Æ£ºOnFlexClk_Out
     48          * Ãè    Êö£ºÓÃPTC3½ÅÊä³öFlexClock
     49          ********************************************************************************/
     50          static void OnFlexClk_Out(void)
     51          {
     52              /* Enable the clock to the FlexBus module */
     53              SIM_SCGC7 |= SIM_SCGC7_FLEXBUS_MASK;
     54              /* Enable the FB_CLKOUT function on PTC3 (alt5 function) */
     55              PORTC_PCR3 = (PORT_PCR_MUX(5));
     56          }
     57          #endif
     58          
     59          #if EN_ResetType_Kinetis != 0
     60          /*******************************************************************************
     61          * º¯ÊýÃû³Æ£ºReadResetType_Kinetis
     62          * Ãè    Êö£º¶ÁÈ¡¼Ä´æÆ÷ReadResetType_KinetisÒÔÅÐ¶¨ÏµÍ³µÄ¸´Î»ÀàÐÍ
     63          ********************************************************************************/
     64          static void ReadResetType_Kinetis(void)
     65          {
     66              ResetType_Kinetis = MC_SRSH;
     67              ResetType_Kinetis <<= 8;
     68              ResetType_Kinetis |= MC_SRSL;
     69          }
     70          #endif
     71          
     72          /******************************************************************************** 
     73          * º¯ÊýÃû³Æ£ºDisWatchDog_Kinetis
     74          * Ãè    Êö£º½ûÓÃ¿ªÃÅ¹·
     75          *******************************************************************************/
     76          static void DisWatchDog_Kinetis(void)
     77          {
     78              UNLOCK_WatchDog();                              // ½âËø¿ªÃÅ¹· 
     79              WDOG_STCTRLH &= ~WDOG_STCTRLH_WDOGEN_MASK;      // ½ûÓÃ¿ªÃÅ¹·
     80          }
     81          
     82          /******************************************************************************** 
     83          * º¯ÊýÃû³Æ£ºSetPLL_Kinetis
     84          * Ãè    Êö£ºÏµÍ³µÄËøÏà»·Éè¶¨£¬ÆäÍê³ÉµÄÖ÷Òª¹¤×÷Îª£ºÉè¶¨CoreClock¡¢BusClock¡¢FlexClock¡¢FlashClock
     85                      (ÉèÖÃµÄ¾ßÌåÆµÂÊÔÚKinetisConfig.hÖÐÅäÖÃ)
     86          *******************************************************************************/
     87          static void SetPLL_Kinetis(void)
     88          {
     89              int32u_t temp_reg;
     90              int8u_t  i;
     91              
     92              // First move to FBE mode
     93              // Enable external oscillator, RANGE=2, HGO=1, EREFS=1, LP=0, IRCS=0
     94              MCG_C2 = MCG_C2_RANGE(1) | MCG_C2_HGO_MASK | MCG_C2_EREFS_MASK;
     95          
     96              // after initialization of oscillator release latched state of oscillator and GPIO
     97              SIM_SCGC4 |= SIM_SCGC4_LLWU_MASK;
     98              LLWU_CS |= LLWU_CS_ACKISO_MASK;
     99            
    100              // Select external oscilator and Reference Divider and clear IREFS to start ext osc
    101              // CLKS=2, FRDIV=3, IREFS=0, IRCLKEN=0, IREFSTEN=0
    102              MCG_C1 = MCG_C1_CLKS(2) | MCG_C1_FRDIV(3);
    103          
    104              /* if we aren't using an osc input we don't need to wait for the osc to init */
    105              // wait for Reference clock Status bit to clear
    106              while (MCG_S & MCG_S_IREFST_MASK){};
    107              // Wait for clock status bits to show clock source is ext ref clk
    108              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2){}; 
    109          
    110              /* Éè¶¨PLLÊ±ÖÓ */
    111          #if CORE_CLK_Kinetis  <= 110
    112              MCG_C5 = MCG_C5_PRDIV(REF_CLK_Kinetis/2 - 1);     // PLLCLK == 2MHz
    113          #else
    114            #if   REF_CLK_Kinetis % 3 == 0
    115              MCG_C5 = MCG_C5_PRDIV(REF_CLK_Kinetis/3 - 1);     // PLLCLK == 3MHz 
    116            #elif REF_CLK_Kinetis % 4 == 0
    117              MCG_C5 = MCG_C5_PRDIV(REF_CLK_Kinetis/4 - 1);     // PLLCLK == 4MHz 
    118            #elif REF_CLK_Kinetis % 5 == 0
    119              MCG_C5 = MCG_C5_PRDIV(REF_CLK_Kinetis*2/5 - 1);   // PLLCLK == 2.5MHz 
    120            #endif
    121          #endif 
    122              
    123              // Ensure MCG_C6 is at the reset default of 0. LOLIE disabled,
    124              // PLL disabled, clk monitor disabled, PLL VCO divider is clear 
    125              MCG_C6 = 0x00;
    126          
    127              /* Éè¶¨¸÷Ê±ÖÓµÄ·ÖÆµÊý */
    128              // store present value of FMC_PFAPR
    129              temp_reg = FMC_PFAPR;
    130              // set M0PFD through M7PFD to 1 to disable prefetch
    131              FMC_PFAPR |= FMC_PFAPR_M7PFD_MASK | FMC_PFAPR_M6PFD_MASK | FMC_PFAPR_M5PFD_MASK
    132          		 | FMC_PFAPR_M4PFD_MASK | FMC_PFAPR_M3PFD_MASK | FMC_PFAPR_M2PFD_MASK
    133          		 | FMC_PFAPR_M1PFD_MASK | FMC_PFAPR_M0PFD_MASK;
    134              // set clock dividers to desired value  
    135              SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0)       
    136          	          | SIM_CLKDIV1_OUTDIV2(DIV_BusClk_Kinetis - 1) 
    137          		  | SIM_CLKDIV1_OUTDIV3(DIV_FlexClk_Kinetis - 1) 
    138          		  | SIM_CLKDIV1_OUTDIV4(DIV_FlashClk_Kinetis - 1);
    139              // wait for dividers to change
    140              for (i = 0 ; i < DIV_FlashClk_Kinetis ; i++) {}
    141              // re-store original value of FMC_PFAPR
    142              FMC_PFAPR = temp_reg;   
    143            
    144              /* ÉèÖÃ±¶ÆµÊý,±¶ÆµÊýÎªVDIV+24 */
    145          #if CORE_CLK_Kinetis  <= 110
    146              MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(CORE_CLK_Kinetis/2 - 24); 
    147          #else
    148            #if   REF_CLK_Kinetis % 3 == 0
    149              MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(CORE_CLK_Kinetis/3 - 24); 
    150            #elif REF_CLK_Kinetis % 4 == 0
    151              MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(CORE_CLK_Kinetis/4 - 24);
    152            #elif REF_CLK_Kinetis % 5 == 0
    153              MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(CORE_CLK_Kinetis*2/5 - 24); 
    154            #endif
    155          #endif
    156            
    157              while (!(MCG_S & MCG_S_PLLST_MASK)){};   // wait for PLL status bit to set
    158              while (!(MCG_S & MCG_S_LOCK_MASK)){};    // Wait for LOCK bit to set
    159          
    160              // Now running PBE Mode
    161              // Transition into PEE by setting CLKS to 0
    162              // CLKS=0, FRDIV=3, IREFS=0, IRCLKEN=0, IREFSTEN=0
    163              MCG_C1 &= ~MCG_C1_CLKS_MASK;
    164          
    165              // Wait for clock status bits to update
    166              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3){};
    167          } 
    168          
    169          /*******************************************************************************
    170          * º¯ÊýÃû³Æ£ºOnGPIOClk_Kinetis
    171          * Ãè    Êö£ºÊ¹ÄÜGPIOÊ±ÖÓ 
    172          *******************************************************************************/
    173          static void OnGPIOClk_Kinetis(void)
    174          {
    175              /* Ê¹ÄÜIO¿ÚÊ±ÖÓ */
    176              SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK | SIM_SCGC5_PORTB_MASK
    177          		 | SIM_SCGC5_PORTC_MASK | SIM_SCGC5_PORTD_MASK
    178          		 | SIM_SCGC5_PORTE_MASK ;
    179          }
    180          
    181          /******************************************************************************* 
    182          * º¯ÊýÃû³Æ£ºInit_Clock_Kinetis
    183          * Ãè    Êö£º³õÊ¼»¯ÏµÍ³Ê±ÖÓ,ÆäÍê³ÉµÄÖ÷Òª¹¤×÷ÓÐ£ºÉèÖÃÏµÍ³Ê±ÖÓ¡¢Ê¹ÄÜÍâ²¿»ù×¼Ê±ÖÓ¡¢½«ÏµÍ³Ê±ÖÓÍ¨¹ýIO¿ÚÊä³ö(¿ÉÑ¡) 
    184          *******************************************************************************/
    185          static void Init_Clock_Kinetis(void)
    186          {      
    187              SetPLL_Kinetis();                   // Éè¶¨ÏµÍ³Ê±ÖÓ 
    188              OSC_CR |= OSC_CR_ERCLKEN_MASK;      // Ê¹ÄÜÍâ²¿»ù×¼Ê±ÖÓ(ºÜ¶àÄ£¿éÐèÒªÓÃµ½¸ÃÊ±ÖÓ)
    189          	
    190          #if  EN_CoreClkOut_Kinetis != 0
    191              OnCoreClk_Out();                    // ÓÃPTA6Êä³öCoreClock/2
    192          #endif
    193          	
    194          #if EN_FlexClkOut_Kinetis != 0	
    195              OnFlexClk_Out();                    // ÓÃPTC3Êä³öFlexClock 
    196          #endif
    197          }
    198          
    199          /*******************************************************************************
    200          * º¯ÊýÃû³Æ£ºClearBss_Kinetis
    201          * Ãè    Êö£º½«"BSS"Êý¾ÝÇø³õÊ¼»¯Îª0
    202          *******************************************************************************/
    203          static void ClearBss_Kinetis(void)
    204          { 
    205              int32u_t n = 0;  
    206            
    207              /* Get the addresses for the .bss section (zero-initialized data) */
    208              int8u_t* __BSS_START = __section_begin(".bss");
    209              int8u_t* __BSS_END = __section_end(".bss");
    210              
    211              /* Clear the zero-initialized data section */
    212              n = __BSS_END - __BSS_START;
    213              while(n--)
    214                *__BSS_START++ = 0;   
    215          }
    216          
    217          /******************************************************************************* 
    218          * º¯ÊýÃû³Æ£ºRomToRam_Kinetis
    219          * Ãè    Êö£º½«²¿·ÖROMÖÐµÄÊý¾Ý×ªÒÆÖÁRAMÖÐ
    220          *******************************************************************************/
    221          static void RomToRam_Kinetis(void)
    222          {
    223              int32u_t n = 0;
    224          
    225              /* Get the addresses for the .data section (initialized data section) */
    226              int8u_t* __DATA_RAM = __section_begin(".data");
    227              int8u_t* __DATA_ROM = __section_begin(".data_init");
    228              int8u_t* __DATA_ROM_END = __section_end(".data_init");
    229              
    230              /* Copy initialized data from ROM to RAM */
    231              n = __DATA_ROM_END - __DATA_ROM;
    232              while(n--)
    233                *__DATA_RAM++ = *__DATA_ROM++;
    234          }
    235          
    236          /******************************************************************************* 
    237          * º¯ÊýÃû³Æ£ºCodeRelocate_Kinetis
    238          * Ãè    Êö£º¸´ÖÆÒÔ__ramfuncÉùÃ÷µÄ×Óº¯Êýµ½RAMÇø£¨CodeRelocateºÍCodeRelocateRamÕâÁ½¸ö¶¼¿ÉÒÔÔÚ.icfÎÄ¼þÀïÕÒµ½)
    239          *******************************************************************************/
    240          static void CodeRelocate_Kinetis(void)
    241          {
    242              int32u_t n = 0;
    243            
    244              /* Get addresses for any code sections that need to be copied from ROM to RAM.
    245               * The IAR tools have a predefined keyword that can be used to mark individual
    246               * functions for execution from RAM. Add "__ramfunc" before the return type in
    247               * the function prototype for any routines you need to execute from RAM instead 
    248               * of ROM. ex: __ramfunc void foo(void);
    249              */
    250              int8u_t* __CODE_RELOCATE_RAM = __section_begin("CodeRelocateRam");
    251              int8u_t* __CODE_RELOCATE = __section_begin("CodeRelocate");
    252              int8u_t* __CODE_RELOCATE_END = __section_end("CodeRelocate");
    253              
    254              /* Copy functions from ROM to RAM */
    255              n = __CODE_RELOCATE_END - __CODE_RELOCATE;
    256              while(n--)
    257                *__CODE_RELOCATE_RAM++ = *__CODE_RELOCATE++;    
    258          }
    259          
    260          /*******************************************************************************
    261          * º¯ÊýÃû³Æ£ºInit_VTOR_Kinetis
    262          * Ãè    Êö£º³õÊ¼»¯ÖÐ¶ÏÏòÁ¿±í,½«ÏµÍ³Ä¬ÈÏµÄÖÐ¶ÏÏòÁ¿±í¸ÄÎª×Ô¶¨ÒÔµÄÖÐ¶ÏÏòÁ¿±í 
    263          *******************************************************************************/
    264          static void Init_VTOR_Kinetis(void)
    265          {     
    266              /* Addresses for VECTOR_TABLE and VECTOR_RAM come from the linker file */  
    267              extern int32u_t __VECTOR_TABLE[];          // ÔÚ *.icf ÎÄ¼þÖÐ¶¨Òå
    268              extern int32u_t __VECTOR_RAM[];            // ÔÚ *.icf ÎÄ¼þÖÐ¶¨Òå
    269              
    270              int32u_t n = 0;
    271              int32u_t *ptr1 , *ptr2;
    272              
    273              n = 120;
    274              ptr1 = __VECTOR_RAM;
    275              ptr2 = __VECTOR_TABLE;
    276              if (__VECTOR_RAM != __VECTOR_TABLE)        // ½«ÖÐ¶ÏÏòÁ¿±í¸´ÖÆµ½ RAM ÖÐ
    277              {
    278                  while(n--)
    279                    *ptr1++ = *ptr2++;
    280              }
    281              /* Point the VTOR to the new copy of the vector table */
    282              WriteVTOR_Kinetis((int32u_t)__VECTOR_RAM);
    283          }
    284          
    285          /*******************************************************************************
    286          * º¯ÊýÃû³Æ£ºStartUp_Kinetis
    287          * Ãè    Êö£ºKinetisµÄÆô¶¯´úÂë
    288          *           ¼´ÏµÍ³ÉÏµçÊ±´¦ÀíÆ÷Ö´ÐÐµÄµÚÒ»¶Î´úÂë,¸ºÔðÍê³ÉARMËù±ØÐëµÄ³õÊ¼»¯²Ù×÷,²¢Ìø×ªµ½ÓÃ»§µÄÈë¿Ú³ÌÐò
    289          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    290          void StartUp_Kinetis(void)
    291          {
   \                     StartUp_Kinetis:
   \   00000000   0xB510             PUSH     {R4,LR}
    292              DisableInterrupts();                  // ¹ØÖÐ¶Ï    
   \   00000002   0xB672             CPSID i          
    293              DisWatchDog_Kinetis();                // ½ûÓÃ¿´ÃÅ¹·  
   \   00000004   0x483C             LDR.N    R0,??StartUp_Kinetis_0  ;; 0x40052000
   \   00000006   0xF24C 0x5120      MOVW     R1,#+50464
   \   0000000A   0x81C1             STRH     R1,[R0, #+14]
   \   0000000C   0xF64D 0x1128      MOVW     R1,#+55592
   \   00000010   0x81C1             STRH     R1,[R0, #+14]
   \   00000012   0x8801             LDRH     R1,[R0, #+0]
   \   00000014   0xF64F 0x72FE      MOVW     R2,#+65534
   \   00000018   0x4011             ANDS     R1,R2,R1
   \   0000001A   0x8001             STRH     R1,[R0, #+0]
    294              OnGPIOClk_Kinetis();                  // ¿ªÆôGPIOÊ±ÖÓ 
   \   0000001C   0x4837             LDR.N    R0,??StartUp_Kinetis_0+0x4  ;; 0x40048034
    295              
    296          #if EN_InitHook_Kinetis != 0      
    297              HOOK_BeforeClk_Kinetis();             // Ö´ÐÐÓÃ»§¶¨ÒåµÄ³õÊ¼»¯½Ó¿Ú 
    298          #endif
    299          	
    300              Init_Clock_Kinetis();                 // ³õÊ¼»¯ÏµÍ³Ê±ÖÓ 
   \   0000001E   0x221C             MOVS     R2,#+28
   \   00000020   0x6841             LDR      R1,[R0, #+4]
   \   00000022   0xF441 0x5178      ORR      R1,R1,#0x3E00
   \   00000026   0x6041             STR      R1,[R0, #+4]
   \   00000028   0x4935             LDR.N    R1,??StartUp_Kinetis_0+0x8  ;; 0x40064000
   \   0000002A   0x704A             STRB     R2,[R1, #+1]
   \   0000002C   0x6802             LDR      R2,[R0, #+0]
   \   0000002E   0xF042 0x5280      ORR      R2,R2,#0x10000000
   \   00000032   0x6002             STR      R2,[R0, #+0]
   \   00000034   0x4A33             LDR.N    R2,??StartUp_Kinetis_0+0xC  ;; 0x4007c008
   \   00000036   0x7813             LDRB     R3,[R2, #+0]
   \   00000038   0xF043 0x0380      ORR      R3,R3,#0x80
   \   0000003C   0x7013             STRB     R3,[R2, #+0]
   \   0000003E   0x2298             MOVS     R2,#+152
   \   00000040   0x700A             STRB     R2,[R1, #+0]
   \                     ??StartUp_Kinetis_1:
   \   00000042   0x798A             LDRB     R2,[R1, #+6]
   \   00000044   0x06D2             LSLS     R2,R2,#+27
   \   00000046   0xD4FC             BMI.N    ??StartUp_Kinetis_1
   \                     ??StartUp_Kinetis_2:
   \   00000048   0x798A             LDRB     R2,[R1, #+6]
   \   0000004A   0xF3C2 0x0281      UBFX     R2,R2,#+2,#+2
   \   0000004E   0x2A02             CMP      R2,#+2
   \   00000050   0xD1FA             BNE.N    ??StartUp_Kinetis_2
   \   00000052   0x2207             MOVS     R2,#+7
   \   00000054   0x710A             STRB     R2,[R1, #+4]
   \   00000056   0x2200             MOVS     R2,#+0
   \   00000058   0x714A             STRB     R2,[R1, #+5]
   \   0000005A   0x4A2B             LDR.N    R2,??StartUp_Kinetis_0+0x10  ;; 0x4001f000
   \   0000005C   0x6813             LDR      R3,[R2, #+0]
   \   0000005E   0x6814             LDR      R4,[R2, #+0]
   \   00000060   0xF444 0x047F      ORR      R4,R4,#0xFF0000
   \   00000064   0x6014             STR      R4,[R2, #+0]
   \   00000066   0x4C29             LDR.N    R4,??StartUp_Kinetis_0+0x14  ;; 0x1130000
   \   00000068   0x6104             STR      R4,[R0, #+16]
   \   0000006A   0x6013             STR      R3,[R2, #+0]
   \   0000006C   0x2058             MOVS     R0,#+88
   \   0000006E   0x7148             STRB     R0,[R1, #+5]
   \                     ??StartUp_Kinetis_3:
   \   00000070   0x7988             LDRB     R0,[R1, #+6]
   \   00000072   0x0680             LSLS     R0,R0,#+26
   \   00000074   0xD5FC             BPL.N    ??StartUp_Kinetis_3
   \                     ??StartUp_Kinetis_4:
   \   00000076   0x7988             LDRB     R0,[R1, #+6]
   \   00000078   0x0640             LSLS     R0,R0,#+25
   \   0000007A   0xD5FC             BPL.N    ??StartUp_Kinetis_4
   \   0000007C   0x7808             LDRB     R0,[R1, #+0]
   \   0000007E   0xF000 0x003F      AND      R0,R0,#0x3F
   \   00000082   0x7008             STRB     R0,[R1, #+0]
   \                     ??StartUp_Kinetis_5:
   \   00000084   0x7988             LDRB     R0,[R1, #+6]
   \   00000086   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   0000008A   0x2803             CMP      R0,#+3
   \   0000008C   0xD1FA             BNE.N    ??StartUp_Kinetis_5
   \   0000008E   0x4820             LDR.N    R0,??StartUp_Kinetis_0+0x18  ;; 0x40065000
    301          	
    302          #if EN_InitHook_Kinetis != 0
    303              HOOK_AfterClk_Kinetis();              // Ö´ÐÐÓÃ»§¶¨ÒåµÄ³õÊ¼»¯½Ó¿Ú 
    304          #endif	
    305            
    306          #if EN_ResetType_Kinetis != 0  
    307              ReadResetType_Kinetis();              // ¶ÁÈ¡¸´Î»ÀàÐÍ 
    308          #endif	
    309            
    310              RomToRam_Kinetis();                   // ½«²¿·ÖROMÖÐµÄÊý¾Ý×ªÒÆµ½RAMÖÐ
   \   00000090   0x4A20             LDR.N    R2,??StartUp_Kinetis_0+0x1C
   \   00000092   0x7801             LDRB     R1,[R0, #+0]
   \   00000094   0xF041 0x0180      ORR      R1,R1,#0x80
   \   00000098   0x7001             STRB     R1,[R0, #+0]
   \   0000009A   0x491F             LDR.N    R1,??StartUp_Kinetis_0+0x20
   \   0000009C   0x481F             LDR.N    R0,??StartUp_Kinetis_0+0x24
   \   0000009E   0x1A52             SUBS     R2,R2,R1
   \   000000A0   0xD005             BEQ.N    ??StartUp_Kinetis_6
   \                     ??StartUp_Kinetis_7:
   \   000000A2   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   000000A6   0x1E52             SUBS     R2,R2,#+1
   \   000000A8   0xF800 0x3B01      STRB     R3,[R0], #+1
   \   000000AC   0xD1F9             BNE.N    ??StartUp_Kinetis_7
    311              CodeRelocate_Kinetis();               // ¸´ÖÆÒÔ__ramfuncÉùÃ÷µÄ×Óº¯Êýµ½RAMÇø
   \                     ??StartUp_Kinetis_6:
   \   000000AE   0x491C             LDR.N    R1,??StartUp_Kinetis_0+0x28
   \   000000B0   0x4A1C             LDR.N    R2,??StartUp_Kinetis_0+0x2C
   \   000000B2   0x481D             LDR.N    R0,??StartUp_Kinetis_0+0x30
   \   000000B4   0x1A52             SUBS     R2,R2,R1
   \   000000B6   0xD005             BEQ.N    ??StartUp_Kinetis_8
   \                     ??StartUp_Kinetis_9:
   \   000000B8   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   000000BC   0x1E52             SUBS     R2,R2,#+1
   \   000000BE   0xF800 0x3B01      STRB     R3,[R0], #+1
   \   000000C2   0xD1F9             BNE.N    ??StartUp_Kinetis_9
    312              ClearBss_Kinetis();                   // ÇåÁãBSSÇøÓò 
   \                     ??StartUp_Kinetis_8:
   \   000000C4   0x4819             LDR.N    R0,??StartUp_Kinetis_0+0x34
   \   000000C6   0x491A             LDR.N    R1,??StartUp_Kinetis_0+0x38
   \   000000C8   0x1A09             SUBS     R1,R1,R0
   \   000000CA   0xD005             BEQ.N    ??StartUp_Kinetis_10
   \                     ??StartUp_Kinetis_11:
   \   000000CC   0x1E49             SUBS     R1,R1,#+1
   \   000000CE   0x2200             MOVS     R2,#+0
   \   000000D0   0xF800 0x2B01      STRB     R2,[R0], #+1
   \   000000D4   0x2900             CMP      R1,#+0
   \   000000D6   0xD1F9             BNE.N    ??StartUp_Kinetis_11
    313              Init_VTOR_Kinetis();                  // ³õÊ¼»¯ÖÐ¶ÏÏòÁ¿±í     
   \                     ??StartUp_Kinetis_10:
   \   000000D8   0x4916             LDR.N    R1,??StartUp_Kinetis_0+0x3C
   \   000000DA   0x4C17             LDR.N    R4,??StartUp_Kinetis_0+0x40
   \   000000DC   0x428C             CMP      R4,R1
   \   000000DE   0xD004             BEQ.N    ??StartUp_Kinetis_12
   \   000000E0   0xF44F 0x72F0      MOV      R2,#+480
   \   000000E4   0x4620             MOV      R0,R4
   \   000000E6   0x.... 0x....      BL       __aeabi_memcpy4
   \                     ??StartUp_Kinetis_12:
   \   000000EA   0x4620             MOV      R0,R4
   \   000000EC   0x.... 0x....      BL       WriteVTOR_Kinetis
    314          		
    315              main();                               // Ìø×ªµ½mainº¯Êý 
   \   000000F0   0x.... 0x....      BL       main
    316              while(1);                             // ³ÌÐò²»»áÖ´ÐÐµ½ÕâÀï
   \                     ??StartUp_Kinetis_13:
   \   000000F4   0xE7FE             B.N      ??StartUp_Kinetis_13
   \   000000F6   0xBF00             Nop      
   \                     ??StartUp_Kinetis_0:
   \   000000F8   0x40052000         DC32     0x40052000
   \   000000FC   0x40048034         DC32     0x40048034
   \   00000100   0x40064000         DC32     0x40064000
   \   00000104   0x4007C008         DC32     0x4007c008
   \   00000108   0x4001F000         DC32     0x4001f000
   \   0000010C   0x01130000         DC32     0x1130000
   \   00000110   0x40065000         DC32     0x40065000
   \   00000114   0x........         DC32     SFE(`.data_init`)
   \   00000118   0x........         DC32     SFB(`.data_init`)
   \   0000011C   0x........         DC32     SFB(`.data`)
   \   00000120   0x........         DC32     SFB(CodeRelocate)
   \   00000124   0x........         DC32     SFE(CodeRelocate)
   \   00000128   0x........         DC32     SFB(CodeRelocateRam)
   \   0000012C   0x........         DC32     SFB(`.bss`)
   \   00000130   0x........         DC32     SFE(`.bss`)
   \   00000134   0x........         DC32     __VECTOR_TABLE
   \   00000138   0x........         DC32     __VECTOR_RAM
    317          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  StartUp_Kinetis
             8 -> WriteVTOR_Kinetis
             8 -> __aeabi_memcpy4
             8 -> main


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     316  StartUp_Kinetis

 
 316 bytes in section .text
 
 316 bytes of CODE memory

Errors: none
Warnings: none
