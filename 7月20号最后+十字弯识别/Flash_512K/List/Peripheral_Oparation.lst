###############################################################################
#                                                                             #
#                                                       22/Jul/2015  10:59:29 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Peripheral_ #
#                    Oparation\Peripheral_Oparation.c                         #
#    Command line =  C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Peripheral_ #
#                    Oparation\Peripheral_Oparation.c -D IAR -lCN             #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Flash_512K\ #
#                    List\ -lB C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\F #
#                    lash_512K\List\ -o C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®× #
#                    ÖÍäÊ¶±ð\Flash_512K\Obj\ --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --char_is_signed --fpu=None --dlib_config             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Library\CPU #
#                    \ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Librar #
#                    y\Drivers\ADC\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×Ö #
#                    ÍäÊ¶±ð\Library\Drivers\FTM\ -I                           #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Library\Dri #
#                    vers\GPIO\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶ #
#                    ±ð\Library\Drivers\PIT\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ #
#                    ×îºó+Ê®×ÖÍäÊ¶±ð\Library\Drivers\I2C\ -I                  #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Library\Dri #
#                    vers\UART\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶ #
#                    ±ð\Library\Drivers\FTFL\ -I                              #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\MyFunction\ #
#                     -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\SD_Syst #
#                    em\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Dela #
#                    y\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Syste #
#                    m_Init\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\ #
#                    OLED\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\ZL #
#                    G7290\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\S #
#                    imple_AD\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶± #
#                    ð\Make_Desicion\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê® #
#                    ×ÖÍäÊ¶±ð\Make_Desicion\Judge_Way\ -I                     #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Make_Desici #
#                    on\Speed_Control\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê #
#                    ®×ÖÍäÊ¶±ð\Source\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê #
#                    ®×ÖÍäÊ¶±ð\Peripheral_Oparation\ -I                       #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Balance_con #
#                    trol\ -Ol                                                #
#    List file    =  C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Flash_512K\ #
#                    List\Peripheral_Oparation.lst                            #
#    Object file  =  C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Flash_512K\ #
#                    Obj\Peripheral_Oparation.o                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Peripheral_Oparation\Peripheral_Oparation.c
      1          #include "AllHeaders.h"

   \                                 In section .bss, align 1
      2          int8u_t OLEDrefresh_cnt;
   \                     OLEDrefresh_cnt:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      3          int8u_t SendData_cnt;
   \                     SendData_cnt:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      4          int8u_t check_flag;
   \                     check_flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      5          int8u_t Rec_cnt;
   \                     Rec_cnt:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
      6          char Rec_buf[10];
   \                     Rec_buf:
   \   00000000                      DS8 12
      7          
      8          /**********************************************************************************
      9           º¯ÊýÃû³Æ£ºparam1_pack()
     10           ¹¦ÄÜ£º½«Ö¸¶¨Êý¾Ý´ò°ü
     11          Èë¿Ú²ÎÊý£º	param:Ä¿±êÊý¾Ý
     12           	        data_arr£º´ò°üºóµØÖ·
     13          pack_type:0xc1,0xc2,0xc3£¬0xc4
     14           ·µ»Ø²ÎÊý£ºÎÞ
     15          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     16          void Param_Pack(int8u_t param, char *data_arr, int8u_t pack_type)
     17          {
     18          	*data_arr=0xA5;
   \                     Param_Pack:
   \   00000000   0xF07F 0x035A      MVNS     R3,#+90
   \   00000004   0x700B             STRB     R3,[R1, #+0]
     19          	data_arr++;
   \   00000006   0x1C49             ADDS     R1,R1,#+1
     20          	*data_arr=0x5A;
   \   00000008   0x235A             MOVS     R3,#+90
   \   0000000A   0x700B             STRB     R3,[R1, #+0]
     21          	data_arr++;
   \   0000000C   0x1C49             ADDS     R1,R1,#+1
     22          	*data_arr=0x06;
   \   0000000E   0x2306             MOVS     R3,#+6
   \   00000010   0x700B             STRB     R3,[R1, #+0]
     23          	data_arr++;
   \   00000012   0x1C49             ADDS     R1,R1,#+1
     24          	*data_arr=pack_type;
   \   00000014   0x700A             STRB     R2,[R1, #+0]
     25          	data_arr++;
   \   00000016   0x1C49             ADDS     R1,R1,#+1
     26          	*data_arr=0;
   \   00000018   0x2300             MOVS     R3,#+0
   \   0000001A   0x700B             STRB     R3,[R1, #+0]
     27          	data_arr++;
   \   0000001C   0x1C49             ADDS     R1,R1,#+1
     28          	*data_arr=param;
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
     29          	data_arr++;
   \   00000020   0x1C49             ADDS     R1,R1,#+1
     30          	*data_arr=0x06+pack_type+param;
   \   00000022   0x1880             ADDS     R0,R0,R2
   \   00000024   0x1D80             ADDS     R0,R0,#+6
   \   00000026   0x7008             STRB     R0,[R1, #+0]
     31          	data_arr++;
   \   00000028   0x1C49             ADDS     R1,R1,#+1
     32          	*data_arr=0xAA;
   \   0000002A   0xF07F 0x0055      MVNS     R0,#+85
   \   0000002E   0x7008             STRB     R0,[R1, #+0]
     33          }
   \   00000030   0x4770             BX       LR               ;; return
     34          

   \                                 In section .text, align 2, keep-with-next
     35          void Send_To_PC(int8u_t sendparam, int8u_t pack_type)
     36          {
   \                     Send_To_PC:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
     37            char Param_Arr[8];
     38            
     39            Param_Pack(sendparam,Param_Arr,pack_type);        //ÏÈ´ò°üÊý¾ÝÔÙ·¢ËÍ
   \   00000004   0x000A             MOVS     R2,R1
   \   00000006   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000008   0xA900             ADD      R1,SP,#+0
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      BL       Param_Pack
     40            UART_SendArr(UART0_BASE_PTR, Param_Arr,8);
   \   00000010   0x2208             MOVS     R2,#+8
   \   00000012   0xA900             ADD      R1,SP,#+0
   \   00000014   0x....             LDR.N    R0,??DataTable3  ;; 0x4006a000
   \   00000016   0x.... 0x....      BL       UART_SendArr
     41          }
   \   0000001A   0xBD07             POP      {R0-R2,PC}       ;; return
     42          

   \                                 In section .text, align 2, keep-with-next
     43          void Send_Data()
     44          {
   \                     Send_Data:
   \   00000000   0xB580             PUSH     {R7,LR}
     45            Send_To_PC(NowSpeed,PACK_TYPE1);
   \   00000002   0x21C1             MOVS     R1,#+193
   \   00000004   0x....             LDR.N    R0,??DataTable3_1
   \   00000006   0x8800             LDRH     R0,[R0, #+0]
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x.... 0x....      BL       Send_To_PC
     46            
     47            Send_To_PC(PI_Out,PACK_TYPE2);
   \   0000000E   0x21C2             MOVS     R1,#+194
   \   00000010   0x....             LDR.N    R0,??DataTable3_2
   \   00000012   0x8800             LDRH     R0,[R0, #+0]
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x.... 0x....      BL       Send_To_PC
     48            
     49            Send_To_PC(nSpeed,PACK_TYPE3);
   \   0000001A   0x21C3             MOVS     R1,#+195
   \   0000001C   0x....             LDR.N    R0,??DataTable3_3
   \   0000001E   0x8800             LDRH     R0,[R0, #+0]
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x.... 0x....      BL       Send_To_PC
     50            
     51            Send_To_PC(nSpeed - PI_Out,PACK_TYPE4);
   \   00000026   0x21C4             MOVS     R1,#+196
   \   00000028   0x....             LDR.N    R0,??DataTable3_3
   \   0000002A   0x8800             LDRH     R0,[R0, #+0]
   \   0000002C   0x....             LDR.N    R2,??DataTable3_2
   \   0000002E   0x8812             LDRH     R2,[R2, #+0]
   \   00000030   0x1A80             SUBS     R0,R0,R2
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x.... 0x....      BL       Send_To_PC
     52            
     53            //Send_To_PC(nSpeed,PACK_TYPE5);
     54            
     55            //Send_To_PC(NowSpeed,PACK_TYPE6);
     56            
     57          }
   \   00000038   0xBD01             POP      {R0,PC}          ;; return
     58          
     59          

   \                                 In section .text, align 2, keep-with-next
     60          void deal_data(int8u_t rec_data)
     61          {
     62              switch(rec_data)
   \                     deal_data:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x28B1             CMP      R0,#+177
   \   00000004   0xD007             BEQ.N    ??deal_data_0
   \   00000006   0xD30A             BCC.N    ??deal_data_1
   \   00000008   0x28B3             CMP      R0,#+179
   \   0000000A   0xD006             BEQ.N    ??deal_data_2
   \   0000000C   0xD304             BCC.N    ??deal_data_3
   \   0000000E   0x28B5             CMP      R0,#+181
   \   00000010   0xD005             BEQ.N    ??deal_data_4
   \   00000012   0xD303             BCC.N    ??deal_data_5
   \   00000014   0xE003             B.N      ??deal_data_1
     63              {
     64              case 0xB1:
     65              {
     66              }break;
   \                     ??deal_data_0:
   \   00000016   0xE002             B.N      ??deal_data_1
     67              case 0xB2:
     68              {
     69              }break;
   \                     ??deal_data_3:
   \   00000018   0xE001             B.N      ??deal_data_1
     70              case 0xB3:
     71              {
     72              }break;
   \                     ??deal_data_2:
   \   0000001A   0xE000             B.N      ??deal_data_1
     73              case 0xB4:
     74              {
     75              }break;
   \                     ??deal_data_5:
   \   0000001C   0xE7FF             B.N      ??deal_data_1
     76              case 0xB5:
     77              {
     78              }break;
     79              default:
     80              {
     81                
     82              }
     83              }
     84          }
   \                     ??deal_data_4:
   \                     ??deal_data_1:
   \   0000001E   0x4770             BX       LR               ;; return
     85          

   \                                 In section .text, align 2, keep-with-next
     86          void Peripheral_Oparation(void)
     87          {
   \                     Peripheral_Oparation:
   \   00000000   0xB580             PUSH     {R7,LR}
     88          #if OLED_EN
     89            OLEDrefresh_cnt++;
   \   00000002   0x....             LDR.N    R0,??DataTable3_4
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x1C40             ADDS     R0,R0,#+1
   \   00000008   0x....             LDR.N    R1,??DataTable3_4
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
     90            if(OLEDrefresh_cnt>10)
   \   0000000C   0x....             LDR.N    R0,??DataTable3_4
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x280B             CMP      R0,#+11
   \   00000012   0xD304             BCC.N    ??Peripheral_Oparation_0
     91            {
     92              OLEDrefresh_cnt=0;
   \   00000014   0x....             LDR.N    R0,??DataTable3_4
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x7001             STRB     R1,[R0, #+0]
     93              write_OLED();
   \   0000001A   0x.... 0x....      BL       write_OLED
     94            }
     95          #endif
     96          #if (FUNC_MUSK==0)
     97            SDerite_cnt++;
     98            write_SD();
     99            //Ð´¿¨°üÊýµ½´ïÉÏÏÞÊ±Í£³µ
    100            if(SDerite_cnt>500)
    101            {
    102              SDerite_cnt=0;
    103              
    104              if(sd_yes==1)
    105              {
    106                sd_yes = 0;
    107                write_stop(); 
    108          //    FTM_setPWMDty(FTM0, 0, 0);
    109          //    FTM_setPWMDty(FTM0, 2, 0);
    110          //    FTM_setPWMDty(FTM0, 4, 0);
    111          //    FTM_setPWMDty(FTM0, 6, 0);
    112          //
    113                ONBUZZER(); 
    114                ObjectSpeed = 0;
    115                for(;;)
    116                {}
    117              }
    118            }
    119          #endif
    120          #if BLOOTH_EN
    121            SendData_cnt++;
    122            if(SendData_cnt>=50)
    123            {
    124              SendData_cnt=0;
    125              Send_Data();
    126            }
    127          #endif
    128          }
   \                     ??Peripheral_Oparation_0:
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
    129          

   \                                 In section .text, align 2, keep-with-next
    130          void Deal_Switch(void)
    131          {
   \                     Deal_Switch:
   \   00000000   0xB510             PUSH     {R4,LR}
    132            int8u_t Switch_Num;
    133            
    134            Switch_Num=0;
   \   00000002   0x2400             MOVS     R4,#+0
    135            Switch_Num+= (GPIO_get(PORTA, 17)<<3);
   \   00000004   0x2111             MOVS     R1,#+17
   \   00000006   0x....             LDR.N    R0,??DataTable3_5  ;; 0x400ff000
   \   00000008   0x.... 0x....      BL       GPIO_get
   \   0000000C   0x00C0             LSLS     R0,R0,#+3
   \   0000000E   0xFA50 0xF484      UXTAB    R4,R0,R4
    136            Switch_Num+= (GPIO_get(PORTB, 1)<<2);
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x....             LDR.N    R0,??DataTable3_6  ;; 0x400ff040
   \   00000016   0x.... 0x....      BL       GPIO_get
   \   0000001A   0x0080             LSLS     R0,R0,#+2
   \   0000001C   0xFA50 0xF484      UXTAB    R4,R0,R4
    137            Switch_Num+= (GPIO_get(PORTB, 3)<<1);
   \   00000020   0x2103             MOVS     R1,#+3
   \   00000022   0x....             LDR.N    R0,??DataTable3_6  ;; 0x400ff040
   \   00000024   0x.... 0x....      BL       GPIO_get
   \   00000028   0x0040             LSLS     R0,R0,#+1
   \   0000002A   0xFA50 0xF484      UXTAB    R4,R0,R4
    138            Switch_Num+= GPIO_get(PORTB, 10);
   \   0000002E   0x210A             MOVS     R1,#+10
   \   00000030   0x....             LDR.N    R0,??DataTable3_6  ;; 0x400ff040
   \   00000032   0x.... 0x....      BL       GPIO_get
   \   00000036   0x1904             ADDS     R4,R0,R4
    139            
    140            switch(Switch_Num)
   \   00000038   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003A   0x2C00             CMP      R4,#+0
   \   0000003C   0xD005             BEQ.N    ??Deal_Switch_0
   \   0000003E   0x2C02             CMP      R4,#+2
   \   00000040   0xD00B             BEQ.N    ??Deal_Switch_1
   \   00000042   0xD306             BCC.N    ??Deal_Switch_2
   \   00000044   0x2C03             CMP      R4,#+3
   \   00000046   0xD00C             BEQ.N    ??Deal_Switch_3
   \   00000048   0xE00F             B.N      ??Deal_Switch_4
    141            {
    142            case 0:
    143              {
    144                Forward_Dty=100;
   \                     ??Deal_Switch_0:
   \   0000004A   0x....             LDR.N    R0,??DataTable3_7
   \   0000004C   0x2164             MOVS     R1,#+100
   \   0000004E   0x8001             STRH     R1,[R0, #+0]
    145              }break;
   \   00000050   0xE00E             B.N      ??Deal_Switch_5
    146            case 1:
    147              {
    148                Forward_Dty=90;
   \                     ??Deal_Switch_2:
   \   00000052   0x....             LDR.N    R0,??DataTable3_7
   \   00000054   0x215A             MOVS     R1,#+90
   \   00000056   0x8001             STRH     R1,[R0, #+0]
    149              }break;
   \   00000058   0xE00A             B.N      ??Deal_Switch_5
    150            case 2:
    151              {
    152                Forward_Dty=80;
   \                     ??Deal_Switch_1:
   \   0000005A   0x....             LDR.N    R0,??DataTable3_7
   \   0000005C   0x2150             MOVS     R1,#+80
   \   0000005E   0x8001             STRH     R1,[R0, #+0]
    153              }break;
   \   00000060   0xE006             B.N      ??Deal_Switch_5
    154            case 3:
    155              {
    156                Forward_Dty=70;
   \                     ??Deal_Switch_3:
   \   00000062   0x....             LDR.N    R0,??DataTable3_7
   \   00000064   0x2146             MOVS     R1,#+70
   \   00000066   0x8001             STRH     R1,[R0, #+0]
    157              }break;
   \   00000068   0xE002             B.N      ??Deal_Switch_5
    158            default:
    159              {
    160                Forward_Dty=80;
   \                     ??Deal_Switch_4:
   \   0000006A   0x....             LDR.N    R0,??DataTable3_7
   \   0000006C   0x2150             MOVS     R1,#+80
   \   0000006E   0x8001             STRH     R1,[R0, #+0]
    161              }
    162            }
    163          }
   \                     ??Deal_Switch_5:
   \   00000070   0xBD10             POP      {R4,PC}          ;; return
    164          

   \                                 In section .text, align 2, keep-with-next
    165          void UART0_ISR(void)
    166          {
    167          #if BLOOTH_EN
    168            char Rec_buf_check;
    169             
    170             Rec_buf_check=UART_Getchar(UART0_BASE_PTR);
    171             if(Rec_buf_check==0xA5)
    172             {
    173               check_flag=1;
    174             }
    175             if(Rec_buf_check==0xAA)
    176             {
    177               check_flag=0;
    178             }
    179             if(check_flag==1)
    180             {
    181               Rec_buf[Rec_cnt]=Rec_buf_check;
    182               Rec_cnt++;
    183               if(Rec_cnt>=9)
    184                Rec_cnt=0;
    185             }
    186             if(check_flag==0)
    187             {
    188               Rec_cnt=0;
    189               deal_data(Rec_buf[3]);
    190             }
    191          #endif
    192            
    193          }
   \                     UART0_ISR:
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x4006A000         DC32     0x4006a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     NowSpeed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     PI_Out

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     nSpeed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     OLEDrefresh_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x400FF040         DC32     0x400ff040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     Forward_Dty

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  Deal_Switch
              8 -> GPIO_get
        0  Param_Pack
        8  Peripheral_Oparation
              8 -> write_OLED
        8  Send_Data
              8 -> Send_To_PC
       16  Send_To_PC
             16 -> Param_Pack
             16 -> UART_SendArr
        0  UART0_ISR
        0  deal_data


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
     114  Deal_Switch
       1  OLEDrefresh_cnt
      50  Param_Pack
      32  Peripheral_Oparation
      12  Rec_buf
       1  Rec_cnt
       1  SendData_cnt
      58  Send_Data
      28  Send_To_PC
       2  UART0_ISR
       1  check_flag
      32  deal_data

 
  16 bytes in section .bss
 348 bytes in section .text
 
 348 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none
