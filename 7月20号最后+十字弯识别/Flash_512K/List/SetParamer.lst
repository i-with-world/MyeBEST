###############################################################################
#                                                                             #
#                                                       22/Jul/2015  10:59:29 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Make_Desici #
#                    on\SetParamer.c                                          #
#    Command line =  C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Make_Desici #
#                    on\SetParamer.c -D IAR -lCN                              #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Flash_512K\ #
#                    List\ -lB C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\F #
#                    lash_512K\List\ -o C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®× #
#                    ÖÍäÊ¶±ð\Flash_512K\Obj\ --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --char_is_signed --fpu=None --dlib_config             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Library\CPU #
#                    \ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Librar #
#                    y\Drivers\ADC\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×Ö #
#                    ÍäÊ¶±ð\Library\Drivers\FTM\ -I                           #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Library\Dri #
#                    vers\GPIO\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶ #
#                    ±ð\Library\Drivers\PIT\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ #
#                    ×îºó+Ê®×ÖÍäÊ¶±ð\Library\Drivers\I2C\ -I                  #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Library\Dri #
#                    vers\UART\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶ #
#                    ±ð\Library\Drivers\FTFL\ -I                              #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\MyFunction\ #
#                     -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\SD_Syst #
#                    em\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Dela #
#                    y\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Syste #
#                    m_Init\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\ #
#                    OLED\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\ZL #
#                    G7290\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\S #
#                    imple_AD\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶± #
#                    ð\Make_Desicion\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê® #
#                    ×ÖÍäÊ¶±ð\Make_Desicion\Judge_Way\ -I                     #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Make_Desici #
#                    on\Speed_Control\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê #
#                    ®×ÖÍäÊ¶±ð\Source\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê #
#                    ®×ÖÍäÊ¶±ð\Peripheral_Oparation\ -I                       #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Balance_con #
#                    trol\ -Ol                                                #
#    List file    =  C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Flash_512K\ #
#                    List\SetParamer.lst                                      #
#    Object file  =  C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Flash_512K\ #
#                    Obj\SetParamer.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Make_Desicion\SetParamer.c
      1          #include "AllHeaders.h"
      2          #include "stdio.h"
      3          

   \                                 In section .bss, align 1
      4          int8u_t variPointer = 0;
   \                     variPointer:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      5          volatile int8u_t keyPrs_flag = 0;
   \                     keyPrs_flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      6          int8u_t keyValue;   //¼üÖµ
   \                     keyValue:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
      7          int16u_t aaa;
   \                     aaa:
   \   00000000                      DS8 2
      8          
      9          static void Input_float(struct myParams* parameters, int8u_t keyvalue);      //ÊäÈë¸¡µãÊý»Øµ÷º¯Êý
     10          static void Input_IntPov(struct myParams* parameters, int8u_t keyvalue);     //ÊäÈëÕýÕûÊý»Øµ÷º¯Êý
     11          static void Dis_Int(void* num, int8u_t row, int8u_t mode);
     12          static void Dis_Float(void* fnum, int8u_t row, int8u_t mode);
     13          

   \                                 In section .data, align 4
     14          Parameters myParam[VARINUM]={
   \                     myParam:
   \   00000000   0x........         DC32 `?<Constant "NormalSpeed">`, NormalSpeed, Input_IntPov, Dis_Int
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x0000             DC16 0
   \   00000012   0x00 0x00          DC8 0, 0
   \   00000014   0x........         DC32 `?<Constant "Serve_P">`, ServePID + 0CH, Input_float, Dis_Float
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000024   0x0000             DC16 0
   \   00000026   0x00 0x00          DC8 0, 0
   \   00000028   0x........         DC32 `?<Constant "Serve_D">`, ServePID + 10H, Input_float, Dis_Float
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000038   0x0000             DC16 0
   \   0000003A   0x00 0x00          DC8 0, 0
   \   0000003C   0x........         DC32 `?<Constant "Serve_I">`, ServePID + 18H, Input_float, Dis_Float
   \              0x........   
   \              0x........   
   \              0x........   
   \   0000004C   0x0000             DC16 0
   \   0000004E   0x00 0x00          DC8 0, 0
   \   00000050   0x........         DC32 `?<Constant "Diff_P">`, Diff_P, Input_float, Dis_Float
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000060   0x0000             DC16 0
   \   00000062   0x00 0x00          DC8 0, 0
   \   00000064   0x........         DC32 `?<Constant "Diff_I">`, Diff_I, Input_float, Dis_Float
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000074   0x0000             DC16 0
   \   00000076   0x00 0x00          DC8 0, 0
   \   00000078   0x........         DC32 `?<Constant "Diff_D">`, Diff_D, Input_float, Dis_Float
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000088   0x0000             DC16 0
   \   0000008A   0x00 0x00          DC8 0, 0
     15            //{"MOTOR_SPEED_P", &MOTOR_SPEED_P, Input_IntPov, Dis_Int, 0},
     16            //{"MOTOR_SPEED_I", &MOTOR_SPEED_I, Input_IntPov, Dis_Int, 0},
     17            //{"MIDANGLE", &MIDANGLE, Input_IntPov, Dis_Int, 30},
     18            {"NormalSpeed", &NormalSpeed, Input_IntPov, Dis_Int, 0},
     19            //{"Serve_D_R", &ServePID.D_Gain_Revise, Input_float, Dis_Float, 0}
     20            {"Serve_P", &ServePID.P_Gain, Input_float, Dis_Float, 0},
     21            {"Serve_D", &ServePID.D_Gain, Input_float, Dis_Float, 0},
     22            {"Serve_I", &ServePID.I_Gain, Input_float, Dis_Float, 0},
     23            {"Diff_P", &Diff_P, Input_float, Dis_Float, 0},
     24            {"Diff_I", &Diff_I, Input_float, Dis_Float, 0},
     25            {"Diff_D", &Diff_D, Input_float, Dis_Float, 0}
     26            //{"Track_Slope", &Track_Slope, Input_int, Dis_int, 0}
     27            //{"UP_KD", &UP_KD, Input_float, Dis_Float, 0}
     28          
     29          };
     30          

   \                                 In section .text, align 2, keep-with-next
     31          static void Dis_Inital_Data(void)
     32          {
   \                     Dis_Inital_Data:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     33            int i;
     34            
     35            for(i=0;i<VARINUM;i++)
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE01B             B.N      ??Dis_Inital_Data_0
     36            {
     37              Dis_String(0, i*8, myParam[i].variName, 1);
   \                     ??Dis_Inital_Data_1:
   \   00000006   0x2301             MOVS     R3,#+1
   \   00000008   0x2014             MOVS     R0,#+20
   \   0000000A   0x....             LDR.N    R1,??DataTable7_2
   \   0000000C   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000010   0x6802             LDR      R2,[R0, #+0]
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x00C1             LSLS     R1,R0,#+3
   \   00000018   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       Dis_String
     38              myParam[i].Dis_Num(myParam[i].variable, i, 1);
   \   00000020   0x2201             MOVS     R2,#+1
   \   00000022   0x0021             MOVS     R1,R4
   \   00000024   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000026   0x2014             MOVS     R0,#+20
   \   00000028   0x....             LDR.N    R3,??DataTable7_2
   \   0000002A   0xFB00 0x3004      MLA      R0,R0,R4,R3
   \   0000002E   0x6840             LDR      R0,[R0, #+4]
   \   00000030   0x2314             MOVS     R3,#+20
   \   00000032   0x....             LDR.N    R5,??DataTable7_2
   \   00000034   0xFB03 0x5304      MLA      R3,R3,R4,R5
   \   00000038   0x68DB             LDR      R3,[R3, #+12]
   \   0000003A   0x4798             BLX      R3
     39            }
   \   0000003C   0x1C64             ADDS     R4,R4,#+1
   \                     ??Dis_Inital_Data_0:
   \   0000003E   0x2C07             CMP      R4,#+7
   \   00000040   0xDBE1             BLT.N    ??Dis_Inital_Data_1
     40            OLED_Refresh_Gram();
   \   00000042   0x.... 0x....      BL       OLED_Refresh_Gram
     41          }
   \   00000046   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     42          

   \                                 In section .text, align 2, keep-with-next
     43          void SetVariable(void)
     44          {
   \                     SetVariable:
   \   00000000   0xB510             PUSH     {R4,LR}
     45            Dis_Inital_Data();      //ÏÔÊ¾³õÊ¼Öµ
   \   00000002   0x.... 0x....      BL       Dis_Inital_Data
     46            EN_KeyInt();        //¿ª°´¼üÖÐ¶Ï
   \   00000006   0x....             LDR.N    R0,??DataTable7_3  ;; 0x4004d000
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF450 0x2020      ORRS     R0,R0,#0xA0000
   \   0000000E   0x....             LDR.N    R1,??DataTable7_3  ;; 0x4004d000
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0xE016             B.N      ??SetVariable_0
     47            while(1)
     48            {
     49              if(variPointer>=VARINUM)
     50              {
     51                DIS_KeyInt();
     52                //
     53                OLED_Clear();
     54                OLED_Refresh_Gram();
     55                //¶¨Ê±Æ÷ÖÐ¶ÏÉè¶¨
     56                PIT_setTime(0,1000,1,3);        //¶¨Ê±1msÖÐ¶Ï£¬ÓÃµ½ÊµÊ±Ê±ÖÓ¶¨Ê±ÖÐ¶Ï¡¢¶¨Ê±Æ÷Òç³öÖÐ¶ÏµÈÖÐ¶ÏµÄ»°£¬±ØÐëÔÊÐí×ÜÖÐ¶Ï 
     57          
     58                return;
     59              }
     60              
     61              if(keyPrs_flag!=0)
   \                     ??SetVariable_1:
   \   00000014   0x....             LDR.N    R0,??DataTable7_4
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD012             BEQ.N    ??SetVariable_0
     62              {
     63                keyPrs_flag = 0;    //±£Ö¤Ö»´¦ÀíÒ»´Î
   \   0000001C   0x....             LDR.N    R0,??DataTable7_4
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x7001             STRB     R1,[R0, #+0]
     64                
     65                myParam[variPointer].ChangeVariable(&myParam[variPointer], keyValue);      
   \   00000022   0x....             LDR.N    R0,??DataTable7_5
   \   00000024   0x7801             LDRB     R1,[R0, #+0]
   \   00000026   0x....             LDR.N    R0,??DataTable7_6
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x2214             MOVS     R2,#+20
   \   0000002C   0x....             LDR.N    R3,??DataTable7_2
   \   0000002E   0xFB02 0x3000      MLA      R0,R2,R0,R3
   \   00000032   0x....             LDR.N    R2,??DataTable7_6
   \   00000034   0x7812             LDRB     R2,[R2, #+0]
   \   00000036   0x2314             MOVS     R3,#+20
   \   00000038   0x....             LDR.N    R4,??DataTable7_2
   \   0000003A   0xFB03 0x4202      MLA      R2,R3,R2,R4
   \   0000003E   0x6892             LDR      R2,[R2, #+8]
   \   00000040   0x4790             BLX      R2
     66              }
   \                     ??SetVariable_0:
   \   00000042   0x....             LDR.N    R0,??DataTable7_6
   \   00000044   0x7800             LDRB     R0,[R0, #+0]
   \   00000046   0x2807             CMP      R0,#+7
   \   00000048   0xD3E4             BCC.N    ??SetVariable_1
   \   0000004A   0x....             LDR.N    R0,??DataTable7_3  ;; 0x4004d000
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0xF430 0x2070      BICS     R0,R0,#0xF0000
   \   00000052   0x....             LDR.N    R1,??DataTable7_3  ;; 0x4004d000
   \   00000054   0x6008             STR      R0,[R1, #+0]
   \   00000056   0x.... 0x....      BL       OLED_Clear
   \   0000005A   0x.... 0x....      BL       OLED_Refresh_Gram
   \   0000005E   0x2303             MOVS     R3,#+3
   \   00000060   0x2201             MOVS     R2,#+1
   \   00000062   0xF44F 0x717A      MOV      R1,#+1000
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x.... 0x....      BL       PIT_setTime
   \   0000006C   0xBD10             POP      {R4,PC}          ;; return
     67            }
     68          }
     69          

   \                                 In section .text, align 2, keep-with-next
     70          void PORTE_Isr(void)
     71          {
   \                     PORTE_Isr:
   \   00000000   0xB580             PUSH     {R7,LR}
     72            CLR_UpInt();    //ÇåÖÐ¶Ï±êÖ¾
   \   00000002   0x....             LDR.N    R0,??DataTable7_7  ;; 0x4004d0a0
   \   00000004   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000008   0x6001             STR      R1,[R0, #+0]
     73          
     74            keyPrs_flag = 1;    //°´¼ü°´ÏÂ±êÖ¾Î»
   \   0000000A   0x....             LDR.N    R0,??DataTable7_4
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x7001             STRB     R1,[R0, #+0]
     75            keyValue = GetKeyValue();
   \   00000010   0x.... 0x....      BL       GetKeyValue
   \   00000014   0x....             LDR.N    R1,??DataTable7_5
   \   00000016   0x7008             STRB     R0,[R1, #+0]
     76          }
   \   00000018   0xBD01             POP      {R0,PC}          ;; return
     77          

   \                                 In section .text, align 2, keep-with-next
     78          static void Dis_Int(void* num, int8u_t row, int8u_t mode)
     79          {
   \                     Dis_Int:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0015             MOVS     R5,R2
     80            char valueBuff[12] = {'\0'};
   \   00000008   0xA900             ADD      R1,SP,#+0
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0x2600             MOVS     R6,#+0
   \   00000010   0xC14C             STM      R1!,{R2,R3,R6}
   \   00000012   0x390C             SUBS     R1,R1,#+12
     81            int16u_t num_musk = *(int16u_t*)num;
   \   00000014   0x8806             LDRH     R6,[R0, #+0]
     82          
     83            OLED_Clear_Num(row);
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x.... 0x....      BL       OLED_Clear_Num
     84            sprintf(valueBuff, "%d",num_musk);
   \   0000001E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000020   0x0032             MOVS     R2,R6
   \   00000022   0x....             ADR.N    R1,??DataTable7  ;; 0x25, 0x64, 0x00, 0x00
   \   00000024   0xA800             ADD      R0,SP,#+0
   \   00000026   0x.... 0x....      BL       sprintf
     85            Dis_String(NUMPOS, row*8, valueBuff,mode);     //Õý·´É«ÏÔÊ¾Êý×Ö
   \   0000002A   0x002B             MOVS     R3,R5
   \   0000002C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000002E   0xAA00             ADD      R2,SP,#+0
   \   00000030   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000032   0x00E1             LSLS     R1,R4,#+3
   \   00000034   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000036   0x2058             MOVS     R0,#+88
   \   00000038   0x.... 0x....      BL       Dis_String
     86            OLED_Refresh_Row(row);
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0x.... 0x....      BL       OLED_Refresh_Row
     87          }
   \   00000044   0xBD7F             POP      {R0-R6,PC}       ;; return
     88          

   \                                 In section .text, align 2, keep-with-next
     89          static void Dis_Float(void* fnum, int8u_t row, int8u_t mode)
     90          {
   \                     Dis_Float:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0015             MOVS     R5,R2
     91            char valueBuff[12] = {'\0'};
   \   00000008   0xA900             ADD      R1,SP,#+0
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0x2600             MOVS     R6,#+0
   \   00000010   0xC14C             STM      R1!,{R2,R3,R6}
   \   00000012   0x390C             SUBS     R1,R1,#+12
     92            float num_musk = *(float*)fnum;
   \   00000014   0x6806             LDR      R6,[R0, #+0]
     93            
     94            OLED_Clear_Num(row);
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x.... 0x....      BL       OLED_Clear_Num
     95            sprintf(valueBuff, "%.3f",num_musk);      //ÏÔÊ¾3Î»Ð¡Êý
   \   0000001E   0x0030             MOVS     R0,R6
   \   00000020   0x.... 0x....      BL       __aeabi_f2d
   \   00000024   0x0002             MOVS     R2,R0
   \   00000026   0x000B             MOVS     R3,R1
   \   00000028   0x....             LDR.N    R1,??DataTable7_8
   \   0000002A   0xA800             ADD      R0,SP,#+0
   \   0000002C   0x.... 0x....      BL       sprintf
     96            Dis_String(NUMPOS, row*8, valueBuff,mode);     //Õý·´É«ÏÔÊ¾Êý×Ö
   \   00000030   0x002B             MOVS     R3,R5
   \   00000032   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000034   0xAA00             ADD      R2,SP,#+0
   \   00000036   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000038   0x00E1             LSLS     R1,R4,#+3
   \   0000003A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003C   0x2058             MOVS     R0,#+88
   \   0000003E   0x.... 0x....      BL       Dis_String
     97            OLED_Refresh_Row(row);
   \   00000042   0x0020             MOVS     R0,R4
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0x.... 0x....      BL       OLED_Refresh_Row
     98          }
   \   0000004A   0xBD7F             POP      {R0-R6,PC}       ;; return
     99          

   \                                 In section .text, align 2, keep-with-next
    100          static void Input_IntPov(struct myParams* parameters, int8u_t keyvalue)     //ÊäÈëÒ»¸öÕýÕûÊý
    101          {
   \                     Input_IntPov:
   \   00000000   0xB580             PUSH     {R7,LR}
    102            static int8u_t numChanged = 0;
    103            
    104            if(keyvalue =='E')      //Èç¹ûÊÇEÔòÖ±½Ó·µ»Ø
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2945             CMP      R1,#+69
   \   00000006   0xD03C             BEQ.N    ??Input_IntPov_0
    105              return;
    106            if(keyvalue =='Y')
   \                     ??Input_IntPov_1:
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x2959             CMP      R1,#+89
   \   0000000C   0xD11B             BNE.N    ??Input_IntPov_2
    107            {
    108              if(numChanged == 0)   //Èç¹ûÖ±½Ó°´¡®Y¡¯£¬¾Í×ªÏÂÒ»¸öÊý
   \   0000000E   0x....             LDR.N    R1,??DataTable7_9
   \   00000010   0x7809             LDRB     R1,[R1, #+0]
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD105             BNE.N    ??Input_IntPov_3
    109              {
    110                variPointer++;
   \   00000016   0x....             LDR.N    R0,??DataTable7_6
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x....             LDR.N    R1,??DataTable7_6
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
    111                return;
   \   00000020   0xE02F             B.N      ??Input_IntPov_0
    112              }
    113              else
    114              {
    115                *((int16u_t*)parameters->variable) = parameters->DataTemp.uiData;
   \                     ??Input_IntPov_3:
   \   00000022   0x6841             LDR      R1,[R0, #+4]
   \   00000024   0x8A02             LDRH     R2,[R0, #+16]
   \   00000026   0x800A             STRH     R2,[R1, #+0]
    116                //ÉèÖÃÍê³ÉºóÏÔÊ¾Êý×Ö
    117                Dis_Int(&parameters->DataTemp.uiData, variPointer, 1);//ÕýÉ«ÏÔÊ¾Êý×Ö
   \   00000028   0x2201             MOVS     R2,#+1
   \   0000002A   0x....             LDR.N    R1,??DataTable7_6
   \   0000002C   0x7809             LDRB     R1,[R1, #+0]
   \   0000002E   0x3010             ADDS     R0,R0,#+16
   \   00000030   0x.... 0x....      BL       Dis_Int
    118          
    119                variPointer++;
   \   00000034   0x....             LDR.N    R0,??DataTable7_6
   \   00000036   0x7800             LDRB     R0,[R0, #+0]
   \   00000038   0x1C40             ADDS     R0,R0,#+1
   \   0000003A   0x....             LDR.N    R1,??DataTable7_6
   \   0000003C   0x7008             STRB     R0,[R1, #+0]
    120                numChanged = 0;
   \   0000003E   0x....             LDR.N    R0,??DataTable7_9
   \   00000040   0x2100             MOVS     R1,#+0
   \   00000042   0x7001             STRB     R1,[R0, #+0]
    121                return;
   \   00000044   0xE01D             B.N      ??Input_IntPov_0
    122              }
    123            }
    124            else if(keyvalue =='N')     //°´¡®N¡¯¼õÒ»Î»
   \                     ??Input_IntPov_2:
   \   00000046   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000048   0x294E             CMP      R1,#+78
   \   0000004A   0xD10B             BNE.N    ??Input_IntPov_4
    125            {
    126              parameters->DataTemp.uiData/=10;
   \   0000004C   0x8A01             LDRH     R1,[R0, #+16]
   \   0000004E   0x220A             MOVS     R2,#+10
   \   00000050   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000054   0x8201             STRH     R1,[R0, #+16]
    127              Dis_Int(&parameters->DataTemp.uiData, variPointer, 0);//·´É«ÏÔÊ¾Êý×Ö
   \   00000056   0x2200             MOVS     R2,#+0
   \   00000058   0x....             LDR.N    R1,??DataTable7_6
   \   0000005A   0x7809             LDRB     R1,[R1, #+0]
   \   0000005C   0x3010             ADDS     R0,R0,#+16
   \   0000005E   0x.... 0x....      BL       Dis_Int
   \   00000062   0xE00E             B.N      ??Input_IntPov_5
    128            }
    129            else      //Èç¹ûÊÇÊý×Ö
    130            {
    131              numChanged = 1;
   \                     ??Input_IntPov_4:
   \   00000064   0x....             LDR.N    R2,??DataTable7_9
   \   00000066   0x2301             MOVS     R3,#+1
   \   00000068   0x7013             STRB     R3,[R2, #+0]
    132              parameters->DataTemp.uiData = parameters->DataTemp.uiData*10+ keyvalue;
   \   0000006A   0x8A02             LDRH     R2,[R0, #+16]
   \   0000006C   0x230A             MOVS     R3,#+10
   \   0000006E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000070   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   00000074   0x8201             STRH     R1,[R0, #+16]
    133              Dis_Int(&parameters->DataTemp.uiData, variPointer, 0);//·´É«ÏÔÊ¾Êý×Ö
   \   00000076   0x2200             MOVS     R2,#+0
   \   00000078   0x....             LDR.N    R1,??DataTable7_6
   \   0000007A   0x7809             LDRB     R1,[R1, #+0]
   \   0000007C   0x3010             ADDS     R0,R0,#+16
   \   0000007E   0x.... 0x....      BL       Dis_Int
    134            }
    135            
    136          }
   \                     ??Input_IntPov_5:
   \                     ??Input_IntPov_0:
   \   00000082   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 1
   \                     ??numChanged:
   \   00000000                      DS8 1
    137          

   \                                 In section .text, align 2, keep-with-next
    138          static float charToFloat(char* fbuff)
    139          {
   \                     charToFloat:
   \   00000000   0xB580             PUSH     {R7,LR}
    140            float numfloat = 0.0;
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x9100             STR      R1,[SP, #+0]
    141            
    142            sscanf(fbuff, "%f", &numfloat);
   \   00000006   0xAA00             ADD      R2,SP,#+0
   \   00000008   0x....             ADR.N    R1,??DataTable7_1  ;; 0x25, 0x66, 0x00, 0x00
   \   0000000A   0x.... 0x....      BL       sscanf
    143            return numfloat;
   \   0000000E   0x9800             LDR      R0,[SP, #+0]
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
    144          }
    145          

   \                                 In section .text, align 2, keep-with-next
    146          static void Input_float(struct myParams* parameters, int8u_t keyvalue)
    147          {
   \                     Input_float:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    148            int8u_t i;
    149            static int8u_t numChanged = 0;
    150            static int8u_t pointVef = 0;
    151            static int8u_t numPos = 0;    //Êý×ÖÖ¸Õë
    152            static char valueBuff[12] = {'\0'};
    153            
    154            if(keyvalue =='E')      //Èç¹ûÊÇEÔòÖ±½Ó·µ»Ø
   \   00000004   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   0x2945             CMP      R1,#+69
   \   00000008   0xF000 0x8095      BEQ.W    ??Input_float_0
    155              return;
    156            if(keyvalue =='Y')
   \                     ??Input_float_1:
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x2959             CMP      R1,#+89
   \   00000010   0xD156             BNE.N    ??Input_float_2
    157            {
    158              if(numChanged == 0)   //Èç¹ûÖ±½Ó°´¡®Y¡¯£¬¾Í×ªÏÂÒ»¸öÊý
   \   00000012   0x....             LDR.N    R0,??DataTable7_10
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD105             BNE.N    ??Input_float_3
    159              {
    160                variPointer++;
   \   0000001A   0x....             LDR.N    R0,??DataTable7_6
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \   00000020   0x....             LDR.N    R1,??DataTable7_6
   \   00000022   0x7008             STRB     R0,[R1, #+0]
    161                return;
   \   00000024   0xE087             B.N      ??Input_float_0
    162              }
    163              else
    164              {
    165                if(0 == pointVef)    //µÚÒ»¸ö¡®Y¡¯ÊÇÐ¡Êýµã
   \                     ??Input_float_3:
   \   00000026   0x....             LDR.N    R0,??DataTable7_11
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD11D             BNE.N    ??Input_float_4
    166                {
    167                  pointVef++;
   \   0000002E   0x....             LDR.N    R0,??DataTable7_11
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0x1C40             ADDS     R0,R0,#+1
   \   00000034   0x....             LDR.N    R1,??DataTable7_11
   \   00000036   0x7008             STRB     R0,[R1, #+0]
    168                  valueBuff[numPos] = '.';
   \   00000038   0x....             LDR.N    R0,??DataTable7_12
   \   0000003A   0x7800             LDRB     R0,[R0, #+0]
   \   0000003C   0x....             LDR.N    R1,??DataTable7_13
   \   0000003E   0x222E             MOVS     R2,#+46
   \   00000040   0x5442             STRB     R2,[R0, R1]
    169                  Dis_String(NUMPOS, variPointer*8, valueBuff,0);     //·´É«ÏÔÊ¾Êý×Ö
   \   00000042   0x2300             MOVS     R3,#+0
   \   00000044   0x....             LDR.N    R2,??DataTable7_13
   \   00000046   0x....             LDR.N    R0,??DataTable7_6
   \   00000048   0x7800             LDRB     R0,[R0, #+0]
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0x00C1             LSLS     R1,R0,#+3
   \   0000004E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000050   0x2058             MOVS     R0,#+88
   \   00000052   0x.... 0x....      BL       Dis_String
    170                  OLED_Refresh_Row(variPointer);
   \   00000056   0x....             LDR.N    R0,??DataTable7_6
   \   00000058   0x7800             LDRB     R0,[R0, #+0]
   \   0000005A   0x.... 0x....      BL       OLED_Refresh_Row
    171                  numPos++;
   \   0000005E   0x....             LDR.N    R0,??DataTable7_12
   \   00000060   0x7800             LDRB     R0,[R0, #+0]
   \   00000062   0x1C40             ADDS     R0,R0,#+1
   \   00000064   0x....             LDR.N    R1,??DataTable7_12
   \   00000066   0x7008             STRB     R0,[R1, #+0]
   \   00000068   0xE065             B.N      ??Input_float_5
    172                }
    173                else if(1 == pointVef)    //µÚ¶þ¸ö¡®Y¡¯ÊÇ½áÊø±êÖ¾
   \                     ??Input_float_4:
   \   0000006A   0x....             LDR.N    R0,??DataTable7_11
   \   0000006C   0x7800             LDRB     R0,[R0, #+0]
   \   0000006E   0x2801             CMP      R0,#+1
   \   00000070   0xD161             BNE.N    ??Input_float_5
    174                {
    175                  parameters->DataTemp.fData = charToFloat(valueBuff);
   \   00000072   0x....             LDR.N    R0,??DataTable7_13
   \   00000074   0x.... 0x....      BL       charToFloat
   \   00000078   0x6120             STR      R0,[R4, #+16]
    176                  *((float*)parameters->variable) = parameters->DataTemp.fData;
   \   0000007A   0x6860             LDR      R0,[R4, #+4]
   \   0000007C   0x6921             LDR      R1,[R4, #+16]
   \   0000007E   0x6001             STR      R1,[R0, #+0]
    177                  //ÉèÖÃÍê³ÉºóÏÔÊ¾Êý×Ö
    178                  Dis_Float(&parameters->DataTemp.fData, variPointer, 1);//ÕýÉ«ÏÔÊ¾Êý×Ö
   \   00000080   0x2201             MOVS     R2,#+1
   \   00000082   0x....             LDR.N    R0,??DataTable7_6
   \   00000084   0x7801             LDRB     R1,[R0, #+0]
   \   00000086   0xF114 0x0010      ADDS     R0,R4,#+16
   \   0000008A   0x.... 0x....      BL       Dis_Float
    179          
    180                  variPointer++;
   \   0000008E   0x....             LDR.N    R0,??DataTable7_6
   \   00000090   0x7800             LDRB     R0,[R0, #+0]
   \   00000092   0x1C40             ADDS     R0,R0,#+1
   \   00000094   0x....             LDR.N    R1,??DataTable7_6
   \   00000096   0x7008             STRB     R0,[R1, #+0]
    181                  numChanged = 0;     //±äÁ¿ÓÃÍêÖ®ºóÇåÁã
   \   00000098   0x....             LDR.N    R0,??DataTable7_10
   \   0000009A   0x2100             MOVS     R1,#+0
   \   0000009C   0x7001             STRB     R1,[R0, #+0]
    182                  pointVef = 0;
   \   0000009E   0x....             LDR.N    R0,??DataTable7_11
   \   000000A0   0x2100             MOVS     R1,#+0
   \   000000A2   0x7001             STRB     R1,[R0, #+0]
    183                  numPos = 0;
   \   000000A4   0x....             LDR.N    R0,??DataTable7_12
   \   000000A6   0x2100             MOVS     R1,#+0
   \   000000A8   0x7001             STRB     R1,[R0, #+0]
    184                  for(i=0;i<12;i++)
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0xE004             B.N      ??Input_float_6
    185                  {
    186                    valueBuff[i] = '\0';
   \                     ??Input_float_7:
   \   000000AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B0   0x....             LDR.N    R1,??DataTable7_13
   \   000000B2   0x2200             MOVS     R2,#+0
   \   000000B4   0x5442             STRB     R2,[R0, R1]
    187                  }
   \   000000B6   0x1C40             ADDS     R0,R0,#+1
   \                     ??Input_float_6:
   \   000000B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BA   0x280C             CMP      R0,#+12
   \   000000BC   0xD3F7             BCC.N    ??Input_float_7
    188                  return;
   \   000000BE   0xE03A             B.N      ??Input_float_0
    189                }
    190              }
    191            }
    192            else if(keyvalue =='N')     //°´¡®N¡¯¼õÒ»Î»
   \                     ??Input_float_2:
   \   000000C0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000C2   0x294E             CMP      R1,#+78
   \   000000C4   0xD11C             BNE.N    ??Input_float_8
    193            {
    194              numPos--;
   \   000000C6   0x....             LDR.N    R0,??DataTable7_12
   \   000000C8   0x7800             LDRB     R0,[R0, #+0]
   \   000000CA   0x1E40             SUBS     R0,R0,#+1
   \   000000CC   0x....             LDR.N    R1,??DataTable7_12
   \   000000CE   0x7008             STRB     R0,[R1, #+0]
    195              valueBuff[numPos] = '\0';
   \   000000D0   0x....             LDR.N    R0,??DataTable7_12
   \   000000D2   0x7800             LDRB     R0,[R0, #+0]
   \   000000D4   0x....             LDR.N    R1,??DataTable7_13
   \   000000D6   0x2200             MOVS     R2,#+0
   \   000000D8   0x5442             STRB     R2,[R0, R1]
    196              OLED_Clear_Num(variPointer);
   \   000000DA   0x....             LDR.N    R0,??DataTable7_6
   \   000000DC   0x7800             LDRB     R0,[R0, #+0]
   \   000000DE   0x.... 0x....      BL       OLED_Clear_Num
    197              Dis_String(NUMPOS, variPointer*8, valueBuff,0);     //·´É«ÏÔÊ¾Êý×Ö
   \   000000E2   0x2300             MOVS     R3,#+0
   \   000000E4   0x....             LDR.N    R2,??DataTable7_13
   \   000000E6   0x....             LDR.N    R0,??DataTable7_6
   \   000000E8   0x7800             LDRB     R0,[R0, #+0]
   \   000000EA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000EC   0x00C1             LSLS     R1,R0,#+3
   \   000000EE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000F0   0x2058             MOVS     R0,#+88
   \   000000F2   0x.... 0x....      BL       Dis_String
    198              OLED_Refresh_Row(variPointer);
   \   000000F6   0x....             LDR.N    R0,??DataTable7_6
   \   000000F8   0x7800             LDRB     R0,[R0, #+0]
   \   000000FA   0x.... 0x....      BL       OLED_Refresh_Row
   \   000000FE   0xE01A             B.N      ??Input_float_5
    199            }
    200            else      //Èç¹ûÊÇÊý×Ö
    201            {
    202              numChanged = 1;
   \                     ??Input_float_8:
   \   00000100   0x....             LDR.N    R0,??DataTable7_10
   \   00000102   0x2201             MOVS     R2,#+1
   \   00000104   0x7002             STRB     R2,[R0, #+0]
    203              valueBuff[numPos] = '0' + keyvalue;
   \   00000106   0x....             LDR.N    R0,??DataTable7_12
   \   00000108   0x7800             LDRB     R0,[R0, #+0]
   \   0000010A   0x....             LDR.N    R2,??DataTable7_13
   \   0000010C   0x3130             ADDS     R1,R1,#+48
   \   0000010E   0x5481             STRB     R1,[R0, R2]
    204              numPos++;
   \   00000110   0x....             LDR.N    R0,??DataTable7_12
   \   00000112   0x7800             LDRB     R0,[R0, #+0]
   \   00000114   0x1C40             ADDS     R0,R0,#+1
   \   00000116   0x....             LDR.N    R1,??DataTable7_12
   \   00000118   0x7008             STRB     R0,[R1, #+0]
    205              Dis_String(NUMPOS, variPointer*8, valueBuff,0);     //·´É«ÏÔÊ¾Êý×Ö
   \   0000011A   0x2300             MOVS     R3,#+0
   \   0000011C   0x....             LDR.N    R2,??DataTable7_13
   \   0000011E   0x....             LDR.N    R0,??DataTable7_6
   \   00000120   0x7800             LDRB     R0,[R0, #+0]
   \   00000122   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000124   0x00C1             LSLS     R1,R0,#+3
   \   00000126   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000128   0x2058             MOVS     R0,#+88
   \   0000012A   0x.... 0x....      BL       Dis_String
    206              OLED_Refresh_Row(variPointer);
   \   0000012E   0x....             LDR.N    R0,??DataTable7_6
   \   00000130   0x7800             LDRB     R0,[R0, #+0]
   \   00000132   0x.... 0x....      BL       OLED_Refresh_Row
    207            }
    208          }
   \                     ??Input_float_5:
   \                     ??Input_float_0:
   \   00000136   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .bss, align 1
   \                     ??numChanged_1:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??pointVef:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??numPos:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     ??valueBuff:
   \   00000000                      DS8 12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x25 0x64          DC8      0x25, 0x64, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x25 0x66          DC8      0x25, 0x66, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     myParam

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x4004D000         DC32     0x4004d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     keyPrs_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     keyValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     variPointer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x4004D0A0         DC32     0x4004d0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     `?<Constant "%.3f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     ??numChanged

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     ??numChanged_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x........         DC32     ??pointVef

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     ??numPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x........         DC32     ??valueBuff

   \                                 In section .rodata, align 4
   \                     `?<Constant "NormalSpeed">`:
   \   00000000   0x4E 0x6F          DC8 "NormalSpeed"
   \              0x72 0x6D    
   \              0x61 0x6C    
   \              0x53 0x70    
   \              0x65 0x65    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Serve_P">`:
   \   00000000   0x53 0x65          DC8 "Serve_P"
   \              0x72 0x76    
   \              0x65 0x5F    
   \              0x50 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Serve_D">`:
   \   00000000   0x53 0x65          DC8 "Serve_D"
   \              0x72 0x76    
   \              0x65 0x5F    
   \              0x44 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Serve_I">`:
   \   00000000   0x53 0x65          DC8 "Serve_I"
   \              0x72 0x76    
   \              0x65 0x5F    
   \              0x49 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Diff_P">`:
   \   00000000   0x44 0x69          DC8 "Diff_P"
   \              0x66 0x66    
   \              0x5F 0x50    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Diff_I">`:
   \   00000000   0x44 0x69          DC8 "Diff_I"
   \              0x66 0x66    
   \              0x5F 0x49    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Diff_D">`:
   \   00000000   0x44 0x69          DC8 "Diff_D"
   \              0x66 0x66    
   \              0x5F 0x44    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x64          DC8 "%d"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "%.3f">`:
   \   00000000   0x25 0x2E          DC8 "%.3f"
   \              0x33 0x66    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x66          DC8 "%f"
   \              0x00         
   \   00000003   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       32  Dis_Float
             32 -> Dis_String
             32 -> OLED_Clear_Num
             32 -> OLED_Refresh_Row
             32 -> __aeabi_f2d
             32 -> sprintf
       16  Dis_Inital_Data
             16 -- Indirect call
             16 -> Dis_String
             16 -> OLED_Refresh_Gram
       32  Dis_Int
             32 -> Dis_String
             32 -> OLED_Clear_Num
             32 -> OLED_Refresh_Row
             32 -> sprintf
        8  Input_IntPov
              8 -> Dis_Int
        8  Input_float
              8 -> Dis_Float
              8 -> Dis_String
              8 -> OLED_Clear_Num
              8 -> OLED_Refresh_Row
              8 -> charToFloat
        8  PORTE_Isr
              8 -> GetKeyValue
        8  SetVariable
              8 -- Indirect call
              8 -> Dis_Inital_Data
              8 -> OLED_Clear
              8 -> OLED_Refresh_Gram
              8 -> PIT_setTime
        8  charToFloat
              8 -> sscanf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "%.3f">
       4  ?<Constant "%d">
       4  ?<Constant "%f">
       8  ?<Constant "Diff_D">
       8  ?<Constant "Diff_I">
       8  ?<Constant "Diff_P">
      12  ?<Constant "NormalSpeed">
       8  ?<Constant "Serve_D">
       8  ?<Constant "Serve_I">
       8  ?<Constant "Serve_P">
      12  ?<Constant {0}>
      12  ?<Constant {0}>_1
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      76  Dis_Float
      72  Dis_Inital_Data
      70  Dis_Int
     132  Input_IntPov
     312  Input_float
      26  PORTE_Isr
     110  SetVariable
       2  aaa
      18  charToFloat
       1  keyPrs_flag
       1  keyValue
     140  myParam
       1  numChanged
       1  numChanged
       1  numPos
       1  pointVef
      12  valueBuff
       1  variPointer

 
  21 bytes in section .bss
 140 bytes in section .data
 100 bytes in section .rodata
 872 bytes in section .text
 
 872 bytes of CODE  memory
 100 bytes of CONST memory
 161 bytes of DATA  memory

Errors: none
Warnings: 5
