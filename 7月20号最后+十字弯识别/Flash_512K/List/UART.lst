###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     05/May/2015  18:17:03 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\Drivers\ #
#                    UART\UART.c                                              #
#    Command line =  E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\Drivers\ #
#                    UART\UART.c -D IAR -lCN E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ× #
#                    ª²î¿ª»·\Flash_512K\List\ -lB                             #
#                    E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Flash_512K\List\ #
#                     -o E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Flash_512K\O #
#                    bj\ --no_cse --no_unroll --no_inline --no_code_motion    #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --char_is_signed      #
#                    --fpu=None --dlib_config "D:\Program Files               #
#                    (x86)\IAR\arm\INC\c\DLib_Config_Normal.h" -I             #
#                    E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\CPU\ -I  #
#                    E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\Drivers\ #
#                    ADC\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\ #
#                    Drivers\FTM\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\ #
#                    Library\Drivers\GPIO\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ #
#                    ×ª²î¿ª»·\Library\Drivers\PIT\ -I                         #
#                    E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\Drivers\ #
#                    I2C\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\ #
#                    Drivers\UART\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»· #
#                    \Library\Drivers\FTFL\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3º #
#                    Å×ª²î¿ª»·\MyFunction\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ #
#                    ×ª²î¿ª»·\SD_System\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª #
#                    ²î¿ª»·\Delay\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»· #
#                    \System_Init\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»· #
#                    \OLED\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\ZLG729 #
#                    0\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Simple_AD\ #
#                     -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Make_Desicio #
#                    n\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Make_Desic #
#                    ion\Judge_Way\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª» #
#                    ·\Make_Desicion\Speed_Control\ -I                        #
#                    E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Source\ -I       #
#                    E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Peripheral_Opara #
#                    tion\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Balance #
#                    _control\ -Ol                                            #
#    List file    =  E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Flash_512K\List\ #
#                    UART.lst                                                 #
#    Object file  =  E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Flash_512K\Obj\U #
#                    ART.o                                                    #
#                                                                             #
#                                                                             #
###############################################################################

E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\Drivers\UART\UART.c
      1          
      2          /*******************************************************************************
      3          ÎÄ¼þÃû£ºUART.c
      4          ÃèÊö£ºÓÃÓÚ´®¿ÚÍ¨ÐÅ
      5          Ê±¼ä£º2014Äê4ÔÂ17ÈÕ
      6          *******************************************************************************/
      7          
      8          
      9          #include"UART.h"
     10          
     11          
     12          /*******************************************************************************
     13          º¯ÊýÃû£ºUART_Selt
     14          Èë¿Ú²ÎÊý£ºuart_ptr:UART0_BASE_PTR/ UART1_BASE_PTR/ UART2_BASE_PTR/ UART3_BASE_PTR
     15                              UART4_BASE_PTR/ UART5_BASE_PTR
     16          ×÷ÓÃ£ºÑ¡ÔñUARTÄ£¿é¼°ÏàÓ¦Òý½Å
     17          ********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     18          void UART_Selt(UART_MemMapPtr uart_ptr)
     19          {
     20            /* Enable the clock to the selected UART */    
     21              if(uart_ptr == UART0_BASE_PTR)
   \                     UART_Selt:
   \   00000000   0x....             LDR.N    R1,??DataTable2  ;; 0x4006a000
   \   00000002   0x4288             CMP      R0,R1
   \   00000004   0xD106             BNE.N    ??UART_Selt_0
     22          		SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
   \   00000006   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40048034
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000000E   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40048034
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0xE02D             B.N      ??UART_Selt_1
     23              else
     24              	if (uart_ptr == UART1_BASE_PTR)
   \                     ??UART_Selt_0:
   \   00000014   0x....             LDR.N    R1,??DataTable2_2  ;; 0x4006b000
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xD106             BNE.N    ??UART_Selt_2
     25          			SIM_SCGC4 |= SIM_SCGC4_UART1_MASK;
   \   0000001A   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40048034
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000022   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40048034
   \   00000024   0x6008             STR      R0,[R1, #+0]
   \   00000026   0xE023             B.N      ??UART_Selt_1
     26              	else
     27              		if (uart_ptr == UART2_BASE_PTR)
   \                     ??UART_Selt_2:
   \   00000028   0x....             LDR.N    R1,??DataTable2_3  ;; 0x4006c000
   \   0000002A   0x4288             CMP      R0,R1
   \   0000002C   0xD106             BNE.N    ??UART_Selt_3
     28              			SIM_SCGC4 |= SIM_SCGC4_UART2_MASK;
   \   0000002E   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40048034
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   00000036   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40048034
   \   00000038   0x6008             STR      R0,[R1, #+0]
   \   0000003A   0xE019             B.N      ??UART_Selt_1
     29              		else
     30              			if(uart_ptr == UART3_BASE_PTR)
   \                     ??UART_Selt_3:
   \   0000003C   0x....             LDR.N    R1,??DataTable2_4  ;; 0x4006d000
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xD106             BNE.N    ??UART_Selt_4
     31              				SIM_SCGC4 |= SIM_SCGC4_UART3_MASK;
   \   00000042   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40048034
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   0000004A   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40048034
   \   0000004C   0x6008             STR      R0,[R1, #+0]
   \   0000004E   0xE00F             B.N      ??UART_Selt_1
     32              			else
     33              				if(uart_ptr == UART4_BASE_PTR)
   \                     ??UART_Selt_4:
   \   00000050   0x....             LDR.N    R1,??DataTable2_5  ;; 0x400ea000
   \   00000052   0x4288             CMP      R0,R1
   \   00000054   0xD106             BNE.N    ??UART_Selt_5
     34              					SIM_SCGC1 |= SIM_SCGC1_UART4_MASK;
   \   00000056   0x....             LDR.N    R0,??DataTable2_6  ;; 0x40048028
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000005E   0x....             LDR.N    R1,??DataTable2_6  ;; 0x40048028
   \   00000060   0x6008             STR      R0,[R1, #+0]
   \   00000062   0xE005             B.N      ??UART_Selt_1
     35              				else
     36              					SIM_SCGC1 |= SIM_SCGC1_UART5_MASK;
   \                     ??UART_Selt_5:
   \   00000064   0x....             LDR.N    R0,??DataTable2_6  ;; 0x40048028
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   0000006C   0x....             LDR.N    R1,??DataTable2_6  ;; 0x40048028
   \   0000006E   0x6008             STR      R0,[R1, #+0]
     37          }
   \                     ??UART_Selt_1:
   \   00000070   0x4770             BX       LR               ;; return
     38          
     39          
     40          /*******************************************************************************
     41          º¯ÊýÃû£ºUART_Set
     42          Èë¿Ú²ÎÊý£ºuart_ptr:UARTÄ£¿é
     43                    baud£º²¨ÌØÂÊ
     44          ×÷ÓÃ£ºÅäÖÃUARTÄ£¿é
     45          ********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     46          void UART_Set(UART_MemMapPtr uart_ptr,int bitnum,int baud)
     47          {
   \                     UART_Set:
   \   00000000   0xB430             PUSH     {R4,R5}
     48            register int16u_t sbr,brfa;
     49            int sysclk;
     50            int8u_t temp;
     51          
     52            if((uart_ptr==UART0_BASE_PTR)| (uart_ptr==UART1_BASE_PTR))
   \   00000002   0x....             LDR.N    R3,??DataTable2  ;; 0x4006a000
   \   00000004   0x4298             CMP      R0,R3
   \   00000006   0xD008             BEQ.N    ??UART_Set_0
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x....             LDR.N    R4,??DataTable2_2  ;; 0x4006b000
   \   0000000C   0x42A0             CMP      R0,R4
   \   0000000E   0xD004             BEQ.N    ??UART_Set_0
   \   00000010   0xF053 0x0300      ORRS     R3,R3,#0x0
   \   00000014   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000016   0x2B00             CMP      R3,#+0
   \   00000018   0xD001             BEQ.N    ??UART_Set_1
     53              sysclk =CORE_CLK_Kinetis;
   \                     ??UART_Set_0:
   \   0000001A   0x2360             MOVS     R3,#+96
   \   0000001C   0xE000             B.N      ??UART_Set_2
     54            else
     55              sysclk =CORE_CLK_Kinetis/DIV_BusClk_Kinetis;
   \                     ??UART_Set_1:
   \   0000001E   0x2330             MOVS     R3,#+48
     56              
     57            UART_C2_REG(uart_ptr) &=~(UART_C2_RE_MASK| UART_C2_TE_MASK);                //³õÊ¼»¯Ö®Ç°ÏÈ¹Øµô·¢ËÍÆ÷ºÍ½ÓÊÕÆ÷
   \                     ??UART_Set_2:
   \   00000020   0x78C4             LDRB     R4,[R0, #+3]
   \   00000022   0xF014 0x04F3      ANDS     R4,R4,#0xF3
   \   00000026   0x70C4             STRB     R4,[R0, #+3]
     58            //Ñ¡Ôñ´«ËÍÎ»Êý
     59            if(bitnum==8)
   \   00000028   0x2908             CMP      R1,#+8
   \   0000002A   0xD103             BNE.N    ??UART_Set_3
     60            {
     61              UART_C1_REG(uart_ptr) &= ~UART_C1_M_MASK;
   \   0000002C   0x7884             LDRB     R4,[R0, #+2]
   \   0000002E   0xF014 0x04EF      ANDS     R4,R4,#0xEF
   \   00000032   0x7084             STRB     R4,[R0, #+2]
     62            }
     63            if(bitnum==9)
   \                     ??UART_Set_3:
   \   00000034   0x2909             CMP      R1,#+9
   \   00000036   0xD103             BNE.N    ??UART_Set_4
     64            {
     65              UART_C1_REG(uart_ptr) |= UART_C1_M_MASK;
   \   00000038   0x7881             LDRB     R1,[R0, #+2]
   \   0000003A   0xF051 0x0110      ORRS     R1,R1,#0x10
   \   0000003E   0x7081             STRB     R1,[R0, #+2]
     66            }
     67            //¼ÆËã²¨ÌØÂÊ
     68            sbr =(int16u_t)((sysclk*1000000)/(baud*16));
   \                     ??UART_Set_4:
   \   00000040   0x....             LDR.N    R1,??DataTable2_7  ;; 0xf4240
   \   00000042   0xFB01 0xF103      MUL      R1,R1,R3
   \   00000046   0x0114             LSLS     R4,R2,#+4
   \   00000048   0xFB91 0xF1F4      SDIV     R1,R1,R4
     69            temp =UART_BDH_REG(uart_ptr) &~(UART_BDH_SBR(0x1F));
   \   0000004C   0x7804             LDRB     R4,[R0, #+0]
   \   0000004E   0xF014 0x04E0      ANDS     R4,R4,#0xE0
     70            UART_BDH_REG(uart_ptr) =temp | UART_BDH_SBR(((sbr &0x1F00)>>8));
   \   00000052   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000054   0x0A0D             LSRS     R5,R1,#+8
   \   00000056   0xF015 0x051F      ANDS     R5,R5,#0x1F
   \   0000005A   0x432C             ORRS     R4,R5,R4
   \   0000005C   0x7004             STRB     R4,[R0, #+0]
     71            UART_BDL_REG(uart_ptr)=(int8u_t)(sbr & UART_BDL_SBR_MASK);
   \   0000005E   0x7041             STRB     R1,[R0, #+1]
     72            //ÅäÖÃ²¨ÌØÂÊµÄÎ¢µ÷·ÖÊý
     73            brfa =(((sysclk*32000000)/(baud*16))-(sbr*32));
   \   00000060   0x....             LDR.N    R4,??DataTable2_8  ;; 0x1e84800
   \   00000062   0x4363             MULS     R3,R4,R3
   \   00000064   0x0112             LSLS     R2,R2,#+4
   \   00000066   0xFB93 0xF2F2      SDIV     R2,R3,R2
   \   0000006A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000006C   0xEBB2 0x1141      SUBS     R1,R2,R1, LSL #+5
     74            temp =UART_C4_REG(uart_ptr) &~(UART_C4_BRFA(0x1F));
   \   00000070   0x7A82             LDRB     R2,[R0, #+10]
   \   00000072   0xF012 0x04E0      ANDS     R4,R2,#0xE0
     75            UART_C4_REG(uart_ptr) =temp | UART_C4_BRFA(brfa);
   \   00000076   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \   0000007A   0x4321             ORRS     R1,R1,R4
   \   0000007C   0x7281             STRB     R1,[R0, #+10]
     76            
     77            UART_C2_REG(uart_ptr) |= (UART_C2_TE_MASK| UART_C2_RE_MASK );
   \   0000007E   0x78C1             LDRB     R1,[R0, #+3]
   \   00000080   0xF051 0x010C      ORRS     R1,R1,#0xC
   \   00000084   0x70C1             STRB     R1,[R0, #+3]
     78            
     79            //(UART_C2_REG(UART0_BASE_PTR)|= UART_C2_TIE_MASK); 
     80          
     81          }
   \   00000086   0xBC30             POP      {R4,R5}
   \   00000088   0x4770             BX       LR               ;; return
     82          
     83          
     84          /*******************************************************************************
     85          º¯ÊýÃû³Æ£ºUART_Sendchar
     86          Èë¿Ú²ÎÊý£ºuart_ptr£ºÑ¡ÔñUARTÄ£¿é
     87                    ch£º8Î»Êý¾Ý
     88          ×÷ÓÃ£º·¢ËÍÒ»¸ö8Î»Êý¾Ý
     89          ********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     90          void UART_Sendchar(UART_MemMapPtr uart_ptr,char ch)
     91          {
     92            while(!(UART_S1_REG(uart_ptr)&UART_S1_TDRE_MASK));
   \                     UART_Sendchar:
   \                     ??UART_Sendchar_0:
   \   00000000   0x7902             LDRB     R2,[R0, #+4]
   \   00000002   0x0612             LSLS     R2,R2,#+24
   \   00000004   0xD5FC             BPL.N    ??UART_Sendchar_0
     93            UART_D_REG(uart_ptr)=(uint8_t)ch;
   \   00000006   0x71C1             STRB     R1,[R0, #+7]
     94            
     95          }
   \   00000008   0x4770             BX       LR               ;; return
     96          
     97          
     98          /*******************************************************************************
     99          º¯ÊýÃû£ºUART_Getchar
    100          Èë¿Ú²ÎÊý£ºuart_ptr£ºÑ¡ÔñUARTÄ£¿é
    101          ×÷ÓÃ£º¶ÁÈ¡Ò»¸ö×Ö½Ú
    102          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    103          char UART_Getchar(UART_MemMapPtr uart_ptr)
    104          {
    105            while(!(UART_S1_REG(uart_ptr)&UART_S1_RDRF_MASK));
   \                     UART_Getchar:
   \                     ??UART_Getchar_0:
   \   00000000   0x7901             LDRB     R1,[R0, #+4]
   \   00000002   0x0689             LSLS     R1,R1,#+26
   \   00000004   0xD5FC             BPL.N    ??UART_Getchar_0
    106            return UART_D_REG(uart_ptr);
   \   00000006   0xF990 0x0007      LDRSB    R0,[R0, #+7]
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x4770             BX       LR               ;; return
    107          }
    108          
    109          
    110          /*******************************************************************************
    111          º¯ÊýÃû£ºUART_SendArr
    112          Èë¿Ú²ÎÊý£ºuart_ptr£ºÑ¡ÔñUARTÄ£¿é
    113          *ch£ºÊý×éÊ×µØÖ·
    114          len£ºÊý×é³¤¶È
    115          ×÷ÓÃ£º·¢ËÍÒ»¸öÊý×éÊý¾Ý
    116          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    117          void UART_SendArr(UART_MemMapPtr uart_ptr,char *ch,int len)
    118          {
   \                     UART_SendArr:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0xE005             B.N      ??UART_SendArr_0
    119            while(len--)
    120              UART_Sendchar(uart_ptr,*(ch++));
   \                     ??UART_SendArr_1:
   \   0000000A   0xF995 0x1000      LDRSB    R1,[R5, #+0]
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       UART_Sendchar
   \   00000014   0x1C6D             ADDS     R5,R5,#+1
   \                     ??UART_SendArr_0:
   \   00000016   0x0030             MOVS     R0,R6
   \   00000018   0x1E46             SUBS     R6,R0,#+1
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD1F5             BNE.N    ??UART_SendArr_1
    121          }
   \   0000001E   0xBD70             POP      {R4-R6,PC}       ;; return
    122          

   \                                 In section .text, align 2, keep-with-next
    123          void EN_INTUART0(void)
    124          {
   \                     EN_INTUART0:
   \   00000000   0xB580             PUSH     {R7,LR}
    125            (UART_C2_REG(UART0_BASE_PTR)|= UART_C2_RIE_MASK); 
   \   00000002   0x....             LDR.N    R0,??DataTable2_9  ;; 0x4006a003
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   0000000A   0x....             LDR.N    R1,??DataTable2_9  ;; 0x4006a003
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
    126            EnableInt_Kinetis(45);
   \   0000000E   0x202D             MOVS     R0,#+45
   \   00000010   0x.... 0x....      BL       EnableInt_Kinetis
    127            SetIntPri_Kinetis(45,10);            // ÉèÖÃÖÐ¶ÏÓÅÏÈ¼¶
   \   00000014   0x210A             MOVS     R1,#+10
   \   00000016   0x202D             MOVS     R0,#+45
   \   00000018   0x.... 0x....      BL       SetIntPri_Kinetis
    128          
    129          }
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x4006A000         DC32     0x4006a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x4006B000         DC32     0x4006b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x4006C000         DC32     0x4006c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x4006D000         DC32     0x4006d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x400EA000         DC32     0x400ea000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x40048028         DC32     0x40048028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x01E84800         DC32     0x1e84800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x4006A003         DC32     0x4006a003

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  EN_INTUART0
              8 -> EnableInt_Kinetis
              8 -> SetIntPri_Kinetis
        0  UART_Getchar
        0  UART_Selt
       16  UART_SendArr
             16 -> UART_Sendchar
        0  UART_Sendchar
        8  UART_Set


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      30  EN_INTUART0
      14  UART_Getchar
     114  UART_Selt
      32  UART_SendArr
      10  UART_Sendchar
     138  UART_Set

 
 378 bytes in section .text
 
 378 bytes of CODE memory

Errors: none
Warnings: none
