###############################################################################
#                                                                             #
#                                                       22/Jul/2015  10:59:28 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Make_Desici #
#                    on\Motor_Decision.c                                      #
#    Command line =  C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Make_Desici #
#                    on\Motor_Decision.c -D IAR -lCN                          #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Flash_512K\ #
#                    List\ -lB C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\F #
#                    lash_512K\List\ -o C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®× #
#                    ÖÍäÊ¶±ð\Flash_512K\Obj\ --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --char_is_signed --fpu=None --dlib_config             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Library\CPU #
#                    \ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Librar #
#                    y\Drivers\ADC\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×Ö #
#                    ÍäÊ¶±ð\Library\Drivers\FTM\ -I                           #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Library\Dri #
#                    vers\GPIO\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶ #
#                    ±ð\Library\Drivers\PIT\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ #
#                    ×îºó+Ê®×ÖÍäÊ¶±ð\Library\Drivers\I2C\ -I                  #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Library\Dri #
#                    vers\UART\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶ #
#                    ±ð\Library\Drivers\FTFL\ -I                              #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\MyFunction\ #
#                     -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\SD_Syst #
#                    em\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Dela #
#                    y\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Syste #
#                    m_Init\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\ #
#                    OLED\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\ZL #
#                    G7290\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\S #
#                    imple_AD\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶± #
#                    ð\Make_Desicion\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê® #
#                    ×ÖÍäÊ¶±ð\Make_Desicion\Judge_Way\ -I                     #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Make_Desici #
#                    on\Speed_Control\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê #
#                    ®×ÖÍäÊ¶±ð\Source\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê #
#                    ®×ÖÍäÊ¶±ð\Peripheral_Oparation\ -I                       #
#                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Balance_con #
#                    trol\ -Ol                                                #
#    List file    =  C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Flash_512K\ #
#                    List\Motor_Decision.lst                                  #
#    Object file  =  C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Flash_512K\ #
#                    Obj\Motor_Decision.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Make_Desicion\Motor_Decision.c
      1          #include "AllHeaders.h"
      2          

   \                                 In section .bss, align 2
      3          int16s_t LMotorPWM_His,RMotorPWM_His;
   \                     LMotorPWM_His:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     RMotorPWM_His:
   \   00000000                      DS8 2
      4          

   \                                 In section .text, align 2, keep-with-next
      5          void R_SetPwm(int16s_t r_pwm)   //ÉèÖÃÓÒµç»úPWM£¬Õý->Õý×ª ¸º->·´×ª
      6          {
   \                     R_SetPwm:
   \   00000000   0xB580             PUSH     {R7,LR}
      7            if(r_pwm>0)
   \   00000002   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000004   0x2801             CMP      R0,#+1
   \   00000006   0xDB06             BLT.N    ??R_SetPwm_0
      8            {
      9              FTM_setPWMDty(FTM0, 0, r_pwm);
   \   00000008   0x0002             MOVS     R2,R0
   \   0000000A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x....             LDR.N    R0,??DataTable2  ;; 0x40038000
   \   00000010   0x.... 0x....      BL       FTM_setPWMDty
   \   00000014   0xE006             B.N      ??R_SetPwm_1
     10            }
     11            else
     12              FTM_setPWMDty(FTM0, 4, -r_pwm);
   \                     ??R_SetPwm_0:
   \   00000016   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000018   0x4242             RSBS     R2,R0,#+0
   \   0000001A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001C   0x2104             MOVS     R1,#+4
   \   0000001E   0x....             LDR.N    R0,??DataTable2  ;; 0x40038000
   \   00000020   0x.... 0x....      BL       FTM_setPWMDty
     13          }
   \                     ??R_SetPwm_1:
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
     14          

   \                                 In section .text, align 2, keep-with-next
     15          void L_SetPwm(int16s_t l_pwm)     //ÉèÖÃ×óµç»úPWM£¬Õý->Õý×ª ¸º->·´×ª
     16          {
   \                     L_SetPwm:
   \   00000000   0xB580             PUSH     {R7,LR}
     17            if(l_pwm>0)
   \   00000002   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000004   0x2801             CMP      R0,#+1
   \   00000006   0xDB06             BLT.N    ??L_SetPwm_0
     18            {
     19              FTM_setPWMDty(FTM0, 2, l_pwm);
   \   00000008   0x0002             MOVS     R2,R0
   \   0000000A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000000C   0x2102             MOVS     R1,#+2
   \   0000000E   0x....             LDR.N    R0,??DataTable2  ;; 0x40038000
   \   00000010   0x.... 0x....      BL       FTM_setPWMDty
   \   00000014   0xE006             B.N      ??L_SetPwm_1
     20            }
     21            else
     22              FTM_setPWMDty(FTM0, 6, -l_pwm);
   \                     ??L_SetPwm_0:
   \   00000016   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000018   0x4242             RSBS     R2,R0,#+0
   \   0000001A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001C   0x2106             MOVS     R1,#+6
   \   0000001E   0x....             LDR.N    R0,??DataTable2  ;; 0x40038000
   \   00000020   0x.... 0x....      BL       FTM_setPWMDty
     23          }
   \                     ??L_SetPwm_1:
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
     24          

   \                                 In section .text, align 2, keep-with-next
     25          void SetMotorPWM(int16s_t motor_l,int16s_t motor_r)
     26          {
   \                     SetMotorPWM:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     27            if(motor_l>0)      //¸½¼Ó×óÂÖËÀÇø²ÎÊý
   \   00000006   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000008   0x2C01             CMP      R4,#+1
   \   0000000A   0xDB01             BLT.N    ??SetMotorPWM_0
     28            {
     29              motor_l += LFOWARD_DEAD_PWM;
   \   0000000C   0x340F             ADDS     R4,R4,#+15
   \   0000000E   0xE003             B.N      ??SetMotorPWM_1
     30            }
     31            else if(motor_l<0)
   \                     ??SetMotorPWM_0:
   \   00000010   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000012   0x2C00             CMP      R4,#+0
   \   00000014   0xD500             BPL.N    ??SetMotorPWM_1
     32            {
     33              motor_l -= LBACKWARD_DEAD_PWM;
   \   00000016   0x3C0E             SUBS     R4,R4,#+14
     34            }
     35            
     36            if(motor_r>0)      //¸½¼ÓÓÒÂÖËÀÇø²ÎÊý
   \                     ??SetMotorPWM_1:
   \   00000018   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   0000001A   0x2D01             CMP      R5,#+1
   \   0000001C   0xDB01             BLT.N    ??SetMotorPWM_2
     37            {
     38              motor_r += RFOWARD_DEAD_PWM;
   \   0000001E   0x350D             ADDS     R5,R5,#+13
   \   00000020   0xE003             B.N      ??SetMotorPWM_3
     39            }
     40            else if(motor_r<0)
   \                     ??SetMotorPWM_2:
   \   00000022   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000024   0x2D00             CMP      R5,#+0
   \   00000026   0xD500             BPL.N    ??SetMotorPWM_3
     41            {
     42              motor_r -= RBACKWARD_DEAD_PWM;
   \   00000028   0x3D0E             SUBS     R5,R5,#+14
     43            }
     44            //PWMÊä³öÏÞ·ù
     45              if(motor_l>MAX_MotorOut)
   \                     ??SetMotorPWM_3:
   \   0000002A   0xF240 0x10F5      MOVW     R0,#+501
   \   0000002E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xDB01             BLT.N    ??SetMotorPWM_4
     46              {
     47                motor_l=MAX_MotorOut;
   \   00000034   0xF44F 0x74FA      MOV      R4,#+500
     48              }
     49              if(motor_l<MIN_MotorOut) 
   \                     ??SetMotorPWM_4:
   \   00000038   0x....             LDR.N    R0,??DataTable2_1  ;; 0xfffffe0c
   \   0000003A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000003C   0x4284             CMP      R4,R0
   \   0000003E   0xDA00             BGE.N    ??SetMotorPWM_5
     50              {
     51                motor_l=MIN_MotorOut;
   \   00000040   0x....             LDR.N    R4,??DataTable2_1  ;; 0xfffffe0c
     52              }
     53              
     54              if(motor_r>MAX_MotorOut)  
   \                     ??SetMotorPWM_5:
   \   00000042   0xF240 0x10F5      MOVW     R0,#+501
   \   00000046   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000048   0x4285             CMP      R5,R0
   \   0000004A   0xDB01             BLT.N    ??SetMotorPWM_6
     55              {
     56                motor_r=MAX_MotorOut;
   \   0000004C   0xF44F 0x75FA      MOV      R5,#+500
     57              }
     58              if(motor_r<MIN_MotorOut) 
   \                     ??SetMotorPWM_6:
   \   00000050   0x....             LDR.N    R0,??DataTable2_1  ;; 0xfffffe0c
   \   00000052   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000054   0x4285             CMP      R5,R0
   \   00000056   0xDA00             BGE.N    ??SetMotorPWM_7
     59              {
     60                motor_r=MIN_MotorOut;
   \   00000058   0x....             LDR.N    R5,??DataTable2_1  ;; 0xfffffe0c
     61              }
     62              
     63              if((LMotorPWM_His > 0 && motor_l < 0) || (LMotorPWM_His < 0 && motor_l > 0))
   \                     ??SetMotorPWM_7:
   \   0000005A   0x....             LDR.N    R0,??DataTable2_2
   \   0000005C   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000060   0x2801             CMP      R0,#+1
   \   00000062   0xDB02             BLT.N    ??SetMotorPWM_8
   \   00000064   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000066   0x2C00             CMP      R4,#+0
   \   00000068   0xD407             BMI.N    ??SetMotorPWM_9
   \                     ??SetMotorPWM_8:
   \   0000006A   0x....             LDR.N    R0,??DataTable2_2
   \   0000006C   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD506             BPL.N    ??SetMotorPWM_10
   \   00000074   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000076   0x2C01             CMP      R4,#+1
   \   00000078   0xDB03             BLT.N    ??SetMotorPWM_10
     64              { /*Õý·´×ªÇÐ»»Ê±ÏÈ¹Øµç»úÒÔ±£»¤Çý¶¯*/
     65                L_SetPwm(0);
   \                     ??SetMotorPWM_9:
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x.... 0x....      BL       L_SetPwm
   \   00000080   0xE003             B.N      ??SetMotorPWM_11
     66              }
     67              else
     68              {
     69                //L_SetPwm(0);
     70                L_SetPwm(motor_l);
   \                     ??SetMotorPWM_10:
   \   00000082   0x0020             MOVS     R0,R4
   \   00000084   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000086   0x.... 0x....      BL       L_SetPwm
     71              }
     72              
     73              LMotorPWM_His=motor_l;
   \                     ??SetMotorPWM_11:
   \   0000008A   0x....             LDR.N    R0,??DataTable2_2
   \   0000008C   0x8004             STRH     R4,[R0, #+0]
     74              
     75              if((RMotorPWM_His > 0 && motor_r < 0) || (RMotorPWM_His < 0 && motor_r > 0))
   \   0000008E   0x....             LDR.N    R0,??DataTable2_3
   \   00000090   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000094   0x2801             CMP      R0,#+1
   \   00000096   0xDB02             BLT.N    ??SetMotorPWM_12
   \   00000098   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   0000009A   0x2D00             CMP      R5,#+0
   \   0000009C   0xD407             BMI.N    ??SetMotorPWM_13
   \                     ??SetMotorPWM_12:
   \   0000009E   0x....             LDR.N    R0,??DataTable2_3
   \   000000A0   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD506             BPL.N    ??SetMotorPWM_14
   \   000000A8   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   000000AA   0x2D01             CMP      R5,#+1
   \   000000AC   0xDB03             BLT.N    ??SetMotorPWM_14
     76              { /*Õý·´×ªÇÐ»»Ê±ÏÈ¹Øµç»úÒÔ±£»¤Çý¶¯*/
     77                R_SetPwm(0);
   \                     ??SetMotorPWM_13:
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x.... 0x....      BL       R_SetPwm
   \   000000B4   0xE003             B.N      ??SetMotorPWM_15
     78              }
     79              else
     80              {
     81                //R_SetPwm(0);
     82                R_SetPwm(motor_r);
   \                     ??SetMotorPWM_14:
   \   000000B6   0x0028             MOVS     R0,R5
   \   000000B8   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000BA   0x.... 0x....      BL       R_SetPwm
     83              }
     84              
     85              RMotorPWM_His=motor_r;
   \                     ??SetMotorPWM_15:
   \   000000BE   0x....             LDR.N    R0,??DataTable2_3
   \   000000C0   0x8005             STRH     R5,[R0, #+0]
     86          }
   \   000000C2   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0xFFFFFE0C         DC32     0xfffffe0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     LMotorPWM_His

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     RMotorPWM_His

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  L_SetPwm
              8 -> FTM_setPWMDty
        8  R_SetPwm
              8 -> FTM_setPWMDty
       16  SetMotorPWM
             16 -> L_SetPwm
             16 -> R_SetPwm


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       2  LMotorPWM_His
      38  L_SetPwm
       2  RMotorPWM_His
      38  R_SetPwm
     196  SetMotorPWM

 
   4 bytes in section .bss
 288 bytes in section .text
 
 288 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
