###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     05/May/2015  18:16:53 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\2014智能车\智能车程序\5月3号转差开环\Library\Drivers\ #
#                    I2C\I2C_Driver.c                                         #
#    Command line =  E:\2014智能车\智能车程序\5月3号转差开环\Library\Drivers\ #
#                    I2C\I2C_Driver.c -D IAR -lCN                             #
#                    E:\2014智能车\智能车程序\5月3号转差开环\Flash_512K\List\ #
#                     -lB E:\2014智能车\智能车程序\5月3号转差开环\Flash_512K\ #
#                    List\ -o E:\2014智能车\智能车程序\5月3号转差开环\Flash_5 #
#                    12K\Obj\ --no_cse --no_unroll --no_inline                #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --char_is_signed --fpu=None --dlib_config             #
#                    "D:\Program Files (x86)\IAR\arm\INC\c\DLib_Config_Normal #
#                    .h" -I E:\2014智能车\智能车程序\5月3号转差开环\Library\C #
#                    PU\ -I E:\2014智能车\智能车程序\5月3号转差开环\Library\D #
#                    rivers\ADC\ -I E:\2014智能车\智能车程序\5月3号转差开环\L #
#                    ibrary\Drivers\FTM\ -I E:\2014智能车\智能车程序\5月3号转 #
#                    差开环\Library\Drivers\GPIO\ -I                          #
#                    E:\2014智能车\智能车程序\5月3号转差开环\Library\Drivers\ #
#                    PIT\ -I E:\2014智能车\智能车程序\5月3号转差开环\Library\ #
#                    Drivers\I2C\ -I E:\2014智能车\智能车程序\5月3号转差开环\ #
#                    Library\Drivers\UART\ -I E:\2014智能车\智能车程序\5月3号 #
#                    转差开环\Library\Drivers\FTFL\ -I                        #
#                    E:\2014智能车\智能车程序\5月3号转差开环\MyFunction\ -I   #
#                    E:\2014智能车\智能车程序\5月3号转差开环\SD_System\ -I    #
#                    E:\2014智能车\智能车程序\5月3号转差开环\Delay\ -I        #
#                    E:\2014智能车\智能车程序\5月3号转差开环\System_Init\ -I  #
#                    E:\2014智能车\智能车程序\5月3号转差开环\OLED\ -I         #
#                    E:\2014智能车\智能车程序\5月3号转差开环\ZLG7290\ -I      #
#                    E:\2014智能车\智能车程序\5月3号转差开环\Simple_AD\ -I    #
#                    E:\2014智能车\智能车程序\5月3号转差开环\Make_Desicion\   #
#                    -I E:\2014智能车\智能车程序\5月3号转差开环\Make_Desicion #
#                    \Judge_Way\ -I E:\2014智能车\智能车程序\5月3号转差开环\M #
#                    ake_Desicion\Speed_Control\ -I                           #
#                    E:\2014智能车\智能车程序\5月3号转差开环\Source\ -I       #
#                    E:\2014智能车\智能车程序\5月3号转差开环\Peripheral_Opara #
#                    tion\ -I E:\2014智能车\智能车程序\5月3号转差开环\Balance #
#                    _control\ -Ol                                            #
#    List file    =  E:\2014智能车\智能车程序\5月3号转差开环\Flash_512K\List\ #
#                    I2C_Driver.lst                                           #
#    Object file  =  E:\2014智能车\智能车程序\5月3号转差开环\Flash_512K\Obj\I #
#                    2C_Driver.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

E:\2014智能车\智能车程序\5月3号转差开环\Library\Drivers\I2C\I2C_Driver.c
      1          #include "./I2C_Driver.h"
      2          
      3          

   \                                 In section .text, align 2, keep-with-next
      4          void Delay_I2C()
      5          { 
      6            int8u_t i,m;
      7            for(m=0;m<6;m++)
   \                     Delay_I2C:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xE004             B.N      ??Delay_I2C_0
      8            {for (i=0; i<50; i++);
   \                     ??Delay_I2C_1:
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \                     ??Delay_I2C_2:
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x2832             CMP      R0,#+50
   \   0000000A   0xD3FB             BCC.N    ??Delay_I2C_1
   \   0000000C   0x1C49             ADDS     R1,R1,#+1
   \                     ??Delay_I2C_0:
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x2906             CMP      R1,#+6
   \   00000012   0xD201             BCS.N    ??Delay_I2C_3
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xE7F6             B.N      ??Delay_I2C_2
      9            }
     10          }
   \                     ??Delay_I2C_3:
   \   00000018   0x4770             BX       LR               ;; return
     11          

   \                                 In section .text, align 2, keep-with-next
     12          void I2C_Start()
     13          {
     14            I2C1_C1 |= I2C_C1_TX_MASK ;
   \                     I2C_Start:
   \   00000000   0x....             LDR.N    R0,??DataTable9  ;; 0x40067002
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000008   0x....             LDR.N    R1,??DataTable9  ;; 0x40067002
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
     15            I2C1_C1 |= I2C_C1_MST_MASK ;
   \   0000000C   0x....             LDR.N    R0,??DataTable9  ;; 0x40067002
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000014   0x....             LDR.N    R1,??DataTable9  ;; 0x40067002
   \   00000016   0x7008             STRB     R0,[R1, #+0]
     16          }
   \   00000018   0x4770             BX       LR               ;; return
     17          

   \                                 In section .text, align 2, keep-with-next
     18          void I2C_ReStart()
     19          {
     20            I2C1_C1 |= I2C_C1_RSTA_MASK ;
   \                     I2C_ReStart:
   \   00000000   0x....             LDR.N    R0,??DataTable9  ;; 0x40067002
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000008   0x....             LDR.N    R1,??DataTable9  ;; 0x40067002
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
     21          }
   \   0000000C   0x4770             BX       LR               ;; return
     22          

   \                                 In section .text, align 2, keep-with-next
     23          int8u_t I2C_ReadByte()
     24          {
     25            int8u_t temp;
     26            temp = I2C1_D; 
   \                     I2C_ReadByte:
   \   00000000   0x....             LDR.N    R0,??DataTable9_1  ;; 0x40067004
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
     27            return temp;
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x4770             BX       LR               ;; return
     28          }
     29          

   \                                 In section .text, align 2, keep-with-next
     30          void I2C_WriteByte( int8u_t data8)
     31          {
     32            I2C1_D = data8; 
   \                     I2C_WriteByte:
   \   00000000   0x....             LDR.N    R1,??DataTable9_1  ;; 0x40067004
   \   00000002   0x7008             STRB     R0,[R1, #+0]
     33          }
   \   00000004   0x4770             BX       LR               ;; return
     34          //1是读，0是写

   \                                 In section .text, align 2, keep-with-next
     35          void I2C_StartTrans(int8u_t addr, int8u_t mode)
     36          {
   \                     I2C_StartTrans:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     37            //I2C产生start信号
     38            I2C_Start();
   \   00000006   0x.... 0x....      BL       I2C_Start
     39            //将从机地址和主机读写位合成一个字节写入
     40            I2C_WriteByte((addr<<1)|mode);
   \   0000000A   0xEA55 0x0044      ORRS     R0,R5,R4, LSL #+1
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x.... 0x....      BL       I2C_WriteByte
     41          }
   \   00000014   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     42          //0不等，1等

   \                                 In section .text, align 2, keep-with-next
     43          int8u_t I2C_WaitAck(int8u_t is_wait)
     44          {
     45            int16u_t time_out;
     46            if(is_wait == 1)
   \                     I2C_WaitAck:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2801             CMP      R0,#+1
   \   00000004   0xD008             BEQ.N    ??I2C_WaitAck_0
     47            {
     48              //I2C0_C1 &=~ I2C_C1_TXAK_MASK;
     49              while(!(I2C1_S & I2C_S_IICIF_MASK))
     50              { 
     51                if(time_out>60000) //如果等待超时，强行退出
     52                {
     53                  return 0;
     54                }
     55                else time_out++;
     56              }
     57              I2C1_S |= I2C_S_IICIF_MASK; 
     58            }
     59            else
     60            {
     61              //关闭I2C的ACK
     62              I2C1_C1 |= I2C_C1_TXAK_MASK; 
   \   00000006   0x....             LDR.N    R0,??DataTable9  ;; 0x40067002
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   0000000E   0x....             LDR.N    R1,??DataTable9  ;; 0x40067002
   \   00000010   0x7008             STRB     R0,[R1, #+0]
     63            }
     64            return 1;
   \                     ??I2C_WaitAck_1:
   \   00000012   0x2001             MOVS     R0,#+1
   \                     ??I2C_WaitAck_2:
   \   00000014   0x4770             BX       LR               ;; return
   \                     ??I2C_WaitAck_3:
   \   00000016   0x1C49             ADDS     R1,R1,#+1
   \                     ??I2C_WaitAck_0:
   \   00000018   0x....             LDR.N    R0,??DataTable9_2  ;; 0x40067003
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x0780             LSLS     R0,R0,#+30
   \   0000001E   0xD406             BMI.N    ??I2C_WaitAck_4
   \   00000020   0xF64E 0x2061      MOVW     R0,#+60001
   \   00000024   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000026   0x4281             CMP      R1,R0
   \   00000028   0xD3F5             BCC.N    ??I2C_WaitAck_3
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xE7F2             B.N      ??I2C_WaitAck_2
   \                     ??I2C_WaitAck_4:
   \   0000002E   0x....             LDR.N    R0,??DataTable9_2  ;; 0x40067003
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000036   0x....             LDR.N    R1,??DataTable9_2  ;; 0x40067003
   \   00000038   0x7008             STRB     R0,[R1, #+0]
   \   0000003A   0xE7EA             B.N      ??I2C_WaitAck_1
     65          }
     66          

   \                                 In section .text, align 2, keep-with-next
     67          void I2C_Stop()
     68          {
     69            I2C1_C1 &=(~I2C_C1_MST_MASK);
   \                     I2C_Stop:
   \   00000000   0x....             LDR.N    R0,??DataTable9  ;; 0x40067002
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   00000008   0x....             LDR.N    R1,??DataTable9  ;; 0x40067002
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
     70            I2C1_C1 &=(~I2C_C1_TX_MASK); 
   \   0000000C   0x....             LDR.N    R0,??DataTable9  ;; 0x40067002
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   00000014   0x....             LDR.N    R1,??DataTable9  ;; 0x40067002
   \   00000016   0x7008             STRB     R0,[R1, #+0]
     71          }
   \   00000018   0x4770             BX       LR               ;; return
     72          //1接收，0发送

   \                                 In section .text, align 2, keep-with-next
     73          void I2C_SetMasterWR(int8u_t mode)
     74          {
     75            if(mode==1) 
   \                     I2C_SetMasterWR:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2801             CMP      R0,#+1
   \   00000004   0xD106             BNE.N    ??I2C_SetMasterWR_0
     76              I2C1_C1 &= (~I2C_C1_TX_MASK);
   \   00000006   0x....             LDR.N    R0,??DataTable9  ;; 0x40067002
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   0000000E   0x....             LDR.N    R1,??DataTable9  ;; 0x40067002
   \   00000010   0x7008             STRB     R0,[R1, #+0]
   \   00000012   0xE005             B.N      ??I2C_SetMasterWR_1
     77            else
     78              I2C1_C1 |= ( I2C_C1_TX_MASK);
   \                     ??I2C_SetMasterWR_0:
   \   00000014   0x....             LDR.N    R0,??DataTable9  ;; 0x40067002
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000001C   0x....             LDR.N    R1,??DataTable9  ;; 0x40067002
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
     79          }
   \                     ??I2C_SetMasterWR_1:
   \   00000020   0x4770             BX       LR               ;; return
     80          //单字节写入*******************************************

   \                                 In section .bss, align 1
     81          int8u_t state;
   \                     state:
   \   00000000                      DS8 1

   \                                 In section .text, align 2, keep-with-next
     82          void Single_Write(int8u_t Device_Addr,int8u_t REG_Address,int8u_t REG_data)		     //void
     83          {
   \                     Single_Write:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
     84            
     85                  while(I2C1_S&I2C_S_BUSY_MASK);
   \                     ??Single_Write_0:
   \   00000006   0x....             LDR.N    R1,??DataTable9_2  ;; 0x40067003
   \   00000008   0x7809             LDRB     R1,[R1, #+0]
   \   0000000A   0x0689             LSLS     R1,R1,#+26
   \   0000000C   0xD4FB             BMI.N    ??Single_Write_0
     86            	I2C_StartTrans(Device_Addr,0);
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       I2C_StartTrans
     87                  state=I2C_WaitAck(1);
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       I2C_WaitAck
   \   0000001C   0x....             LDR.N    R1,??DataTable9_3
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
     88                  
     89                  I2C_WriteByte(REG_Address);
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x.... 0x....      BL       I2C_WriteByte
     90                  state=I2C_WaitAck(1);
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       I2C_WaitAck
   \   0000002E   0x....             LDR.N    R1,??DataTable9_3
   \   00000030   0x7008             STRB     R0,[R1, #+0]
     91                  
     92                  I2C_WriteByte(REG_data);
   \   00000032   0x0028             MOVS     R0,R5
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x.... 0x....      BL       I2C_WriteByte
     93                  state=I2C_WaitAck(1);
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x.... 0x....      BL       I2C_WaitAck
   \   00000040   0x....             LDR.N    R1,??DataTable9_3
   \   00000042   0x7008             STRB     R0,[R1, #+0]
     94                  
     95                  I2C_Stop();
   \   00000044   0x.... 0x....      BL       I2C_Stop
     96          }
   \   00000048   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     97          
     98          //单字节读取*****************************************

   \                                 In section .text, align 2, keep-with-next
     99          int8u_t Single_Read(int8u_t Device_Addr,int8u_t REG_Address)
    100          {  
   \                     Single_Read:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    101                  int8u_t data;
    102                  while(I2C1_S&I2C_S_BUSY_MASK);
   \                     ??Single_Read_0:
   \   00000006   0x....             LDR.N    R0,??DataTable9_2  ;; 0x40067003
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x0680             LSLS     R0,R0,#+26
   \   0000000C   0xD4FB             BMI.N    ??Single_Read_0
    103                  I2C_StartTrans(Device_Addr,0);
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       I2C_StartTrans
    104                  I2C_WaitAck(1);
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       I2C_WaitAck
    105                  I2C_WriteByte(REG_Address);
   \   0000001E   0x0028             MOVS     R0,R5
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x.... 0x....      BL       I2C_WriteByte
    106                  I2C_WaitAck(1);
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x.... 0x....      BL       I2C_WaitAck
    107                  I2C_ReStart();
   \   0000002C   0x.... 0x....      BL       I2C_ReStart
    108                  I2C_WriteByte((Device_Addr<<1)|1);
   \   00000030   0x0060             LSLS     R0,R4,#+1
   \   00000032   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x.... 0x....      BL       I2C_WriteByte
    109                  I2C_WaitAck(1);
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x.... 0x....      BL       I2C_WaitAck
    110                  I2C_SetMasterWR(1);
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x.... 0x....      BL       I2C_SetMasterWR
    111                  I2C_WaitAck(0);
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x.... 0x....      BL       I2C_WaitAck
    112                  data=I2C_ReadByte();
   \   0000004E   0x.... 0x....      BL       I2C_ReadByte
   \   00000052   0x0004             MOVS     R4,R0
    113                  I2C_WaitAck(1);
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x.... 0x....      BL       I2C_WaitAck
    114                  I2C_Stop();
   \   0000005A   0x.... 0x....      BL       I2C_Stop
    115                  data=I2C_ReadByte();
   \   0000005E   0x.... 0x....      BL       I2C_ReadByte
   \   00000062   0x0004             MOVS     R4,R0
    116                  return data;
   \   00000064   0x0020             MOVS     R0,R4
   \   00000066   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000068   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    117          }	
    118          

   \                                 In section .text, align 2, keep-with-next
    119          void I2C_Driver_Init()
    120          {
    121            PORTC_PCR10=PORT_PCR_MUX(2)|PORT_PCR_ODE_MASK;   //SCL
   \                     I2C_Driver_Init:
   \   00000000   0x....             LDR.N    R0,??DataTable9_4  ;; 0x4004b028
   \   00000002   0xF44F 0x7108      MOV      R1,#+544
   \   00000006   0x6001             STR      R1,[R0, #+0]
    122            PORTC_PCR11=PORT_PCR_MUX(2)|PORT_PCR_ODE_MASK;   //SDA
   \   00000008   0x....             LDR.N    R0,??DataTable9_5  ;; 0x4004b02c
   \   0000000A   0xF44F 0x7108      MOV      R1,#+544
   \   0000000E   0x6001             STR      R1,[R0, #+0]
    123            SIM_SCGC4 |= SIM_SCGC4_I2C1_MASK;
   \   00000010   0x....             LDR.N    R0,??DataTable9_6  ;; 0x40048034
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000018   0x....             LDR.N    R1,??DataTable9_6  ;; 0x40048034
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    124            I2C1_F=I2C_F_ICR(0x23)|I2C_F_MULT(0);
   \   0000001C   0x....             LDR.N    R0,??DataTable9_7  ;; 0x40067001
   \   0000001E   0x2123             MOVS     R1,#+35
   \   00000020   0x7001             STRB     R1,[R0, #+0]
    125            I2C1_C1=I2C_C1_IICEN_MASK;
   \   00000022   0x....             LDR.N    R0,??DataTable9  ;; 0x40067002
   \   00000024   0x2180             MOVS     R1,#+128
   \   00000026   0x7001             STRB     R1,[R0, #+0]
    126            I2C1_C2 |= I2C_C2_HDRS_MASK;
   \   00000028   0x....             LDR.N    R0,??DataTable9_8  ;; 0x40067005
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000030   0x....             LDR.N    R1,??DataTable9_8  ;; 0x40067005
   \   00000032   0x7008             STRB     R0,[R1, #+0]
    127          }
   \   00000034   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x40067002         DC32     0x40067002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x40067004         DC32     0x40067004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x40067003         DC32     0x40067003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x........         DC32     state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x4004B028         DC32     0x4004b028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x4004B02C         DC32     0x4004b02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x40067001         DC32     0x40067001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x40067005         DC32     0x40067005

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  Delay_I2C
        0  I2C_Driver_Init
        0  I2C_ReStart
        0  I2C_ReadByte
        0  I2C_SetMasterWR
        0  I2C_Start
       16  I2C_StartTrans
             16 -> I2C_Start
             16 -> I2C_WriteByte
        0  I2C_Stop
        0  I2C_WaitAck
        0  I2C_WriteByte
       16  Single_Read
             16 -> I2C_ReStart
             16 -> I2C_ReadByte
             16 -> I2C_SetMasterWR
             16 -> I2C_StartTrans
             16 -> I2C_Stop
             16 -> I2C_WaitAck
             16 -> I2C_WriteByte
       16  Single_Write
             16 -> I2C_StartTrans
             16 -> I2C_Stop
             16 -> I2C_WaitAck
             16 -> I2C_WriteByte


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
      26  Delay_I2C
      54  I2C_Driver_Init
      14  I2C_ReStart
       8  I2C_ReadByte
      34  I2C_SetMasterWR
      26  I2C_Start
      22  I2C_StartTrans
      26  I2C_Stop
      60  I2C_WaitAck
       6  I2C_WriteByte
     106  Single_Read
      74  Single_Write
       1  state

 
   1 byte  in section .bss
 492 bytes in section .text
 
 492 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none
