###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     05/May/2015  18:16:50 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\CPU\Star #
#                    tupCode.c                                                #
#    Command line =  E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\CPU\Star #
#                    tupCode.c -D IAR -lCN E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª² #
#                    î¿ª»·\Flash_512K\List\ -lB E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3 #
#                    ºÅ×ª²î¿ª»·\Flash_512K\List\ -o                           #
#                    E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Flash_512K\Obj\  #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --char_is_signed      #
#                    --fpu=None --dlib_config "D:\Program Files               #
#                    (x86)\IAR\arm\INC\c\DLib_Config_Normal.h" -I             #
#                    E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\CPU\ -I  #
#                    E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\Drivers\ #
#                    ADC\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\ #
#                    Drivers\FTM\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\ #
#                    Library\Drivers\GPIO\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ #
#                    ×ª²î¿ª»·\Library\Drivers\PIT\ -I                         #
#                    E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\Drivers\ #
#                    I2C\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\ #
#                    Drivers\UART\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»· #
#                    \Library\Drivers\FTFL\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3º #
#                    Å×ª²î¿ª»·\MyFunction\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ #
#                    ×ª²î¿ª»·\SD_System\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª #
#                    ²î¿ª»·\Delay\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»· #
#                    \System_Init\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»· #
#                    \OLED\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\ZLG729 #
#                    0\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Simple_AD\ #
#                     -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Make_Desicio #
#                    n\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Make_Desic #
#                    ion\Judge_Way\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª» #
#                    ·\Make_Desicion\Speed_Control\ -I                        #
#                    E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Source\ -I       #
#                    E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Peripheral_Opara #
#                    tion\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Balance #
#                    _control\ -Ol                                            #
#    List file    =  E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Flash_512K\List\ #
#                    StartupCode.lst                                          #
#    Object file  =  E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Flash_512K\Obj\S #
#                    tartupCode.o                                             #
#                                                                             #
#                                                                             #
###############################################################################

E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\CPU\StartupCode.c
      1          /*******************************************************************************
      2          * ÎÄ¼þÃû³Æ£ºStartupCode.c
      3          * Ãè    Êö£º¶¨ÒåKinetisµÄ»ù±¾µ×²ã²Ù×÷º¯Êý(ÖÐ¶ÏµÄÉèÖÃÓëCPUÄ£Ê½µÄÉèÖÃ)¡£
      4          
      5          * ×÷    Õß£ºËïÎÄ½¡£¨Ô­×÷Õß£©
      6          *           Íò±ù±ù£¨ÐÞ¸Ä£©
      7          * ÌØ±ðÃùÐ»£º¼Í³ÉÊ¦ÐÖ(²©¿Íhttp://blog.chinaaet.com/jihceng0622)
      8          * Ê±    ¼ä£º2012Äê5ÔÂ17ÈÕ
      9          *******************************************************************************/
     10          
     11          #include "KinetisConfig.h"
     12          
     13          #pragma section = ".data"                        // Êý¾ÝÇøÓò
     14          #pragma section = ".data_init"                   // ³õÊ¼»¯Êý¾ÝÇøÓò
     15          #pragma section = ".bss"                         // ·Ç³õÊ¼»¯Êý¾ÝÇøÓò
     16          #pragma section = "CodeRelocate"                 // ÖØ¶¨Î»´úÂëÇø
     17          #pragma section = "CodeRelocateRam"              // ÖØ¶¨Î»RAMÇø
     18          
     19          /* Íâ²¿º¯ÊýÉùÃ÷ */
     20          extern void main(void);                          // ÉùÃ÷ main º¯Êý
     21          #if EN_InitHook_Kinetis != 0
     22            extern void HOOK_BeforeClk_Kinetis(void);
     23            extern void HOOK_AfterClk_Kinetis(void);
     24          #endif
     25          /* ±äÁ¿¶¨Òå */
     26          #if EN_ResetType_Kinetis != 0
     27            KEEP_Data_Kinetis int16u_t ResetType_Kinetis;  // ¸´Î»ÀàÐÍ
     28          #endif
     29          
     30          
     31          #if EN_CoreClkOut_Kinetis != 0
     32          /******************************************************************************* 
     33          * º¯ÊýÃû³Æ£ºOnCoreClk_Out
     34          * Ãè    Êö£ºÓÃPTA6½ÅÊä³öÆµÂÊÎªCoreClockÆµÂÊ1/2µÄÊ±ÖÓÐÅºÅ
     35          *******************************************************************************/
     36          static void OnCoreClk_Out(void)
     37          {
     38              /* Set the trace clock to the core clock frequency */
     39              SIM_SOPT2 |= SIM_SOPT2_TRACECLKSEL_MASK;
     40              /* Enable the TRACE_CLKOUT pin function on PTA6 (alt7 function) */
     41              PORTA_PCR6 = (PORT_PCR_MUX(7));
     42          }
     43          #endif 
     44          
     45          #if EN_FlexClkOut_Kinetis != 0
     46          /******************************************************************************* 
     47          * º¯ÊýÃû³Æ£ºOnFlexClk_Out
     48          * Ãè    Êö£ºÓÃPTC3½ÅÊä³öFlexClock
     49          ********************************************************************************/
     50          static void OnFlexClk_Out(void)
     51          {
     52              /* Enable the clock to the FlexBus module */
     53              SIM_SCGC7 |= SIM_SCGC7_FLEXBUS_MASK;
     54              /* Enable the FB_CLKOUT function on PTC3 (alt5 function) */
     55              PORTC_PCR3 = (PORT_PCR_MUX(5));
     56          }
     57          #endif
     58          
     59          #if EN_ResetType_Kinetis != 0
     60          /*******************************************************************************
     61          * º¯ÊýÃû³Æ£ºReadResetType_Kinetis
     62          * Ãè    Êö£º¶ÁÈ¡¼Ä´æÆ÷ReadResetType_KinetisÒÔÅÐ¶¨ÏµÍ³µÄ¸´Î»ÀàÐÍ
     63          ********************************************************************************/
     64          static void ReadResetType_Kinetis(void)
     65          {
     66              ResetType_Kinetis = MC_SRSH;
     67              ResetType_Kinetis <<= 8;
     68              ResetType_Kinetis |= MC_SRSL;
     69          }
     70          #endif
     71          
     72          /******************************************************************************** 
     73          * º¯ÊýÃû³Æ£ºDisWatchDog_Kinetis
     74          * Ãè    Êö£º½ûÓÃ¿ªÃÅ¹·
     75          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     76          static void DisWatchDog_Kinetis(void)
     77          {
     78              UNLOCK_WatchDog();                              // ½âËø¿ªÃÅ¹· 
   \                     DisWatchDog_Kinetis:
   \   00000000   0x....             LDR.N    R0,??DataTable7  ;; 0x4005200e
   \   00000002   0xF24C 0x5120      MOVW     R1,#+50464
   \   00000006   0x8001             STRH     R1,[R0, #+0]
   \   00000008   0x....             LDR.N    R0,??DataTable7  ;; 0x4005200e
   \   0000000A   0xF64D 0x1128      MOVW     R1,#+55592
   \   0000000E   0x8001             STRH     R1,[R0, #+0]
     79              WDOG_STCTRLH &= ~WDOG_STCTRLH_WDOGEN_MASK;      // ½ûÓÃ¿ªÃÅ¹·
   \   00000010   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40052000
   \   00000012   0x8800             LDRH     R0,[R0, #+0]
   \   00000014   0xF64F 0x71FE      MOVW     R1,#+65534
   \   00000018   0x4008             ANDS     R0,R1,R0
   \   0000001A   0x....             LDR.N    R1,??DataTable7_1  ;; 0x40052000
   \   0000001C   0x8008             STRH     R0,[R1, #+0]
     80          }
   \   0000001E   0x4770             BX       LR               ;; return
     81          
     82          /******************************************************************************** 
     83          * º¯ÊýÃû³Æ£ºSetPLL_Kinetis
     84          * Ãè    Êö£ºÏµÍ³µÄËøÏà»·Éè¶¨£¬ÆäÍê³ÉµÄÖ÷Òª¹¤×÷Îª£ºÉè¶¨CoreClock¡¢BusClock¡¢FlexClock¡¢FlashClock
     85                      (ÉèÖÃµÄ¾ßÌåÆµÂÊÔÚKinetisConfig.hÖÐÅäÖÃ)
     86          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     87          static void SetPLL_Kinetis(void)
     88          {
     89              int32u_t temp_reg;
     90              int8u_t  i;
     91              
     92              // First move to FBE mode
     93              // Enable external oscillator, RANGE=2, HGO=1, EREFS=1, LP=0, IRCS=0
     94              MCG_C2 = MCG_C2_RANGE(1) | MCG_C2_HGO_MASK | MCG_C2_EREFS_MASK;
   \                     SetPLL_Kinetis:
   \   00000000   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40064001
   \   00000002   0x211C             MOVS     R1,#+28
   \   00000004   0x7001             STRB     R1,[R0, #+0]
     95          
     96              // after initialization of oscillator release latched state of oscillator and GPIO
     97              SIM_SCGC4 |= SIM_SCGC4_LLWU_MASK;
   \   00000006   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40048034
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   0000000E   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40048034
   \   00000010   0x6008             STR      R0,[R1, #+0]
     98              LLWU_CS |= LLWU_CS_ACKISO_MASK;
   \   00000012   0x....             LDR.N    R0,??DataTable7_4  ;; 0x4007c008
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000001A   0x....             LDR.N    R1,??DataTable7_4  ;; 0x4007c008
   \   0000001C   0x7008             STRB     R0,[R1, #+0]
     99            
    100              // Select external oscilator and Reference Divider and clear IREFS to start ext osc
    101              // CLKS=2, FRDIV=3, IREFS=0, IRCLKEN=0, IREFSTEN=0
    102              MCG_C1 = MCG_C1_CLKS(2) | MCG_C1_FRDIV(3);
   \   0000001E   0x....             LDR.N    R0,??DataTable7_5  ;; 0x40064000
   \   00000020   0x2198             MOVS     R1,#+152
   \   00000022   0x7001             STRB     R1,[R0, #+0]
    103          
    104              /* if we aren't using an osc input we don't need to wait for the osc to init */
    105              // wait for Reference clock Status bit to clear
    106              while (MCG_S & MCG_S_IREFST_MASK){};
   \                     ??SetPLL_Kinetis_0:
   \   00000024   0x....             LDR.N    R0,??DataTable7_6  ;; 0x40064006
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x06C0             LSLS     R0,R0,#+27
   \   0000002A   0xD4FB             BMI.N    ??SetPLL_Kinetis_0
    107              // Wait for clock status bits to show clock source is ext ref clk
    108              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2){}; 
   \                     ??SetPLL_Kinetis_1:
   \   0000002C   0x....             LDR.N    R0,??DataTable7_6  ;; 0x40064006
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x2802             CMP      R0,#+2
   \   00000038   0xD1F8             BNE.N    ??SetPLL_Kinetis_1
    109          
    110              /* Éè¶¨PLLÊ±ÖÓ */
    111          #if CORE_CLK_Kinetis  <= 110
    112              MCG_C5 = MCG_C5_PRDIV(REF_CLK_Kinetis/2 - 1);     // PLLCLK == 2MHz
   \   0000003A   0x....             LDR.N    R0,??DataTable7_7  ;; 0x40064004
   \   0000003C   0x2107             MOVS     R1,#+7
   \   0000003E   0x7001             STRB     R1,[R0, #+0]
    113          #else
    114            #if   REF_CLK_Kinetis % 3 == 0
    115              MCG_C5 = MCG_C5_PRDIV(REF_CLK_Kinetis/3 - 1);     // PLLCLK == 3MHz 
    116            #elif REF_CLK_Kinetis % 4 == 0
    117              MCG_C5 = MCG_C5_PRDIV(REF_CLK_Kinetis/4 - 1);     // PLLCLK == 4MHz 
    118            #elif REF_CLK_Kinetis % 5 == 0
    119              MCG_C5 = MCG_C5_PRDIV(REF_CLK_Kinetis*2/5 - 1);   // PLLCLK == 2.5MHz 
    120            #endif
    121          #endif 
    122              
    123              // Ensure MCG_C6 is at the reset default of 0. LOLIE disabled,
    124              // PLL disabled, clk monitor disabled, PLL VCO divider is clear 
    125              MCG_C6 = 0x00;
   \   00000040   0x....             LDR.N    R0,??DataTable7_8  ;; 0x40064005
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x7001             STRB     R1,[R0, #+0]
    126          
    127              /* Éè¶¨¸÷Ê±ÖÓµÄ·ÖÆµÊý */
    128              // store present value of FMC_PFAPR
    129              temp_reg = FMC_PFAPR;
   \   00000046   0x....             LDR.N    R0,??DataTable7_9  ;; 0x4001f000
   \   00000048   0x6800             LDR      R0,[R0, #+0]
    130              // set M0PFD through M7PFD to 1 to disable prefetch
    131              FMC_PFAPR |= FMC_PFAPR_M7PFD_MASK | FMC_PFAPR_M6PFD_MASK | FMC_PFAPR_M5PFD_MASK
    132          		 | FMC_PFAPR_M4PFD_MASK | FMC_PFAPR_M3PFD_MASK | FMC_PFAPR_M2PFD_MASK
    133          		 | FMC_PFAPR_M1PFD_MASK | FMC_PFAPR_M0PFD_MASK;
   \   0000004A   0x....             LDR.N    R1,??DataTable7_9  ;; 0x4001f000
   \   0000004C   0x6809             LDR      R1,[R1, #+0]
   \   0000004E   0xF451 0x017F      ORRS     R1,R1,#0xFF0000
   \   00000052   0x....             LDR.N    R2,??DataTable7_9  ;; 0x4001f000
   \   00000054   0x6011             STR      R1,[R2, #+0]
    134              // set clock dividers to desired value  
    135              SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0)       
    136          	          | SIM_CLKDIV1_OUTDIV2(DIV_BusClk_Kinetis - 1) 
    137          		  | SIM_CLKDIV1_OUTDIV3(DIV_FlexClk_Kinetis - 1) 
    138          		  | SIM_CLKDIV1_OUTDIV4(DIV_FlashClk_Kinetis - 1);
   \   00000056   0x....             LDR.N    R1,??DataTable7_10  ;; 0x40048044
   \   00000058   0x....             LDR.N    R2,??DataTable7_11  ;; 0x1130000
   \   0000005A   0x600A             STR      R2,[R1, #+0]
    139              // wait for dividers to change
    140              for (i = 0 ; i < DIV_FlashClk_Kinetis ; i++) {}
   \   0000005C   0x2100             MOVS     R1,#+0
   \   0000005E   0xE000             B.N      ??SetPLL_Kinetis_2
   \                     ??SetPLL_Kinetis_3:
   \   00000060   0x1C49             ADDS     R1,R1,#+1
   \                     ??SetPLL_Kinetis_2:
   \   00000062   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000064   0x2904             CMP      R1,#+4
   \   00000066   0xD3FB             BCC.N    ??SetPLL_Kinetis_3
    141              // re-store original value of FMC_PFAPR
    142              FMC_PFAPR = temp_reg;   
   \   00000068   0x....             LDR.N    R1,??DataTable7_9  ;; 0x4001f000
   \   0000006A   0x6008             STR      R0,[R1, #+0]
    143            
    144              /* ÉèÖÃ±¶ÆµÊý,±¶ÆµÊýÎªVDIV+24 */
    145          #if CORE_CLK_Kinetis  <= 110
    146              MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(CORE_CLK_Kinetis/2 - 24); 
   \   0000006C   0x....             LDR.N    R0,??DataTable7_8  ;; 0x40064005
   \   0000006E   0x2158             MOVS     R1,#+88
   \   00000070   0x7001             STRB     R1,[R0, #+0]
    147          #else
    148            #if   REF_CLK_Kinetis % 3 == 0
    149              MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(CORE_CLK_Kinetis/3 - 24); 
    150            #elif REF_CLK_Kinetis % 4 == 0
    151              MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(CORE_CLK_Kinetis/4 - 24);
    152            #elif REF_CLK_Kinetis % 5 == 0
    153              MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(CORE_CLK_Kinetis*2/5 - 24); 
    154            #endif
    155          #endif
    156            
    157              while (!(MCG_S & MCG_S_PLLST_MASK)){};   // wait for PLL status bit to set
   \                     ??SetPLL_Kinetis_4:
   \   00000072   0x....             LDR.N    R0,??DataTable7_6  ;; 0x40064006
   \   00000074   0x7800             LDRB     R0,[R0, #+0]
   \   00000076   0x0680             LSLS     R0,R0,#+26
   \   00000078   0xD5FB             BPL.N    ??SetPLL_Kinetis_4
    158              while (!(MCG_S & MCG_S_LOCK_MASK)){};    // Wait for LOCK bit to set
   \                     ??SetPLL_Kinetis_5:
   \   0000007A   0x....             LDR.N    R0,??DataTable7_6  ;; 0x40064006
   \   0000007C   0x7800             LDRB     R0,[R0, #+0]
   \   0000007E   0x0640             LSLS     R0,R0,#+25
   \   00000080   0xD5FB             BPL.N    ??SetPLL_Kinetis_5
    159          
    160              // Now running PBE Mode
    161              // Transition into PEE by setting CLKS to 0
    162              // CLKS=0, FRDIV=3, IREFS=0, IRCLKEN=0, IREFSTEN=0
    163              MCG_C1 &= ~MCG_C1_CLKS_MASK;
   \   00000082   0x....             LDR.N    R0,??DataTable7_5  ;; 0x40064000
   \   00000084   0x7800             LDRB     R0,[R0, #+0]
   \   00000086   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   0000008A   0x....             LDR.N    R1,??DataTable7_5  ;; 0x40064000
   \   0000008C   0x7008             STRB     R0,[R1, #+0]
    164          
    165              // Wait for clock status bits to update
    166              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3){};
   \                     ??SetPLL_Kinetis_6:
   \   0000008E   0x....             LDR.N    R0,??DataTable7_6  ;; 0x40064006
   \   00000090   0x7800             LDRB     R0,[R0, #+0]
   \   00000092   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   00000096   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000098   0x2803             CMP      R0,#+3
   \   0000009A   0xD1F8             BNE.N    ??SetPLL_Kinetis_6
    167          } 
   \   0000009C   0x4770             BX       LR               ;; return
    168          
    169          /*******************************************************************************
    170          * º¯ÊýÃû³Æ£ºOnGPIOClk_Kinetis
    171          * Ãè    Êö£ºÊ¹ÄÜGPIOÊ±ÖÓ 
    172          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    173          static void OnGPIOClk_Kinetis(void)
    174          {
    175              /* Ê¹ÄÜIO¿ÚÊ±ÖÓ */
    176              SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK | SIM_SCGC5_PORTB_MASK
    177          		 | SIM_SCGC5_PORTC_MASK | SIM_SCGC5_PORTD_MASK
    178          		 | SIM_SCGC5_PORTE_MASK ;
   \                     OnGPIOClk_Kinetis:
   \   00000000   0x....             LDR.N    R0,??DataTable7_12  ;; 0x40048038
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x5078      ORRS     R0,R0,#0x3E00
   \   00000008   0x....             LDR.N    R1,??DataTable7_12  ;; 0x40048038
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    179          }
   \   0000000C   0x4770             BX       LR               ;; return
    180          
    181          /******************************************************************************* 
    182          * º¯ÊýÃû³Æ£ºInit_Clock_Kinetis
    183          * Ãè    Êö£º³õÊ¼»¯ÏµÍ³Ê±ÖÓ,ÆäÍê³ÉµÄÖ÷Òª¹¤×÷ÓÐ£ºÉèÖÃÏµÍ³Ê±ÖÓ¡¢Ê¹ÄÜÍâ²¿»ù×¼Ê±ÖÓ¡¢½«ÏµÍ³Ê±ÖÓÍ¨¹ýIO¿ÚÊä³ö(¿ÉÑ¡) 
    184          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    185          static void Init_Clock_Kinetis(void)
    186          {      
   \                     Init_Clock_Kinetis:
   \   00000000   0xB580             PUSH     {R7,LR}
    187              SetPLL_Kinetis();                   // Éè¶¨ÏµÍ³Ê±ÖÓ 
   \   00000002   0x.... 0x....      BL       SetPLL_Kinetis
    188              OSC_CR |= OSC_CR_ERCLKEN_MASK;      // Ê¹ÄÜÍâ²¿»ù×¼Ê±ÖÓ(ºÜ¶àÄ£¿éÐèÒªÓÃµ½¸ÃÊ±ÖÓ)
   \   00000006   0x....             LDR.N    R0,??DataTable7_13  ;; 0x40065000
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000000E   0x....             LDR.N    R1,??DataTable7_13  ;; 0x40065000
   \   00000010   0x7008             STRB     R0,[R1, #+0]
    189          	
    190          #if  EN_CoreClkOut_Kinetis != 0
    191              OnCoreClk_Out();                    // ÓÃPTA6Êä³öCoreClock/2
    192          #endif
    193          	
    194          #if EN_FlexClkOut_Kinetis != 0	
    195              OnFlexClk_Out();                    // ÓÃPTC3Êä³öFlexClock 
    196          #endif
    197          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    198          
    199          /*******************************************************************************
    200          * º¯ÊýÃû³Æ£ºClearBss_Kinetis
    201          * Ãè    Êö£º½«"BSS"Êý¾ÝÇø³õÊ¼»¯Îª0
    202          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    203          static void ClearBss_Kinetis(void)
    204          { 
    205              int32u_t n = 0;  
   \                     ClearBss_Kinetis:
   \   00000000   0x2000             MOVS     R0,#+0
    206            
    207              /* Get the addresses for the .bss section (zero-initialized data) */
    208              int8u_t* __BSS_START = __section_begin(".bss");
   \   00000002   0x....             LDR.N    R1,??DataTable7_14
    209              int8u_t* __BSS_END = __section_end(".bss");
   \   00000004   0x....             LDR.N    R2,??DataTable7_15
    210              
    211              /* Clear the zero-initialized data section */
    212              n = __BSS_END - __BSS_START;
   \   00000006   0x1A52             SUBS     R2,R2,R1
   \   00000008   0x0010             MOVS     R0,R2
   \   0000000A   0xE002             B.N      ??ClearBss_Kinetis_0
    213              while(n--)
    214                *__BSS_START++ = 0;   
   \                     ??ClearBss_Kinetis_1:
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x700A             STRB     R2,[R1, #+0]
   \   00000010   0x1C49             ADDS     R1,R1,#+1
   \                     ??ClearBss_Kinetis_0:
   \   00000012   0x0002             MOVS     R2,R0
   \   00000014   0x1E50             SUBS     R0,R2,#+1
   \   00000016   0x2A00             CMP      R2,#+0
   \   00000018   0xD1F8             BNE.N    ??ClearBss_Kinetis_1
    215          }
   \   0000001A   0x4770             BX       LR               ;; return
    216          
    217          /******************************************************************************* 
    218          * º¯ÊýÃû³Æ£ºRomToRam_Kinetis
    219          * Ãè    Êö£º½«²¿·ÖROMÖÐµÄÊý¾Ý×ªÒÆÖÁRAMÖÐ
    220          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    221          static void RomToRam_Kinetis(void)
    222          {
    223              int32u_t n = 0;
   \                     RomToRam_Kinetis:
   \   00000000   0x2000             MOVS     R0,#+0
    224          
    225              /* Get the addresses for the .data section (initialized data section) */
    226              int8u_t* __DATA_RAM = __section_begin(".data");
   \   00000002   0x....             LDR.N    R1,??DataTable7_16
    227              int8u_t* __DATA_ROM = __section_begin(".data_init");
   \   00000004   0x....             LDR.N    R2,??DataTable7_17
    228              int8u_t* __DATA_ROM_END = __section_end(".data_init");
   \   00000006   0x....             LDR.N    R3,??DataTable7_18
    229              
    230              /* Copy initialized data from ROM to RAM */
    231              n = __DATA_ROM_END - __DATA_ROM;
   \   00000008   0x1A9B             SUBS     R3,R3,R2
   \   0000000A   0x0018             MOVS     R0,R3
   \   0000000C   0xE003             B.N      ??RomToRam_Kinetis_0
    232              while(n--)
    233                *__DATA_RAM++ = *__DATA_ROM++;
   \                     ??RomToRam_Kinetis_1:
   \   0000000E   0x7813             LDRB     R3,[R2, #+0]
   \   00000010   0x700B             STRB     R3,[R1, #+0]
   \   00000012   0x1C52             ADDS     R2,R2,#+1
   \   00000014   0x1C49             ADDS     R1,R1,#+1
   \                     ??RomToRam_Kinetis_0:
   \   00000016   0x0003             MOVS     R3,R0
   \   00000018   0x1E58             SUBS     R0,R3,#+1
   \   0000001A   0x2B00             CMP      R3,#+0
   \   0000001C   0xD1F7             BNE.N    ??RomToRam_Kinetis_1
    234          }
   \   0000001E   0x4770             BX       LR               ;; return
    235          
    236          /******************************************************************************* 
    237          * º¯ÊýÃû³Æ£ºCodeRelocate_Kinetis
    238          * Ãè    Êö£º¸´ÖÆÒÔ__ramfuncÉùÃ÷µÄ×Óº¯Êýµ½RAMÇø£¨CodeRelocateºÍCodeRelocateRamÕâÁ½¸ö¶¼¿ÉÒÔÔÚ.icfÎÄ¼þÀïÕÒµ½)
    239          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    240          static void CodeRelocate_Kinetis(void)
    241          {
    242              int32u_t n = 0;
   \                     CodeRelocate_Kinetis:
   \   00000000   0x2000             MOVS     R0,#+0
    243            
    244              /* Get addresses for any code sections that need to be copied from ROM to RAM.
    245               * The IAR tools have a predefined keyword that can be used to mark individual
    246               * functions for execution from RAM. Add "__ramfunc" before the return type in
    247               * the function prototype for any routines you need to execute from RAM instead 
    248               * of ROM. ex: __ramfunc void foo(void);
    249              */
    250              int8u_t* __CODE_RELOCATE_RAM = __section_begin("CodeRelocateRam");
   \   00000002   0x....             LDR.N    R1,??DataTable7_19
    251              int8u_t* __CODE_RELOCATE = __section_begin("CodeRelocate");
   \   00000004   0x....             LDR.N    R2,??DataTable7_20
    252              int8u_t* __CODE_RELOCATE_END = __section_end("CodeRelocate");
   \   00000006   0x....             LDR.N    R3,??DataTable7_21
    253              
    254              /* Copy functions from ROM to RAM */
    255              n = __CODE_RELOCATE_END - __CODE_RELOCATE;
   \   00000008   0x1A9B             SUBS     R3,R3,R2
   \   0000000A   0x0018             MOVS     R0,R3
   \   0000000C   0xE003             B.N      ??CodeRelocate_Kinetis_0
    256              while(n--)
    257                *__CODE_RELOCATE_RAM++ = *__CODE_RELOCATE++;    
   \                     ??CodeRelocate_Kinetis_1:
   \   0000000E   0x7813             LDRB     R3,[R2, #+0]
   \   00000010   0x700B             STRB     R3,[R1, #+0]
   \   00000012   0x1C52             ADDS     R2,R2,#+1
   \   00000014   0x1C49             ADDS     R1,R1,#+1
   \                     ??CodeRelocate_Kinetis_0:
   \   00000016   0x0003             MOVS     R3,R0
   \   00000018   0x1E58             SUBS     R0,R3,#+1
   \   0000001A   0x2B00             CMP      R3,#+0
   \   0000001C   0xD1F7             BNE.N    ??CodeRelocate_Kinetis_1
    258          }
   \   0000001E   0x4770             BX       LR               ;; return
    259          
    260          /*******************************************************************************
    261          * º¯ÊýÃû³Æ£ºInit_VTOR_Kinetis
    262          * Ãè    Êö£º³õÊ¼»¯ÖÐ¶ÏÏòÁ¿±í,½«ÏµÍ³Ä¬ÈÏµÄÖÐ¶ÏÏòÁ¿±í¸ÄÎª×Ô¶¨ÒÔµÄÖÐ¶ÏÏòÁ¿±í 
    263          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    264          static void Init_VTOR_Kinetis(void)
    265          {     
   \                     Init_VTOR_Kinetis:
   \   00000000   0xB510             PUSH     {R4,LR}
    266              /* Addresses for VECTOR_TABLE and VECTOR_RAM come from the linker file */  
    267              extern int32u_t __VECTOR_TABLE[];          // ÔÚ *.icf ÎÄ¼þÖÐ¶¨Òå
    268              extern int32u_t __VECTOR_RAM[];            // ÔÚ *.icf ÎÄ¼þÖÐ¶¨Òå
    269              
    270              int32u_t n = 0;
   \   00000002   0x2000             MOVS     R0,#+0
    271              int32u_t *ptr1 , *ptr2;
    272              
    273              n = 120;
   \   00000004   0x2178             MOVS     R1,#+120
   \   00000006   0x0008             MOVS     R0,R1
    274              ptr1 = __VECTOR_RAM;
   \   00000008   0x....             LDR.N    R1,??DataTable7_22
    275              ptr2 = __VECTOR_TABLE;
   \   0000000A   0x....             LDR.N    R2,??DataTable7_23
    276              if (__VECTOR_RAM != __VECTOR_TABLE)        // ½«ÖÐ¶ÏÏòÁ¿±í¸´ÖÆµ½ RAM ÖÐ
   \   0000000C   0x....             LDR.N    R3,??DataTable7_22
   \   0000000E   0x....             LDR.N    R4,??DataTable7_23
   \   00000010   0x42A3             CMP      R3,R4
   \   00000012   0xD008             BEQ.N    ??Init_VTOR_Kinetis_0
   \   00000014   0xE003             B.N      ??Init_VTOR_Kinetis_1
    277              {
    278                  while(n--)
    279                    *ptr1++ = *ptr2++;
   \                     ??Init_VTOR_Kinetis_2:
   \   00000016   0x6813             LDR      R3,[R2, #+0]
   \   00000018   0x600B             STR      R3,[R1, #+0]
   \   0000001A   0x1D12             ADDS     R2,R2,#+4
   \   0000001C   0x1D09             ADDS     R1,R1,#+4
   \                     ??Init_VTOR_Kinetis_1:
   \   0000001E   0x0003             MOVS     R3,R0
   \   00000020   0x1E58             SUBS     R0,R3,#+1
   \   00000022   0x2B00             CMP      R3,#+0
   \   00000024   0xD1F7             BNE.N    ??Init_VTOR_Kinetis_2
    280              }
    281              /* Point the VTOR to the new copy of the vector table */
    282              WriteVTOR_Kinetis((int32u_t)__VECTOR_RAM);
   \                     ??Init_VTOR_Kinetis_0:
   \   00000026   0x....             LDR.N    R0,??DataTable7_22
   \   00000028   0x.... 0x....      BL       WriteVTOR_Kinetis
    283          }
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
    284          
    285          /*******************************************************************************
    286          * º¯ÊýÃû³Æ£ºStartUp_Kinetis
    287          * Ãè    Êö£ºKinetisµÄÆô¶¯´úÂë
    288          *           ¼´ÏµÍ³ÉÏµçÊ±´¦ÀíÆ÷Ö´ÐÐµÄµÚÒ»¶Î´úÂë,¸ºÔðÍê³ÉARMËù±ØÐëµÄ³õÊ¼»¯²Ù×÷,²¢Ìø×ªµ½ÓÃ»§µÄÈë¿Ú³ÌÐò
    289          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    290          void StartUp_Kinetis(void)
    291          {
   \                     StartUp_Kinetis:
   \   00000000   0xB580             PUSH     {R7,LR}
    292              DisableInterrupts();                  // ¹ØÖÐ¶Ï    
   \   00000002   0xB672             CPSID i          
    293              DisWatchDog_Kinetis();                // ½ûÓÃ¿´ÃÅ¹·  
   \   00000004   0x.... 0x....      BL       DisWatchDog_Kinetis
    294              OnGPIOClk_Kinetis();                  // ¿ªÆôGPIOÊ±ÖÓ 
   \   00000008   0x.... 0x....      BL       OnGPIOClk_Kinetis
    295              
    296          #if EN_InitHook_Kinetis != 0      
    297              HOOK_BeforeClk_Kinetis();             // Ö´ÐÐÓÃ»§¶¨ÒåµÄ³õÊ¼»¯½Ó¿Ú 
    298          #endif
    299          	
    300              Init_Clock_Kinetis();                 // ³õÊ¼»¯ÏµÍ³Ê±ÖÓ 
   \   0000000C   0x.... 0x....      BL       Init_Clock_Kinetis
    301          	
    302          #if EN_InitHook_Kinetis != 0
    303              HOOK_AfterClk_Kinetis();              // Ö´ÐÐÓÃ»§¶¨ÒåµÄ³õÊ¼»¯½Ó¿Ú 
    304          #endif	
    305            
    306          #if EN_ResetType_Kinetis != 0  
    307              ReadResetType_Kinetis();              // ¶ÁÈ¡¸´Î»ÀàÐÍ 
    308          #endif	
    309            
    310              RomToRam_Kinetis();                   // ½«²¿·ÖROMÖÐµÄÊý¾Ý×ªÒÆµ½RAMÖÐ
   \   00000010   0x.... 0x....      BL       RomToRam_Kinetis
    311              CodeRelocate_Kinetis();               // ¸´ÖÆÒÔ__ramfuncÉùÃ÷µÄ×Óº¯Êýµ½RAMÇø
   \   00000014   0x.... 0x....      BL       CodeRelocate_Kinetis
    312              ClearBss_Kinetis();                   // ÇåÁãBSSÇøÓò 
   \   00000018   0x.... 0x....      BL       ClearBss_Kinetis
    313              Init_VTOR_Kinetis();                  // ³õÊ¼»¯ÖÐ¶ÏÏòÁ¿±í     
   \   0000001C   0x.... 0x....      BL       Init_VTOR_Kinetis
    314          		
    315              main();                               // Ìø×ªµ½mainº¯Êý 
   \   00000020   0x.... 0x....      BL       main
    316              while(1);                             // ³ÌÐò²»»áÖ´ÐÐµ½ÕâÀï
   \                     ??StartUp_Kinetis_0:
   \   00000024   0xE7FE             B.N      ??StartUp_Kinetis_0
    317          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x4005200E         DC32     0x4005200e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x40052000         DC32     0x40052000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x40064001         DC32     0x40064001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x4007C008         DC32     0x4007c008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x40064000         DC32     0x40064000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x40064006         DC32     0x40064006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x40064004         DC32     0x40064004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x40064005         DC32     0x40064005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x4001F000         DC32     0x4001f000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x40048044         DC32     0x40048044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x01130000         DC32     0x1130000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x40065000         DC32     0x40065000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   0x........         DC32     SFB(`.bss`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \   00000000   0x........         DC32     SFE(`.bss`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \   00000000   0x........         DC32     SFB(`.data`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \   00000000   0x........         DC32     SFB(`.data_init`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \   00000000   0x........         DC32     SFE(`.data_init`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \   00000000   0x........         DC32     SFB(CodeRelocateRam)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_20:
   \   00000000   0x........         DC32     SFB(CodeRelocate)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_21:
   \   00000000   0x........         DC32     SFE(CodeRelocate)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_22:
   \   00000000   0x........         DC32     __VECTOR_RAM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_23:
   \   00000000   0x........         DC32     __VECTOR_TABLE

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  ClearBss_Kinetis
        0  CodeRelocate_Kinetis
        0  DisWatchDog_Kinetis
        8  Init_Clock_Kinetis
             8 -> SetPLL_Kinetis
        8  Init_VTOR_Kinetis
             8 -> WriteVTOR_Kinetis
        0  OnGPIOClk_Kinetis
        0  RomToRam_Kinetis
        0  SetPLL_Kinetis
        8  StartUp_Kinetis
             8 -> ClearBss_Kinetis
             8 -> CodeRelocate_Kinetis
             8 -> DisWatchDog_Kinetis
             8 -> Init_Clock_Kinetis
             8 -> Init_VTOR_Kinetis
             8 -> OnGPIOClk_Kinetis
             8 -> RomToRam_Kinetis
             8 -> main


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_21
       4  ??DataTable7_22
       4  ??DataTable7_23
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      28  ClearBss_Kinetis
      32  CodeRelocate_Kinetis
      32  DisWatchDog_Kinetis
      20  Init_Clock_Kinetis
      46  Init_VTOR_Kinetis
      14  OnGPIOClk_Kinetis
      32  RomToRam_Kinetis
     158  SetPLL_Kinetis
      38  StartUp_Kinetis

 
 496 bytes in section .text
 
 496 bytes of CODE memory

Errors: none
Warnings: none
