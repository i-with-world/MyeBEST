###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     05/May/2015  18:17:06 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\Drivers\ #
#                    FTM\ftm.c                                                #
#    Command line =  E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\Drivers\ #
#                    FTM\ftm.c -D IAR -lCN E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª² #
#                    î¿ª»·\Flash_512K\List\ -lB E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3 #
#                    ºÅ×ª²î¿ª»·\Flash_512K\List\ -o                           #
#                    E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Flash_512K\Obj\  #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --char_is_signed      #
#                    --fpu=None --dlib_config "D:\Program Files               #
#                    (x86)\IAR\arm\INC\c\DLib_Config_Normal.h" -I             #
#                    E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\CPU\ -I  #
#                    E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\Drivers\ #
#                    ADC\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\ #
#                    Drivers\FTM\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\ #
#                    Library\Drivers\GPIO\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ #
#                    ×ª²î¿ª»·\Library\Drivers\PIT\ -I                         #
#                    E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\Drivers\ #
#                    I2C\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\ #
#                    Drivers\UART\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»· #
#                    \Library\Drivers\FTFL\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3º #
#                    Å×ª²î¿ª»·\MyFunction\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ #
#                    ×ª²î¿ª»·\SD_System\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª #
#                    ²î¿ª»·\Delay\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»· #
#                    \System_Init\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»· #
#                    \OLED\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\ZLG729 #
#                    0\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Simple_AD\ #
#                     -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Make_Desicio #
#                    n\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Make_Desic #
#                    ion\Judge_Way\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª» #
#                    ·\Make_Desicion\Speed_Control\ -I                        #
#                    E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Source\ -I       #
#                    E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Peripheral_Opara #
#                    tion\ -I E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Balance #
#                    _control\ -Ol                                            #
#    List file    =  E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Flash_512K\List\ #
#                    ftm.lst                                                  #
#    Object file  =  E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Flash_512K\Obj\f #
#                    tm.o                                                     #
#                                                                             #
#                                                                             #
###############################################################################

E:\2014ÖÇÄÜ³µ\ÖÇÄÜ³µ³ÌÐò\5ÔÂ3ºÅ×ª²î¿ª»·\Library\Drivers\FTM\ftm.c
      1          /*****************************************************************
      2          * ÎÄ¼þÃû³Æ£ºftm.c
      3          * Ãè    Êö: FTM(¶à¹¦ÄÜ¶¨Ê±Æ÷Ä£¿é,°üÀ¨PWMÊä³ö¡¢ÊäÈë²¶×½¡¢Êä³ö±È½Ï¡¢
      4                      ¶¨Ê±ÖÐ¶Ï¡¢Âö³å¼Ó¼õ¼ÆÊý¡¢Âö³åÖÜÆÚÂö¿í²âÁ¿)£¬±¾ÎÄ¼þÖ»º¬
      5                      PWMºÍÕý½»½âÂëÇý¶¯³ÌÐò(²Î¿¼ËïÎÄ½¡PWM³õÊ¼»¯³ÌÐò)
      6          * ×÷    Õß£ºÍò±ù±ù
      7          * ÌØ±ðÃùÐ»£º¼Í³ÉÊ¦ÐÖ(²©¿Íhttp://blog.chinaaet.com/jihceng0622)
      8          * Ê±    ¼ä£º2012Äê5ÔÂ21ÈÕ
      9          *****************************************************************/
     10          
     11          #include "ftm.h"
     12          
     13          
     14          /**********************************************************************************
     15          * º¯ÊýÃû³Æ£ºFTM_initPWM
     16          * Èë¿Ú²ÎÊý£ºftm    FTMÄ£¿é
     17                              FTM0
     18                              FTM1
     19                              FTM2
     20                      clks  FTMÊ±ÖÓÔ´Ñ¡Ôñ
     21                              00 No clock selected (This in effect disables the FTM counter.)
     22                              01 System clock(¼´Bus Clock)
     23                              10 Fixed frequency clock
     24                              11 External clock
     25                      div   Ê±ÖÓ·ÖÆµÊý
     26                              000 Divide by 1
     27                              001 Divide by 2
     28                              010 Divide by 4
     29                              011 Divide by 8
     30                              100 Divide by 16
     31                              101 Divide by 32
     32                              110 Divide by 64
     33                              111 Divide by 128                 
     34          * Ãè    Êö£ºPWM»ù´¡³õÊ¼»¯
     35          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     36          void FTM_initPWM(FTM_MemMapPtr ftm, int8u_t clks, int8u_t div)
     37          {
   \                     FTM_initPWM:
   \   00000000   0xB410             PUSH     {R4}
     38            if(ftm == FTM0)
   \   00000002   0x....             LDR.N    R3,??DataTable1  ;; 0x40038000
   \   00000004   0x4298             CMP      R0,R3
   \   00000006   0xD106             BNE.N    ??FTM_initPWM_0
     39            {
     40              SIM_SCGC6 |= SIM_SCGC6_FTM0_MASK;                       // Ê¹ÄÜFTM0Ê±ÖÓ 
   \   00000008   0x....             LDR.N    R3,??DataTable1_1  ;; 0x4004803c
   \   0000000A   0x681B             LDR      R3,[R3, #+0]
   \   0000000C   0xF053 0x7380      ORRS     R3,R3,#0x1000000
   \   00000010   0x....             LDR.N    R4,??DataTable1_1  ;; 0x4004803c
   \   00000012   0x6023             STR      R3,[R4, #+0]
   \   00000014   0xE012             B.N      ??FTM_initPWM_1
     41            }
     42            else if(ftm == FTM1)
   \                     ??FTM_initPWM_0:
   \   00000016   0x....             LDR.N    R3,??DataTable1_2  ;; 0x40039000
   \   00000018   0x4298             CMP      R0,R3
   \   0000001A   0xD106             BNE.N    ??FTM_initPWM_2
     43            {
     44              SIM_SCGC6 |= SIM_SCGC6_FTM1_MASK;                       // Ê¹ÄÜFTM1Ê±ÖÓ 
   \   0000001C   0x....             LDR.N    R3,??DataTable1_1  ;; 0x4004803c
   \   0000001E   0x681B             LDR      R3,[R3, #+0]
   \   00000020   0xF053 0x7300      ORRS     R3,R3,#0x2000000
   \   00000024   0x....             LDR.N    R4,??DataTable1_1  ;; 0x4004803c
   \   00000026   0x6023             STR      R3,[R4, #+0]
   \   00000028   0xE008             B.N      ??FTM_initPWM_1
     45            }
     46            else if(ftm == FTM2)
   \                     ??FTM_initPWM_2:
   \   0000002A   0x....             LDR.N    R3,??DataTable1_3  ;; 0x400b8000
   \   0000002C   0x4298             CMP      R0,R3
   \   0000002E   0xD105             BNE.N    ??FTM_initPWM_1
     47            {
     48              SIM_SCGC3 |= SIM_SCGC3_FTM2_MASK;                       // Ê¹ÄÜFTM2Ê±ÖÓ 
   \   00000030   0x....             LDR.N    R3,??DataTable1_4  ;; 0x40048030
   \   00000032   0x681B             LDR      R3,[R3, #+0]
   \   00000034   0xF053 0x7380      ORRS     R3,R3,#0x1000000
   \   00000038   0x....             LDR.N    R4,??DataTable1_4  ;; 0x40048030
   \   0000003A   0x6023             STR      R3,[R4, #+0]
     49            }
     50            FTM_MODE_REG(ftm) |= FTM_MODE_WPDIS_MASK;                 // ½ûÓÃÐ´±£»¤
   \                     ??FTM_initPWM_1:
   \   0000003C   0x6D43             LDR      R3,[R0, #+84]
   \   0000003E   0xF053 0x0304      ORRS     R3,R3,#0x4
   \   00000042   0x6543             STR      R3,[R0, #+84]
     51            FTM_SC_REG(ftm) &= ~FTM_SC_CLKS_MASK;                     // ½«CLK[1:0]ÉèÎª0:0 
   \   00000044   0x6803             LDR      R3,[R0, #+0]
   \   00000046   0xF033 0x0318      BICS     R3,R3,#0x18
   \   0000004A   0x6003             STR      R3,[R0, #+0]
     52            FTM_SC_REG(ftm) &= ~FTM_SC_PS_MASK;                       // ½«PS[2:0]ÉèÎª0:0:0
   \   0000004C   0x6803             LDR      R3,[R0, #+0]
   \   0000004E   0x08DB             LSRS     R3,R3,#+3
   \   00000050   0x00DB             LSLS     R3,R3,#+3
   \   00000052   0x6003             STR      R3,[R0, #+0]
     53            FTM_QDCTRL_REG(ftm) &= ~FTM_QDCTRL_QUADEN_MASK;           // ½ûÖ¹Õý½»½âÂëÄ£Ê½
   \   00000054   0xF8D0 0x3080      LDR      R3,[R0, #+128]
   \   00000058   0x085B             LSRS     R3,R3,#+1
   \   0000005A   0x005B             LSLS     R3,R3,#+1
   \   0000005C   0xF8C0 0x3080      STR      R3,[R0, #+128]
     54            FTM_OUTINIT_REG(ftm) = 0;                                 // ¸÷Í¨µÀ³õÊ¼»¯Ê±µÄÊä³öÎª"0" 
   \   00000060   0x2300             MOVS     R3,#+0
   \   00000062   0x65C3             STR      R3,[R0, #+92]
     55            FTM_OUTMASK_REG(ftm) = 0x0FF;                             // ÆÁ±ÎËùÓÐÍ¨µÀ
   \   00000064   0x23FF             MOVS     R3,#+255
   \   00000066   0x6603             STR      R3,[R0, #+96]
     56            
     57            FTM_SC_REG(ftm) = FTM_SC_CLKS(clks) + FTM_SC_PS(div);     // ½ûÖ¹ÖÐ¶Ï£¬µÝÔö¼ÆÊý£¬Ê¼ÖÕÀ´Ô´clks£¬·ÖÆµÊýdiv
   \   00000068   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006A   0x00C9             LSLS     R1,R1,#+3
   \   0000006C   0xF011 0x0118      ANDS     R1,R1,#0x18
   \   00000070   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000072   0xF012 0x0207      ANDS     R2,R2,#0x7
   \   00000076   0x1851             ADDS     R1,R2,R1
   \   00000078   0x6001             STR      R1,[R0, #+0]
     58          }
   \   0000007A   0xBC10             POP      {R4}
   \   0000007C   0x4770             BX       LR               ;; return
     59          
     60          /**********************************************************************************
     61          * º¯ÊýÃû³Æ£ºFTM_enablePWMCh
     62          * Èë¿Ú²ÎÊý£ºftm     FTMÄ£¿é
     63                               FTM0
     64                               FTM1
     65                               FTM2
     66                      channel PWMÍ¨µÀºÅ
     67                      st      ¼ÆÊýÆ÷¼ÆÊýÆðÊ¼Öµ
     68                      end     ¼ÆÊýÆ÷ÖÕÖ¹Öµ(ÖÜÆÚ = end-st+1)
     69                      dty     Âö¿í(Õ¼¿Õ±È = wid/(end+1-st))
     70          * Ãè    Êö£ºÉèÖÃPWMÍ¨µÀ²ÎÊý,PWM¿ªÊ¼¹¤×÷
     71          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     72          void FTM_enablePWMCh(FTM_MemMapPtr ftm, int8u_t channel, int16u_t st, int16u_t end, int16u_t dty)
     73          {
   \                     FTM_enablePWMCh:
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x9C03             LDR      R4,[SP, #+12]
     74            FTM_CnSC_REG(ftm,channel) &= ~FTM_CnSC_ELSA_MASK;       // ELSA=0£¬ELSB=1£¬×ó¶ÔÆë£¬ÏÈ¸ßºóµÍ
   \   00000004   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   0xEB10 0x05C1      ADDS     R5,R0,R1, LSL #+3
   \   0000000A   0x68ED             LDR      R5,[R5, #+12]
   \   0000000C   0xF035 0x0504      BICS     R5,R5,#0x4
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0xEB10 0x06C1      ADDS     R6,R0,R1, LSL #+3
   \   00000016   0x60F5             STR      R5,[R6, #+12]
     75            FTM_CnSC_REG(ftm,channel) |= FTM_CnSC_ELSB_MASK;  
   \   00000018   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001A   0xEB10 0x05C1      ADDS     R5,R0,R1, LSL #+3
   \   0000001E   0x68ED             LDR      R5,[R5, #+12]
   \   00000020   0xF055 0x0508      ORRS     R5,R5,#0x8
   \   00000024   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000026   0xEB10 0x06C1      ADDS     R6,R0,R1, LSL #+3
   \   0000002A   0x60F5             STR      R5,[R6, #+12]
     76            FTM_CnSC_REG(ftm,channel) |= FTM_CnSC_MSB_MASK;         // MSB=1£¬Ä£Ê½Ñ¡Ôñ±ßÑØ¶ÔÆë
   \   0000002C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002E   0xEB10 0x05C1      ADDS     R5,R0,R1, LSL #+3
   \   00000032   0x68ED             LDR      R5,[R5, #+12]
   \   00000034   0xF055 0x0520      ORRS     R5,R5,#0x20
   \   00000038   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003A   0xEB10 0x06C1      ADDS     R6,R0,R1, LSL #+3
   \   0000003E   0x60F5             STR      R5,[R6, #+12]
     77            
     78            FTM_OUTMASK_REG(ftm) &= ~((int32u_t)(1)<<channel);      // ½â³ýµ±Ç°Í¨µÀÆÁ±Î
   \   00000040   0x6E05             LDR      R5,[R0, #+96]
   \   00000042   0x2601             MOVS     R6,#+1
   \   00000044   0x408E             LSLS     R6,R6,R1
   \   00000046   0x43B5             BICS     R5,R5,R6
   \   00000048   0x6605             STR      R5,[R0, #+96]
     79            FTM_CNTIN_REG(ftm) = st;                                // ÉèÖÃ¼ÆÊýÆðÊ¼Öµ
   \   0000004A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000004C   0x64C2             STR      R2,[R0, #+76]
     80            FTM_MOD_REG(ftm) = end;                                 // ÉèÖÃ¼ÆÊýÖÕÖ¹Öµ
   \   0000004E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000050   0x6083             STR      R3,[R0, #+8]
     81            FTM_CnV_REG(ftm,channel) = dty;                         // ÉèÖÃµçÆ½·´×ªÖµ
   \   00000052   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000054   0xEB10 0x01C1      ADDS     R1,R0,R1, LSL #+3
   \   00000058   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000005A   0x610C             STR      R4,[R1, #+16]
     82            FTM_CNT_REG(ftm) = 0;                                   // ÇåÁã¼ÆÊýÆ÷
   \   0000005C   0x2100             MOVS     R1,#+0
   \   0000005E   0x6041             STR      R1,[R0, #+4]
     83          
     84            FTM_MODE_REG(ftm) &= ~FTM_MODE_FTMEN_MASK;              //FTMÊ¹ÄÜ
   \   00000060   0x6D41             LDR      R1,[R0, #+84]
   \   00000062   0x0849             LSRS     R1,R1,#+1
   \   00000064   0x0049             LSLS     R1,R1,#+1
   \   00000066   0x6541             STR      R1,[R0, #+84]
     85          }
   \   00000068   0xBC70             POP      {R4-R6}
   \   0000006A   0x4770             BX       LR               ;; return
     86          
     87          /**********************************************************************************
     88          * º¯ÊýÃû³Æ£ºFTM_setPWMDty
     89          * Èë¿Ú²ÎÊý£ºftm     FTMÄ£¿é
     90                               FTM0
     91                               FTM1
     92                               FTM2
     93                      channel PWMÍ¨µÀºÅ
     94                      dty     Âö¿í(Õ¼¿Õ±È = (wid+1)/(end+1-st))
     95          * Ãè    Êö£ºÉèÖÃPWMÕ¼¿Õ±È
     96          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     97          void FTM_setPWMDty(FTM_MemMapPtr ftm, int8u_t channel, int16u_t dty)
     98          {
     99            FTM_CnV_REG(ftm,channel) = dty;                         // ÉèÖÃµçÆ½·´×ªÖµ  
   \                     FTM_setPWMDty:
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0xEB10 0x00C1      ADDS     R0,R0,R1, LSL #+3
   \   00000006   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000008   0x6102             STR      R2,[R0, #+16]
    100          }
   \   0000000A   0x4770             BX       LR               ;; return
    101          
    102          /**********************************************************************************
    103          * º¯ÊýÃû³Æ£ºFTM_initQUAD
    104          * Èë¿Ú²ÎÊý£ºftm    FTMÄ£¿é
    105                               FTM0
    106                               FTM1
    107                               FTM2
    108                      mod    Õý½»½âÂëÄ£Ê½
    109                              0 Phase A and phase B encoding mode.
    110                              1 Count and direction encoding mode.
    111                      st     ¼ÆÊýÆ÷¼ÆÊýÆðÊ¼Öµ
    112                      end    ¼ÆÊýÆ÷ÖÕÖ¹Öµ
    113          * Ãè    Êö£ºÕý½»½âÂë¹¦ÄÜÉèÖÃ
    114          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    115          void FTM_initQUAD(FTM_MemMapPtr ftm,int8u_t mod, int16s_t st, int16u_t end)
    116          {
   \                     FTM_initQUAD:
   \   00000000   0xB430             PUSH     {R4,R5}
    117            if(ftm == FTM1)
   \   00000002   0x....             LDR.N    R4,??DataTable1_2  ;; 0x40039000
   \   00000004   0x42A0             CMP      R0,R4
   \   00000006   0xD106             BNE.N    ??FTM_initQUAD_0
    118            {
    119              SIM_SCGC6 |= SIM_SCGC6_FTM1_MASK;                     // Ê¹ÄÜFTM1Ê±ÖÓ 
   \   00000008   0x....             LDR.N    R4,??DataTable1_1  ;; 0x4004803c
   \   0000000A   0x6824             LDR      R4,[R4, #+0]
   \   0000000C   0xF054 0x7400      ORRS     R4,R4,#0x2000000
   \   00000010   0x....             LDR.N    R5,??DataTable1_1  ;; 0x4004803c
   \   00000012   0x602C             STR      R4,[R5, #+0]
   \   00000014   0xE008             B.N      ??FTM_initQUAD_1
    120            }
    121            else if(ftm == FTM2)
   \                     ??FTM_initQUAD_0:
   \   00000016   0x....             LDR.N    R4,??DataTable1_3  ;; 0x400b8000
   \   00000018   0x42A0             CMP      R0,R4
   \   0000001A   0xD105             BNE.N    ??FTM_initQUAD_1
    122            {
    123              SIM_SCGC3 |= SIM_SCGC3_FTM2_MASK;                     // Ê¹ÄÜFTM2Ê±ÖÓ 
   \   0000001C   0x....             LDR.N    R4,??DataTable1_4  ;; 0x40048030
   \   0000001E   0x6824             LDR      R4,[R4, #+0]
   \   00000020   0xF054 0x7480      ORRS     R4,R4,#0x1000000
   \   00000024   0x....             LDR.N    R5,??DataTable1_4  ;; 0x40048030
   \   00000026   0x602C             STR      R4,[R5, #+0]
    124            }
    125            FTM_MODE_REG(ftm) |= FTM_MODE_WPDIS_MASK;               // ½ûÓÃÐ´±£»¤
   \                     ??FTM_initQUAD_1:
   \   00000028   0x6D44             LDR      R4,[R0, #+84]
   \   0000002A   0xF054 0x0404      ORRS     R4,R4,#0x4
   \   0000002E   0x6544             STR      R4,[R0, #+84]
    126            
    127            if(mod == 1)
   \   00000030   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000032   0x2901             CMP      R1,#+1
   \   00000034   0xD106             BNE.N    ??FTM_initQUAD_2
    128            {
    129              FTM_QDCTRL_REG(ftm) |= FTM_QDCTRL_QUADMODE_MASK;      // ABÏàÍ¬Ê±ÊäÈëÄ£Ê½
   \   00000036   0xF8D0 0x1080      LDR      R1,[R0, #+128]
   \   0000003A   0xF051 0x0108      ORRS     R1,R1,#0x8
   \   0000003E   0xF8C0 0x1080      STR      R1,[R0, #+128]
   \   00000042   0xE005             B.N      ??FTM_initQUAD_3
    130            }
    131            else
    132            {
    133              FTM_QDCTRL_REG(ftm) &= ~FTM_QDCTRL_QUADMODE_MASK;     // Âö³åºÍ·½ÏòÊäÈëÄ£Ê½
   \                     ??FTM_initQUAD_2:
   \   00000044   0xF8D0 0x1080      LDR      R1,[R0, #+128]
   \   00000048   0xF031 0x0108      BICS     R1,R1,#0x8
   \   0000004C   0xF8C0 0x1080      STR      R1,[R0, #+128]
    134            }
    135            FTM_CNTIN_REG(ftm) = st;                                // ÉèÖÃ¼ÆÊýÆðÊ¼Öµ
   \                     ??FTM_initQUAD_3:
   \   00000050   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000052   0x64C2             STR      R2,[R0, #+76]
    136            FTM_MOD_REG(ftm) = end;                                 // ÉèÖÃ¼ÆÊýÖÕÖ¹Öµ
   \   00000054   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000056   0x6083             STR      R3,[R0, #+8]
    137            FTM_QDCTRL_REG(ftm) |= FTM_QDCTRL_QUADEN_MASK;          // ÆôÓÃFTMÕý½»½âÂëÄ£Ê½
   \   00000058   0xF8D0 0x1080      LDR      R1,[R0, #+128]
   \   0000005C   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   00000060   0xF8C0 0x1080      STR      R1,[R0, #+128]
    138            FTM_CNT_REG(ftm) = 0;                                   // ÇåÁã¼ÆÊýÆ÷
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0x6041             STR      R1,[R0, #+4]
    139          }
   \   00000068   0xBC30             POP      {R4,R5}
   \   0000006A   0x4770             BX       LR               ;; return
    140          
    141          /*******************************************************************************
    142          * º¯ÊýÃû³Æ£ºFTM_enableQUAD
    143          * Èë¿Ú²ÎÊý£ºftm     FTMÄ£¿é
    144                               FTM0
    145                               FTM1
    146                               FTM2
    147          * Ãè    Êö£ºÕý½»½âÂë¿ªÊ¼¹¤×÷
    148          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    149          void FTM_enableQUAD(FTM_MemMapPtr ftm)
    150          {
    151            FTM_MODE_REG(ftm) |= FTM_MODE_FTMEN_MASK;              // FTM2EN=1	
   \                     FTM_enableQUAD:
   \   00000000   0x6D41             LDR      R1,[R0, #+84]
   \   00000002   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   00000006   0x6541             STR      R1,[R0, #+84]
    152          }
   \   00000008   0x4770             BX       LR               ;; return
    153          
    154          /*******************************************************************************
    155          * º¯ÊýÃû³Æ£ºFTM_setPWMDty
    156          * Èë¿Ú²ÎÊý£ºftm    FTMÄ£¿é
    157                               FTM0
    158                               FTM1
    159                               FTM2
    160                      val    ¼ÆÊýÖµ
    161          * Ãè    Êö£º¶ÁÈ¡¼ÆÊýÖµ£¬²¢ÇåÁã¼ÆÊý¼Ä´æÆ÷
    162          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    163          void FTM_readQUADValue(FTM_MemMapPtr ftm, int16s_t * val)
    164          {
    165            *val = FTM_CNT_REG(ftm);                                 // ¶ÁÈ¡¼ÆÊýÖµ
   \                     FTM_readQUADValue:
   \   00000000   0x6842             LDR      R2,[R0, #+4]
   \   00000002   0x800A             STRH     R2,[R1, #+0]
    166            FTM_CNT_REG(ftm)=0;                                    // ¼ÆÊý¼Ä´æÆ÷ÇåÁã
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6041             STR      R1,[R0, #+4]
    167          }
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x40039000         DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x400B8000         DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x40048030         DC32     0x40048030

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       12  FTM_enablePWMCh
        0  FTM_enableQUAD
        4  FTM_initPWM
        8  FTM_initQUAD
        0  FTM_readQUADValue
        0  FTM_setPWMDty


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
     108  FTM_enablePWMCh
      10  FTM_enableQUAD
     126  FTM_initPWM
     108  FTM_initQUAD
      10  FTM_readQUADValue
      12  FTM_setPWMDty

 
 394 bytes in section .text
 
 394 bytes of CODE memory

Errors: none
Warnings: none
