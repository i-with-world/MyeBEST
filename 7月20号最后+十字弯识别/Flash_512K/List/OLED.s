///////////////////////////////////////////////////////////////////////////////
//                                                                            /
//                                                      22/Jul/2015  10:59:25 /
// IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM               /
// Copyright 1999-2012 IAR Systems AB.                                        /
//                                                                            /
//    Cpu mode     =  thumb                                                   /
//    Endian       =  little                                                  /
//    Source file  =  C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\OLED\OLED. /
//                    c                                                       /
//    Command line =  C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\OLED\OLED. /
//                    c -D IAR -lCN C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ /
//                    ¶±ð\Flash_512K\List\ -lB C:\Users\dong\Desktop\7ÔÂ20ºÅ× /
//                    îºó+Ê®×ÖÍäÊ¶±ð\Flash_512K\List\ -o                      /
//                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Flash_512K /
//                    \Obj\ --no_cse --no_unroll --no_inline                  /
//                    --no_code_motion --no_tbaa --no_clustering              /
//                    --no_scheduling --debug --endian=little                 /
//                    --cpu=Cortex-M4 -e --char_is_signed --fpu=None          /
//                    --dlib_config "C:\Program Files\IAR Systems\Embedded    /
//                    Workbench 6.0 Evaluation\arm\INC\c\DLib_Config_Normal.h /
//                    " -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Libra /
//                    ry\CPU\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð /
//                    \Library\Drivers\ADC\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ× /
//                    îºó+Ê®×ÖÍäÊ¶±ð\Library\Drivers\FTM\ -I                  /
//                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Library\Dr /
//                    ivers\GPIO\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍä /
//                    Ê¶±ð\Library\Drivers\PIT\ -I                            /
//                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Library\Dr /
//                    ivers\I2C\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ /
//                    ¶±ð\Library\Drivers\UART\ -I                            /
//                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Library\Dr /
//                    ivers\FTFL\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍä /
//                    Ê¶±ð\MyFunction\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê /
//                    ®×ÖÍäÊ¶±ð\SD_System\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×î /
//                    ºó+Ê®×ÖÍäÊ¶±ð\Delay\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×î /
//                    ºó+Ê®×ÖÍäÊ¶±ð\System_Init\ -I                           /
//                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\OLED\ -I   /
//                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\ZLG7290\   /
//                    -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Simple_ /
//                    AD\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Mak /
//                    e_Desicion\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍä /
//                    Ê¶±ð\Make_Desicion\Judge_Way\ -I                        /
//                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Make_Desic /
//                    ion\Speed_Control\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó /
//                    +Ê®×ÖÍäÊ¶±ð\Source\ -I C:\Users\dong\Desktop\7ÔÂ20ºÅ×îº /
//                    ó+Ê®×ÖÍäÊ¶±ð\Peripheral_Oparation\ -I                   /
//                    C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Balance_co /
//                    ntrol\ -Ol                                              /
//    List file    =  C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\Flash_512K /
//                    \List\OLED.s                                            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME OLED

        #define SHT_PROGBITS 0x1

        EXTERN GPIO_SetPinDir
        EXTERN GPIO_SetPinMod
        EXTERN GPIO_SetPinStat

        PUBLIC ASCII_0608
        PUBLIC Dis_Number
        PUBLIC Dis_String
        PUBLIC Display_GRAM
        PUBLIC GB_16
        PUBLIC OLED_6x8Str
        PUBLIC OLED_Clear
        PUBLIC OLED_Clear_Num
        PUBLIC OLED_DisChnStr
        PUBLIC OLED_Fill
        PUBLIC OLED_IO_Init
        PUBLIC OLED_Init
        PUBLIC OLED_PrintChn
        PUBLIC OLED_Refresh_Gram
        PUBLIC OLED_Refresh_Row
        PUBLIC OLED_SetPos
        PUBLIC OLED_ShowChn
        PUBLIC OLED_WrCmd
        PUBLIC OLED_WrDat
        PUBLIC OLED_Write_Char
        PUBLIC Show_BaseData
        PUBLIC write_OLED

// C:\Users\dong\Desktop\7ÔÂ20ºÅ×îºó+Ê®×ÖÍäÊ¶±ð\OLED\OLED.c
//    1 #include "AllHeaders.h"

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//    2 int8u_t Display_GRAM[128][8]={'0'};//ÏÔ´æ
Display_GRAM:
        DATA
        DC8 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//    3 /*Íâ²¿±äÁ¿ÉùÃ÷*/
//    4 //³£ÓÃASCII±í
//    5 //Æ«ÒÆÁ¿32
//    6 //ASCII×Ö·û¼¯
//    7 //Æ«ÒÆÁ¿32
//    8 //´óÐ¡:12*6
//    9 

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//   10 const unsigned char ASCII_0608[][6]={
ASCII_0608:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
        DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 35, 19, 8, 100, 98, 0, 54
        DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
        DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 80, 48, 0, 0
        DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
        DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
        DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
        DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
        DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
        DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
        DC8 6, 0, 50, 73, 121, 65, 62, 0, 126, 17, 17, 17, 126, 0, 127, 73, 73
        DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
        DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
        DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
        DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
        DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
        DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
        DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
        DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
        DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 2, 4, 8, 16, 32, 0, 0, 65, 65, 127
        DC8 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0, 0, 32
        DC8 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68, 32, 0
        DC8 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1, 2, 0
        DC8 12, 82, 82, 82, 62, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125, 64, 0, 0
        DC8 32, 64, 68, 61, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65, 127, 64, 0, 0
        DC8 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68, 68, 68, 56, 0
        DC8 124, 20, 20, 20, 8, 0, 8, 20, 20, 24, 124, 0, 124, 8, 4, 4, 8, 0
        DC8 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64, 64, 32, 124, 0
        DC8 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68, 40, 16, 40, 68, 0
        DC8 12, 80, 80, 80, 60, 0, 68, 100, 84, 76, 68, 0, 0, 8, 54, 65, 0, 0
        DC8 0, 0, 127, 0, 0, 0, 0, 65, 54, 8, 0, 0, 16, 8, 8, 16, 8, 0, 120, 70
        DC8 65, 70, 120
//   11  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00} // 20
//   12 ,{0x00, 0x00, 0x00, 0x5f, 0x00, 0x00} // 21 !
//   13 ,{0x00, 0x00, 0x07, 0x00, 0x07, 0x00} // 22 "
//   14 ,{0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14} // 23 #
//   15 ,{0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12} // 24 $
//   16 ,{0x00, 0x23, 0x13, 0x08, 0x64, 0x62} // 25 %
//   17 ,{0x00, 0x36, 0x49, 0x55, 0x22, 0x50} // 26 &
//   18 ,{0x00, 0x00, 0x05, 0x03, 0x00, 0x00} // 27 '
//   19 ,{0x00, 0x00, 0x1c, 0x22, 0x41, 0x00} // 28 (
//   20 ,{0x00, 0x00, 0x41, 0x22, 0x1c, 0x00} // 29 )
//   21 ,{0x00, 0x14, 0x08, 0x3e, 0x08, 0x14} // 2a *
//   22 ,{0x00, 0x08, 0x08, 0x3e, 0x08, 0x08} // 2b +
//   23 ,{0x00, 0x00, 0x50, 0x30, 0x00, 0x00} // 2c ,
//   24 ,{0x00, 0x08, 0x08, 0x08, 0x08, 0x08} // 2d -
//   25 ,{0x00, 0x00, 0x60, 0x60, 0x00, 0x00} // 2e .
//   26 ,{0x00, 0x20, 0x10, 0x08, 0x04, 0x02} // 2f /
//   27 ,{0x00, 0x3e, 0x51, 0x49, 0x45, 0x3e} // 30 0
//   28 ,{0x00, 0x00, 0x42, 0x7f, 0x40, 0x00} // 31 1
//   29 ,{0x00, 0x42, 0x61, 0x51, 0x49, 0x46} // 32 2
//   30 ,{0x00, 0x21, 0x41, 0x45, 0x4b, 0x31} // 33 3
//   31 ,{0x00, 0x18, 0x14, 0x12, 0x7f, 0x10} // 34 4
//   32 ,{0x00, 0x27, 0x45, 0x45, 0x45, 0x39} // 35 5
//   33 ,{0x00, 0x3c, 0x4a, 0x49, 0x49, 0x30} // 36 6
//   34 ,{0x00, 0x01, 0x71, 0x09, 0x05, 0x03} // 37 7
//   35 ,{0x00, 0x36, 0x49, 0x49, 0x49, 0x36} // 38 8
//   36 ,{0x00, 0x06, 0x49, 0x49, 0x29, 0x1e} // 39 9
//   37 ,{0x00, 0x00, 0x36, 0x36, 0x00, 0x00} // 3a :
//   38 ,{0x00, 0x00, 0x56, 0x36, 0x00, 0x00} // 3b ;
//   39 ,{0x00, 0x08, 0x14, 0x22, 0x41, 0x00} // 3c <
//   40 ,{0x00, 0x14, 0x14, 0x14, 0x14, 0x14} // 3d =
//   41 ,{0x00, 0x00, 0x41, 0x22, 0x14, 0x08} // 3e >
//   42 ,{0x00, 0x02, 0x01, 0x51, 0x09, 0x06} // 3f ?
//   43 ,{0x00, 0x32, 0x49, 0x79, 0x41, 0x3e} // 40 @
//   44 ,{0x00, 0x7e, 0x11, 0x11, 0x11, 0x7e} // 41 A
//   45 ,{0x00, 0x7f, 0x49, 0x49, 0x49, 0x36} // 42 B
//   46 ,{0x00, 0x3e, 0x41, 0x41, 0x41, 0x22} // 43 C
//   47 ,{0x00, 0x7f, 0x41, 0x41, 0x22, 0x1c} // 44 D
//   48 ,{0x00, 0x7f, 0x49, 0x49, 0x49, 0x41} // 45 E
//   49 ,{0x00, 0x7f, 0x09, 0x09, 0x09, 0x01} // 46 F
//   50 ,{0x00, 0x3e, 0x41, 0x49, 0x49, 0x7a} // 47 G
//   51 ,{0x00, 0x7f, 0x08, 0x08, 0x08, 0x7f} // 48 H
//   52 ,{0x00, 0x00, 0x41, 0x7f, 0x41, 0x00} // 49 I
//   53 ,{0x00, 0x20, 0x40, 0x41, 0x3f, 0x01} // 4a J
//   54 ,{0x00, 0x7f, 0x08, 0x14, 0x22, 0x41} // 4b K
//   55 ,{0x00, 0x7f, 0x40, 0x40, 0x40, 0x40} // 4c L
//   56 ,{0x00, 0x7f, 0x02, 0x0c, 0x02, 0x7f} // 4d M
//   57 ,{0x00, 0x7f, 0x04, 0x08, 0x10, 0x7f} // 4e N
//   58 ,{0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e} // 4f O
//   59 ,{0x00, 0x7f, 0x09, 0x09, 0x09, 0x06} // 50 P
//   60 ,{0x00, 0x3e, 0x41, 0x51, 0x21, 0x5e} // 51 Q
//   61 ,{0x00, 0x7f, 0x09, 0x19, 0x29, 0x46} // 52 R
//   62 ,{0x00, 0x46, 0x49, 0x49, 0x49, 0x31} // 53 S
//   63 ,{0x00, 0x01, 0x01, 0x7f, 0x01, 0x01} // 54 T
//   64 ,{0x00, 0x3f, 0x40, 0x40, 0x40, 0x3f} // 55 U
//   65 ,{0x00, 0x1f, 0x20, 0x40, 0x20, 0x1f} // 56 V
//   66 ,{0x00, 0x3f, 0x40, 0x38, 0x40, 0x3f} // 57 W
//   67 ,{0x00, 0x63, 0x14, 0x08, 0x14, 0x63} // 58 X
//   68 ,{0x00, 0x07, 0x08, 0x70, 0x08, 0x07} // 59 Y
//   69 ,{0x00, 0x61, 0x51, 0x49, 0x45, 0x43} // 5a Z
//   70 ,{0x00, 0x00, 0x7f, 0x41, 0x41, 0x00} // 5b [
//   71 ,{0x00, 0x02, 0x04, 0x08, 0x10, 0x20} // 5c \ //
//   72 ,{0x00, 0x00, 0x41, 0x41, 0x7f, 0x00} // 5d ]
//   73 ,{0x00, 0x04, 0x02, 0x01, 0x02, 0x04} // 5e ^
//   74 ,{0x00, 0x40, 0x40, 0x40, 0x40, 0x40} // 5f _
//   75 ,{0x00, 0x00, 0x01, 0x02, 0x04, 0x00} // 60 `
//   76 ,{0x00, 0x20, 0x54, 0x54, 0x54, 0x78} // 61 a
//   77 ,{0x00, 0x7f, 0x48, 0x44, 0x44, 0x38} // 62 b
//   78 ,{0x00, 0x38, 0x44, 0x44, 0x44, 0x20} // 63 c
//   79 ,{0x00, 0x38, 0x44, 0x44, 0x48, 0x7f} // 64 d
//   80 ,{0x00, 0x38, 0x54, 0x54, 0x54, 0x18} // 65 e
//   81 ,{0x00, 0x08, 0x7e, 0x09, 0x01, 0x02} // 66 f
//   82 ,{0x00, 0x0c, 0x52, 0x52, 0x52, 0x3e} // 67 g
//   83 ,{0x00, 0x7f, 0x08, 0x04, 0x04, 0x78} // 68 h
//   84 ,{0x00, 0x00, 0x44, 0x7d, 0x40, 0x00} // 69 i
//   85 ,{0x00, 0x20, 0x40, 0x44, 0x3d, 0x00} // 6a j
//   86 ,{0x00, 0x7f, 0x10, 0x28, 0x44, 0x00} // 6b k
//   87 ,{0x00, 0x00, 0x41, 0x7f, 0x40, 0x00} // 6c l
//   88 ,{0x00, 0x7c, 0x04, 0x18, 0x04, 0x78} // 6d m
//   89 ,{0x00, 0x7c, 0x08, 0x04, 0x04, 0x78} // 6e n
//   90 ,{0x00, 0x38, 0x44, 0x44, 0x44, 0x38} // 6f o
//   91 ,{0x00, 0x7c, 0x14, 0x14, 0x14, 0x08} // 70 p
//   92 ,{0x00, 0x08, 0x14, 0x14, 0x18, 0x7c} // 71 q
//   93 ,{0x00, 0x7c, 0x08, 0x04, 0x04, 0x08} // 72 r
//   94 ,{0x00, 0x48, 0x54, 0x54, 0x54, 0x20} // 73 s
//   95 ,{0x00, 0x04, 0x3f, 0x44, 0x40, 0x20} // 74 t
//   96 ,{0x00, 0x3c, 0x40, 0x40, 0x20, 0x7c} // 75 u
//   97 ,{0x00, 0x1c, 0x20, 0x40, 0x20, 0x1c} // 76 v
//   98 ,{0x00, 0x3c, 0x40, 0x30, 0x40, 0x3c} // 77 w
//   99 ,{0x00, 0x44, 0x28, 0x10, 0x28, 0x44} // 78 x
//  100 ,{0x00, 0x0c, 0x50, 0x50, 0x50, 0x3c} // 79 y
//  101 ,{0x00, 0x44, 0x64, 0x54, 0x4c, 0x44} // 7a z
//  102 ,{0x00, 0x00, 0x08, 0x36, 0x41, 0x00} // 7b {
//  103 ,{0x00, 0x00, 0x00, 0x7f, 0x00, 0x00} // 7c |
//  104 ,{0x00, 0x00, 0x41, 0x36, 0x08, 0x00} // 7d }
//  105 ,{0x00, 0x10, 0x08, 0x08, 0x10, 0x08} // 7e ~
//  106 ,{0x00, 0x78, 0x46, 0x41, 0x46, 0x78} // 7f (delete)
//  107 };
//  108 // ------------------  ºº×Ö×ÖÄ£µÄÊý¾Ý½á¹¹¶¨Òå ------------------------ //
//  109 typedef struct typFNT_GB16                 // ºº×Ö×ÖÄ£Êý¾Ý½á¹¹
//  110 {
//  111        signed char Index[2];               // ºº×ÖÄÚÂëË÷Òý
//  112        char Msk[32];                       // µãÕóÂëÊý¾Ý
//  113 }FNT_GB16;
//  114 
//  115 /////////////////////////////////////////////////////////////////////////
//  116 // ºº×Ö×ÖÄ£±í                                                          //
//  117 // ºº×Ö¿â: ËÎÌå16.dot ×ÝÏòÈ¡Ä£ÏÂ¸ßÎ»,Êý¾ÝÅÅÁÐ:´Ó×óµ½ÓÒ´ÓÉÏµ½ÏÂ         //
//  118 /////////////////////////////////////////////////////////////////////////
//  119 

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  120 struct typFNT_GB16 GB_16[] =          // Êý¾Ý±í
GB_16:
        DATA
        DC8 0BFH, 0D5H
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0C7H, 0EBH
        DC8 64, 66, -52, 0, 0, 68, 84, 84, 84, 127, 84, 84, 84, 68, 64, 0, 0, 0
        DC8 127, 32, 16, 0, -1, 21, 21, 21, 85, -107, 127, 0, 0, 0
        DC8 0D1H, 0A1H
        DC8 64, 64, 66, -52, 0, 80, 78, -56, 72, 127, -56, 72, 72, 64, 0, 0, 0
        DC8 64, 32, 31, 32, 80, 76, 67, 64, 64, 79, 80, 80, 92, 64, 0
        DC8 0D4H, 0F1H
        DC8 16, 16, -1, 16, 0, -126, -122, 74, 82, -94, 82, 74, -122, -128
        DC8 -128, 0, 66, -126, 127, 1, 0, 16, 18, 18, 18, -1, 18, 18, 18, 16, 0
        DC8 0
        DC8 0D0H, 0A3H
        DC8 16, 16, -48, -1, -112, 16, -128, 72, 40, 9, 14, 8, 40, 72, -120, 0
        DC8 4, 3, 0, -1, 0, 1, -128, -128, 67, 44, 16, 44, 67, -128, -128, 0
        DC8 0C7H, 0F8H
        DC8 0, -2, 2, 2, 2, 18, 34, 66, -126, 66, 34, 26, 2, 2, 0, 0, 0, 127
        DC8 64, 64, 72, 68, 66, 65, 64, 65, 66, 76, 64, 64, 64, 0
        DC8 0C6H, 0F0H
        DC8 64, 72, 72, 72, -1, 72, 72, 0, -60, 68, 68, 68, -4, 0, 0, 0, -128
        DC8 96, 31, 32, 127, 68, 68, 64, 79, 80, 80, 80, 80, 92, 64, 0
        DC8 0CAH, 0BCH
        DC8 16, 16, -16, 31, 16, -16, 0, 64, -32, 88, 71, 64, 80, 96, -64, 0
        DC8 64, 34, 21, 8, 22, 33, 0, 0, -2, 66, 66, 66, 66, -2, 0, 0
        DC8 0D6H, 0D5H
        DC8 32, 48, -84, 99, 48, 32, 16, 24, -89, 68, -92, 20, 12, 0, 0, 0, 34
        DC8 103, 34, 18, 18, 2, 1, 33, 36, 68, 72, -111, 1, 2, 2, 0
        DC8 0D6H, 0B9H
        DC8 0, 0, 0, -16, 0, 0, 0, -1, 64, 64, 64, 64, 64, 0, 0, 0, 64, 64, 64
        DC8 127, 64, 64, 64, 127, 64, 64, 64, 64, 64, 64, 64, 0
        DC8 0D0H, 0CBH
        DC8 -128, -128, -124, -120, -80, -127, -126, -116, -128, -64, -96, -104
        DC8 -121, -128, -128, 0, 0, -128, 64, 32, 24, 6, 0, 0, 0, 2, 4, 8, 48
        DC8 -64, 0, 0
        DC8 0C2H, 0A1H
        DC8 0, -2, 34, 90, -58, 72, -92, -86, -109, -110, -110, -86, -90, 64
        DC8 64, 0, 0, -1, 4, 8, 71, 72, 86, 84, 84, 127, 84, 84, 84, 68, 64, 0
        DC8 0C9H, 0BDH
        DC8 0, 0, -16, 0, 0, 0, 0, -1, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 63, 32
        DC8 32, 32, 32, 63, 32, 32, 32, 32, 127, 0, 0, 0
        DC8 0D6H, 0D0H
        DC8 0, 0, -16, 16, 16, 16, 16, -1, 16, 16, 16, 16, -16, 0, 0, 0, 0, 0
        DC8 15, 4, 4, 4, 4, -1, 4, 4, 4, 4, 15, 0, 0, 0
        DC8 0D0H, 0C4H
        DC8 0, 0, -128, 0, 0, -32, 2, 4, 24, 0, 0, 0, 64, -128, 0, 0, 16, 12, 3
        DC8 0, 0, 63, 64, 64, 64, 64, 64, 120, 0, 1, 14, 0
        DC8 0C7H, 0A7H
        DC8 -128, -128, -124, -124, -124, -124, -124, -4, -126, -126, -126
        DC8 -125, -126, -128, -128, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0
        DC8 0, 0, 0
        DC8 0B7H, 0F0H
        DC8 -128, 96, -8, 7, 8, -56, 72, -1, 72, 72, -1, 72, 72, 120, 0, 0, 0
        DC8 0, -1, 0, -125, 66, 50, 15, 2, 2, -1, 2, 18, 34, 30, 0
        DC8 0C9H, 0BDH
        DC8 0, 0, -16, 0, 0, 0, 0, -1, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 63, 32
        DC8 32, 32, 32, 63, 32, 32, 32, 32, 127, 0, 0, 0
        DC8 0BAH, 0E9H
        DC8 16, 96, 2, -116, 0, 16, 16, -1, 16, 16, 16, -1, 16, 16, 0, 0, 4, 4
        DC8 126, 1, -126, 66, 34, 27, 2, 2, 2, 11, 50, -62, 2, 0
        DC8 0BCH, 0D2H
        DC8 16, 44, 36, 36, -92, -92, 101, -90, 36, 36, 36, 36, -92, 52, 12, 0
        DC8 64, 73, 73, 41, 36, 20, 82, -119, 127, 4, 10, 17, 16, 32, 32, 0
        DC8 0C2H, 0A5H
        DC8 16, -112, -1, -112, 16, 0, -112, 82, 52, 16, 127, 16, 52, 82, -112
        DC8 0, 6, 1, -1, 0, 1, -126, -126, 90, 86, 35, 34, 82, 78, -126, 2, 0
        DC8 0F5H, 0C0H
        DC8 0, 62, 34, -30, 34, 62, 0, -96, 24, 15, 8, 8, 8, -8, 0, 0, 32, 63
        DC8 32, 31, 17, 17, 0, 0, 1, 6, 64, -128, 64, 63, 0, 0
        DC8 0CDH, 0BBH
        DC8 16, 12, 68, 36, 20, 4, 5, -26, 4, 68, -108, 36, 68, 20, 12, 0, -128
        DC8 -126, 66, 66, 34, 18, 10, 7, 10, 18, 34, 66, 66, -126, -128, 0
        DC8 0C8H, 0AAH
        DC8 0, 0, 0, -4, 36, 36, 38, 37, 36, 36, 36, -4, 0, 0, 0, 0, 64, 68, 36
        DC8 21, 13, 69, -127, 127, 5, 9, 17, 41, 36, 66, 64, 0
        DC8 0C8H, 0EDH
        DC8 8, -56, -72, -113, -24, -120, -120, 64, 48, 15, -56, 8, 40, 24, 0
        DC8 0, 8, 24, 8, 8, -1, 4, -124, 64, 48, 14, 1, 14, 48, 64, -128, 0
        DC8 0BCH, 0FEH
        DC8 0, -128, 96, -8, 7, -128, 96, 28, 16, 16, -1, 16, 16, 16, 0, 0, 1
        DC8 0, 0, -1, 0, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 0
        DC8 0D4H, 0B0H
        DC8 0, -2, 2, 66, 74, -54, 74, 74, -54, 74, 74, 66, 2, -2, 0, 0, 0, -1
        DC8 64, 80, 76, 67, 64, 64, 79, 80, 80, 92, 64, -1, 0, 0
        DC8 0B7H, 0A2H
        DC8 0, 0, 24, 22, 16, -48, -72, -105, -112, -112, -112, -110, -108, 16
        DC8 0, 0, 0, 32, 16, -116, -125, -128, 65, 70, 40, 16, 40, 68, 67, -128
        DC8 -128, 0
        DC8 0B3H, 0B5H
        DC8 0, 8, -120, 72, 40, 24, 15, -24, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 9, 9
        DC8 9, 9, 9, -1, 9, 9, 9, 9, 9, 8, 8, 0
        DC8 0CAH, 0B1H
        DC8 0, -4, -124, -124, -124, -4, 0, 16, 16, 16, 16, 16, -1, 16, 16, 0
        DC8 0, 63, 16, 16, 16, 63, 0, 0, 1, 6, 64, -128, 127, 0, 0, 0
        DC8 0BCH, 0E4H
        DC8 0, -8, 1, 6, 0, -16, 18, 18, 18, -14, 2, 2, 2, -2, 0, 0, 0, -1, 0
        DC8 0, 0, 31, 17, 17, 17, 31, 0, 64, -128, 127, 0, 0
        DC8 0B4H, 0D3H
        DC8 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -128, 64, 48, 14
        DC8 1, -126, 76, 32, 24, 7, 0, 7, 24, 96, -128, 0
        DC8 0B5H, 0BDH
        DC8 66, 98, 82, 74, -58, 66, 82, 98, -62, 0, -8, 0, 0, -1, 0, 0, 64
        DC8 -60, 68, 68, 127, 36, 36, 36, 32, 0, 15, 64, -128, 127, 0, 0
        DC8 0CAH, 0C7H
        DC8 0, 0, 0, 127, 73, 73, 73, 73, 73, 73, 73, 127, 0, 0, 0, 0, -127, 65
        DC8 33, 29, 33, 65, -127, -1, -119, -119, -119, -119, -119, -127, -127
        DC8 0
        DC8 0B7H, 0F1H
        DC8 0, 2, -126, -126, 66, 34, 18, -6, 6, 34, 34, 66, 66, -126, 0, 0, 1
        DC8 1, 0, -4, 68, 68, 68, 69, 68, 68, 68, -4, 0, 0, 1, 0
        DC8 0B9H, 0A4H
        DC8 0, 4, 4, 4, 4, 4, 4, -4, 4, 4, 4, 4, 4, 4, 0, 0, 32, 32, 32, 32, 32
        DC8 32, 32, 63, 32, 32, 32, 32, 32, 32, 32, 0
        DC8 0D7H, 0F7H
        DC8 0, -128, 96, -8, 7, 64, 48, 15, -8, -120, -120, -120, -120, 8, 8, 0
        DC8 1, 0, 0, -1, 0, 0, 0, 0, -1, 8, 8, 8, 8, 8, 0, 0
        DC8 0C8H, 0D5H
        DC8 0, 0, 0, -2, -126, -126, -126, -126, -126, -126, -126, -2, 0, 0, 0
        DC8 0, 0, 0, 0, -1, 64, 64, 64, 64, 64, 64, 64, -1, 0, 0, 0, 0
        DC8 0BFH, 0D5H
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  121 {
//  122   {"¿Õ",0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  123         0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,},/*"¿Õ",0*/
//  124         
//  125   {"Çë",0x40,0x42,0xCC,0x00,0x00,0x44,0x54,0x54,0x54,0x7F,0x54,0x54,0x54,0x44,0x40,0x00,
//  126         0x00,0x00,0x7F,0x20,0x10,0x00,0xFF,0x15,0x15,0x15,0x55,0x95,0x7F,0x00,0x00,0x00},/*"Çë",0*/
//  127 
//  128   {"Ñ¡",0x40,0x40,0x42,0xCC,0x00,0x50,0x4E,0xC8,0x48,0x7F,0xC8,0x48,0x48,0x40,0x00,0x00,
//  129         0x00,0x40,0x20,0x1F,0x20,0x50,0x4C,0x43,0x40,0x40,0x4F,0x50,0x50,0x5C,0x40,0x00},/*"Ñ¡",0*/
//  130 
//  131   {"Ôñ",0x10,0x10,0xFF,0x10,0x00,0x82,0x86,0x4A,0x52,0xA2,0x52,0x4A,0x86,0x80,0x80,0x00,
//  132         0x42,0x82,0x7F,0x01,0x00,0x10,0x12,0x12,0x12,0xFF,0x12,0x12,0x12,0x10,0x00,0x00},/*"Ôñ",1*/
//  133 
//  134   {"Ð£",0x10,0x10,0xD0,0xFF,0x90,0x10,0x80,0x48,0x28,0x09,0x0E,0x08,0x28,0x48,0x88,0x00,
//  135         0x04,0x03,0x00,0xFF,0x00,0x01,0x80,0x80,0x43,0x2C,0x10,0x2C,0x43,0x80,0x80,0x00},/*"Ð£",2*/
//  136 
//  137   {"Çø",0x00,0xFE,0x02,0x02,0x02,0x12,0x22,0x42,0x82,0x42,0x22,0x1A,0x02,0x02,0x00,0x00,
//  138         0x00,0x7F,0x40,0x40,0x48,0x44,0x42,0x41,0x40,0x41,0x42,0x4C,0x40,0x40,0x40,0x00},/*"Çø",0*/
//  139 
//  140   {"Æð",0x40,0x48,0x48,0x48,0xFF,0x48,0x48,0x00,0xC4,0x44,0x44,0x44,0xFC,0x00,0x00,0x00,
//  141         0x80,0x60,0x1F,0x20,0x7F,0x44,0x44,0x40,0x4F,0x50,0x50,0x50,0x50,0x5C,0x40,0x00},/*"Æð",4*/
//  142 
//  143   {"Ê¼",0x10,0x10,0xF0,0x1F,0x10,0xF0,0x00,0x40,0xE0,0x58,0x47,0x40,0x50,0x60,0xC0,0x00,
//  144         0x40,0x22,0x15,0x08,0x16,0x21,0x00,0x00,0xFE,0x42,0x42,0x42,0x42,0xFE,0x00,0x00},/*"Ê¼",5*/
//  145 
//  146   {"ÖÕ",0x20,0x30,0xAC,0x63,0x30,0x20,0x10,0x18,0xA7,0x44,0xA4,0x14,0x0C,0x00,0x00,0x00,
//  147         0x22,0x67,0x22,0x12,0x12,0x02,0x01,0x21,0x24,0x44,0x48,0x91,0x01,0x02,0x02,0x00},/*"ÖÕ",6*/
//  148 
//  149   {"Ö¹",0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0xFF,0x40,0x40,0x40,0x40,0x40,0x00,0x00,0x00,
//  150         0x40,0x40,0x40,0x7F,0x40,0x40,0x40,0x7F,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00},/*"Ö¹",7*/
//  151 
//  152   {"ÐË",0x80,0x80,0x84,0x88,0xB0,0x81,0x82,0x8C,0x80,0xC0,0xA0,0x98,0x87,0x80,0x80,0x00,
//  153         0x00,0x80,0x40,0x20,0x18,0x06,0x00,0x00,0x00,0x02,0x04,0x08,0x30,0xC0,0x00,0x00},/*"ÐË",0*/
//  154 
//  155   {"Â¡",0x00,0xFE,0x22,0x5A,0xC6,0x48,0xA4,0xAA,0x93,0x92,0x92,0xAA,0xA6,0x40,0x40,0x00,
//  156         0x00,0xFF,0x04,0x08,0x47,0x48,0x56,0x54,0x54,0x7F,0x54,0x54,0x54,0x44,0x40,0x00},/*"Â¡",1*/
//  157 
//  158   {"É½",0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,
//  159         0x00,0x00,0x3F,0x20,0x20,0x20,0x20,0x3F,0x20,0x20,0x20,0x20,0x7F,0x00,0x00,0x00},/*"É½",2*/
//  160 
//  161   {"ÖÐ",0x00,0x00,0xF0,0x10,0x10,0x10,0x10,0xFF,0x10,0x10,0x10,0x10,0xF0,0x00,0x00,0x00,
//  162         0x00,0x00,0x0F,0x04,0x04,0x04,0x04,0xFF,0x04,0x04,0x04,0x04,0x0F,0x00,0x00,0x00},/*"ÖÐ",0*/
//  163 
//  164   {"ÐÄ",0x00,0x00,0x80,0x00,0x00,0xE0,0x02,0x04,0x18,0x00,0x00,0x00,0x40,0x80,0x00,0x00,
//  165         0x10,0x0C,0x03,0x00,0x00,0x3F,0x40,0x40,0x40,0x40,0x40,0x78,0x00,0x01,0x0E,0x00},/*"ÐÄ",1*/
//  166 
//  167   {"Ç§",0x80,0x80,0x84,0x84,0x84,0x84,0x84,0xFC,0x82,0x82,0x82,0x83,0x82,0x80,0x80,0x00,
//  168         0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"Ç§",0*/
//  169 
//  170   {"·ð",0x80,0x60,0xF8,0x07,0x08,0xC8,0x48,0xFF,0x48,0x48,0xFF,0x48,0x48,0x78,0x00,0x00,
//  171         0x00,0x00,0xFF,0x00,0x83,0x42,0x32,0x0F,0x02,0x02,0xFF,0x02,0x12,0x22,0x1E,0x00},/*"·ð",1*/
//  172 
//  173   {"É½",0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,
//  174         0x00,0x00,0x3F,0x20,0x20,0x20,0x20,0x3F,0x20,0x20,0x20,0x20,0x7F,0x00,0x00,0x00},/*"É½",2*/
//  175 
//  176   {"ºé",0x10,0x60,0x02,0x8C,0x00,0x10,0x10,0xFF,0x10,0x10,0x10,0xFF,0x10,0x10,0x00,0x00,
//  177         0x04,0x04,0x7E,0x01,0x82,0x42,0x22,0x1B,0x02,0x02,0x02,0x0B,0x32,0xC2,0x02,0x00},/*"ºé",0*/
//  178 
//  179   {"¼Ò",0x10,0x2C,0x24,0x24,0xA4,0xA4,0x65,0xA6,0x24,0x24,0x24,0x24,0xA4,0x34,0x0C,0x00,
//  180         0x40,0x49,0x49,0x29,0x24,0x14,0x52,0x89,0x7F,0x04,0x0A,0x11,0x10,0x20,0x20,0x00},/*"¼Ò",1*/
//  181 
//  182   {"Â¥",0x10,0x90,0xFF,0x90,0x10,0x00,0x90,0x52,0x34,0x10,0x7F,0x10,0x34,0x52,0x90,0x00,
//  183         0x06,0x01,0xFF,0x00,0x01,0x82,0x82,0x5A,0x56,0x23,0x22,0x52,0x4E,0x82,0x02,0x00},/*"Â¥",2*/
//  184 
//  185   {"õÀ",0x00,0x3E,0x22,0xE2,0x22,0x3E,0x00,0xA0,0x18,0x0F,0x08,0x08,0x08,0xF8,0x00,0x00,
//  186         0x20,0x3F,0x20,0x1F,0x11,0x11,0x00,0x00,0x01,0x06,0x40,0x80,0x40,0x3F,0x00,0x00},/*"õÀ",0*/
//  187 
//  188   {"Í»",0x10,0x0C,0x44,0x24,0x14,0x04,0x05,0xE6,0x04,0x44,0x94,0x24,0x44,0x14,0x0C,0x00,
//  189         0x80,0x82,0x42,0x42,0x22,0x12,0x0A,0x07,0x0A,0x12,0x22,0x42,0x42,0x82,0x80,0x00},/*"Í»",1*/
//  190 
//  191   {"Èª",0x00,0x00,0x00,0xFC,0x24,0x24,0x26,0x25,0x24,0x24,0x24,0xFC,0x00,0x00,0x00,0x00,
//  192         0x40,0x44,0x24,0x15,0x0D,0x45,0x81,0x7F,0x05,0x09,0x11,0x29,0x24,0x42,0x40,0x00},/*"Èª",2*/
//  193 
//  194   {"Èí",0x08,0xC8,0xB8,0x8F,0xE8,0x88,0x88,0x40,0x30,0x0F,0xC8,0x08,0x28,0x18,0x00,0x00,
//  195         0x08,0x18,0x08,0x08,0xFF,0x04,0x84,0x40,0x30,0x0E,0x01,0x0E,0x30,0x40,0x80,0x00},/*"Èí",0*/
//  196 
//  197   {"¼þ",0x00,0x80,0x60,0xF8,0x07,0x80,0x60,0x1C,0x10,0x10,0xFF,0x10,0x10,0x10,0x00,0x00,
//  198         0x01,0x00,0x00,0xFF,0x00,0x02,0x02,0x02,0x02,0x02,0xFF,0x02,0x02,0x02,0x02,0x00},/*"¼þ",1*/
//  199 
//  200   {"Ô°",0x00,0xFE,0x02,0x42,0x4A,0xCA,0x4A,0x4A,0xCA,0x4A,0x4A,0x42,0x02,0xFE,0x00,0x00,
//  201         0x00,0xFF,0x40,0x50,0x4C,0x43,0x40,0x40,0x4F,0x50,0x50,0x5C,0x40,0xFF,0x00,0x00},/*"Ô°",2*/
//  202   
//  203   {"·¢",0x00,0x00,0x18,0x16,0x10,0xD0,0xB8,0x97,0x90,0x90,0x90,0x92,0x94,0x10,0x00,0x00,
//  204         0x00,0x20,0x10,0x8C,0x83,0x80,0x41,0x46,0x28,0x10,0x28,0x44,0x43,0x80,0x80,0x00},/*"·¢",0*/
//  205 
//  206   {"³µ",0x00,0x08,0x88,0x48,0x28,0x18,0x0F,0xE8,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,
//  207         0x08,0x08,0x09,0x09,0x09,0x09,0x09,0xFF,0x09,0x09,0x09,0x09,0x09,0x08,0x08,0x00},/*"³µ",1*/
//  208 
//  209   {"Ê±",0x00,0xFC,0x84,0x84,0x84,0xFC,0x00,0x10,0x10,0x10,0x10,0x10,0xFF,0x10,0x10,0x00,
//  210         0x00,0x3F,0x10,0x10,0x10,0x3F,0x00,0x00,0x01,0x06,0x40,0x80,0x7F,0x00,0x00,0x00},/*"Ê±",2*/
//  211 
//  212   {"¼ä",0x00,0xF8,0x01,0x06,0x00,0xF0,0x12,0x12,0x12,0xF2,0x02,0x02,0x02,0xFE,0x00,0x00,
//  213         0x00,0xFF,0x00,0x00,0x00,0x1F,0x11,0x11,0x11,0x1F,0x00,0x40,0x80,0x7F,0x00,0x00},/*"¼ä",3*/
//  214   
//  215   {"´Ó",0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,
//  216         0x80,0x40,0x30,0x0E,0x01,0x82,0x4C,0x20,0x18,0x07,0x00,0x07,0x18,0x60,0x80,0x00},/*"´Ó",0*/
//  217 
//  218   {"µ½",0x42,0x62,0x52,0x4A,0xC6,0x42,0x52,0x62,0xC2,0x00,0xF8,0x00,0x00,0xFF,0x00,0x00,
//  219         0x40,0xC4,0x44,0x44,0x7F,0x24,0x24,0x24,0x20,0x00,0x0F,0x40,0x80,0x7F,0x00,0x00},/*"µ½",1*/
//  220 
//  221   {"ÊÇ",0x00,0x00,0x00,0x7F,0x49,0x49,0x49,0x49,0x49,0x49,0x49,0x7F,0x00,0x00,0x00,0x00,
//  222         0x81,0x41,0x21,0x1D,0x21,0x41,0x81,0xFF,0x89,0x89,0x89,0x89,0x89,0x81,0x81,0x00},/*"ÊÇ",0*/
//  223   
//  224   {"·ñ",0x00,0x02,0x82,0x82,0x42,0x22,0x12,0xFA,0x06,0x22,0x22,0x42,0x42,0x82,0x00,0x00,
//  225         0x01,0x01,0x00,0xFC,0x44,0x44,0x44,0x45,0x44,0x44,0x44,0xFC,0x00,0x00,0x01,0x00},/*"·ñ",1*/
//  226   
//  227   {"¹¤",0x00,0x04,0x04,0x04,0x04,0x04,0x04,0xFC,0x04,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
//  228         0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x3F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00},/*"¹¤",2*/
//  229   
//  230   {"×÷",0x00,0x80,0x60,0xF8,0x07,0x40,0x30,0x0F,0xF8,0x88,0x88,0x88,0x88,0x08,0x08,0x00,
//  231         0x01,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x08,0x08,0x08,0x08,0x08,0x00,0x00},/*"×÷",3*/
//  232   
//  233   {"ÈÕ",0x00,0x00,0x00,0xFE,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0xFE,0x00,0x00,0x00,0x00,
//  234         0x00,0x00,0x00,0xFF,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0xFF,0x00,0x00,0x00,0x00},/*"ÈÕ",4*/
//  235         
//  236   {"¿Õ",0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  237         0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,},/*"¿Õ",0*/
//  238 };
//  239 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  240 void OLED_IO_Init()
//  241 { 
OLED_IO_Init:
        PUSH     {R7,LR}
//  242         GPIO_SetPinMod(OLED_SCL,1);
        MOVS     R2,#+1
        MOVS     R1,#+0
        LDR.W    R0,??DataTable11  ;; 0x400ff0c0
        BL       GPIO_SetPinMod
//  243         GPIO_SetPinMod(OLED_SDA,1);
        MOVS     R2,#+1
        MOVS     R1,#+18
        LDR.W    R0,??DataTable11_1  ;; 0x400ff080
        BL       GPIO_SetPinMod
//  244         //GPIO_SetPinMod(OLED_CS,1);
//  245         GPIO_SetPinMod(OLED_DC,1);
        MOVS     R2,#+1
        MOVS     R1,#+18
        LDR.W    R0,??DataTable11_2  ;; 0x400ff100
        BL       GPIO_SetPinMod
//  246         GPIO_SetPinMod(OLED_RST,1);
        MOVS     R2,#+1
        MOVS     R1,#+16
        LDR.W    R0,??DataTable11_2  ;; 0x400ff100
        BL       GPIO_SetPinMod
//  247        
//  248         GPIO_SetPinDir(OLED_SCL,1); // Ê±ÖÓ³õÊ¼»¯¶¨Òå
        MOVS     R2,#+1
        MOVS     R1,#+0
        LDR.W    R0,??DataTable11  ;; 0x400ff0c0
        BL       GPIO_SetPinDir
//  249         GPIO_SetPinDir(OLED_SDA,1);//Êý¾Ý¿ÚD0
        MOVS     R2,#+1
        MOVS     R1,#+18
        LDR.W    R0,??DataTable11_1  ;; 0x400ff080
        BL       GPIO_SetPinDir
//  250         //GPIO_SetPinDir(OLED_CS,1);//¸´Î»µÍÄÜµçÆ½
//  251         GPIO_SetPinDir(OLED_DC,1);//Æ«ÖÃ³£µÍ
        MOVS     R2,#+1
        MOVS     R1,#+18
        LDR.W    R0,??DataTable11_2  ;; 0x400ff100
        BL       GPIO_SetPinDir
//  252         GPIO_SetPinDir(OLED_RST,1);//¸´Î»
        MOVS     R2,#+1
        MOVS     R1,#+16
        LDR.W    R0,??DataTable11_2  ;; 0x400ff100
        BL       GPIO_SetPinDir
//  253         
//  254 }
        POP      {R0,PC}          ;; return
//  255 
//  256 /*****************************************************************************
//  257  º¯ Êý Ãû  : OLED_WrDat
//  258  ¹¦ÄÜÃèÊö  : ÏòOLEDÐ´Êý¾Ý
//  259  ÊäÈë²ÎÊý  : Dat´ýÐ´ÈëÊý¾Ý
//  260  Êä³ö²ÎÊý  : NONE
//  261  ·µ »Ø Öµ  : NONE
//  262 *****************************************************************************/

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  263 void OLED_WrDat(int8u_t dat)//Ð´Êý¾Ý
//  264 {
OLED_WrDat:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
//  265     unsigned char i=8;
        MOVS     R5,#+8
//  266     OLED_DCH;
        MOVS     R2,#+1
        MOVS     R1,#+18
        LDR.W    R0,??DataTable11_2  ;; 0x400ff100
        BL       GPIO_SetPinStat
//  267     OLED_SCLL;
        MOVS     R2,#+0
        MOVS     R1,#+0
        LDR.W    R0,??DataTable11  ;; 0x400ff0c0
        BL       GPIO_SetPinStat
        B.N      ??OLED_WrDat_0
//  268     
//  269     while(i--)
//  270     {
//  271         if(dat&0x80)
//  272         {
//  273           OLED_SDAH;
//  274         }
//  275         else
//  276         {
//  277           OLED_SDAL;
??OLED_WrDat_1:
        MOVS     R2,#+0
        MOVS     R1,#+18
        LDR.W    R0,??DataTable11_1  ;; 0x400ff080
        BL       GPIO_SetPinStat
//  278         }
//  279         
//  280         OLED_SCLH;
??OLED_WrDat_2:
        MOVS     R2,#+1
        MOVS     R1,#+0
        LDR.W    R0,??DataTable11  ;; 0x400ff0c0
        BL       GPIO_SetPinStat
//  281         asm("nop");
        nop              
//  282         OLED_SCLL;    
        MOVS     R2,#+0
        MOVS     R1,#+0
        LDR.W    R0,??DataTable11  ;; 0x400ff0c0
        BL       GPIO_SetPinStat
//  283         dat<<=1; 
        LSLS     R4,R4,#+1
??OLED_WrDat_0:
        MOVS     R0,R5
        SUBS     R5,R0,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_WrDat_3
        LSLS     R0,R4,#+24
        BPL.N    ??OLED_WrDat_1
        MOVS     R2,#+1
        MOVS     R1,#+18
        LDR.W    R0,??DataTable11_1  ;; 0x400ff080
        BL       GPIO_SetPinStat
        B.N      ??OLED_WrDat_2
//  284     }
//  285 }
??OLED_WrDat_3:
        POP      {R0,R4,R5,PC}    ;; return
//  286 
//  287 /*****************************************************************************
//  288  º¯ Êý Ãû  : OLED_WrCmd
//  289  ¹¦ÄÜÃèÊö  : ÏòOLEDÐ´ÃüÁî
//  290  ÊäÈë²ÎÊý  : Dat´ýÐ´ÈëÃüÁî 
//  291  Êä³ö²ÎÊý  : NONE
//  292  ·µ »Ø Öµ  : NONE
//  293 *****************************************************************************/

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  294 void OLED_WrCmd(int8u_t cmd)
//  295 {
OLED_WrCmd:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
//  296   unsigned char i=8;
        MOVS     R5,#+8
//  297   
//  298   OLED_DCL;
        MOVS     R2,#+0
        MOVS     R1,#+18
        LDR.W    R0,??DataTable11_2  ;; 0x400ff100
        BL       GPIO_SetPinStat
//  299   OLED_SCLL;
        MOVS     R2,#+0
        MOVS     R1,#+0
        LDR.W    R0,??DataTable11  ;; 0x400ff0c0
        BL       GPIO_SetPinStat
        B.N      ??OLED_WrCmd_0
//  300         
//  301   while(i--)
//  302   {
//  303       if(cmd&0x80)
//  304       {
//  305         OLED_SDAH;
//  306       }
//  307       else
//  308       {
//  309         OLED_SDAL;
??OLED_WrCmd_1:
        MOVS     R2,#+0
        MOVS     R1,#+18
        LDR.W    R0,??DataTable11_1  ;; 0x400ff080
        BL       GPIO_SetPinStat
//  310       }
//  311       
//  312       OLED_SCLH;
??OLED_WrCmd_2:
        MOVS     R2,#+1
        MOVS     R1,#+0
        LDR.W    R0,??DataTable11  ;; 0x400ff0c0
        BL       GPIO_SetPinStat
//  313       asm("nop");
        nop              
//  314       OLED_SCLL;    
        MOVS     R2,#+0
        MOVS     R1,#+0
        LDR.W    R0,??DataTable11  ;; 0x400ff0c0
        BL       GPIO_SetPinStat
//  315       cmd<<=1;    
        LSLS     R4,R4,#+1
??OLED_WrCmd_0:
        MOVS     R0,R5
        SUBS     R5,R0,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_WrCmd_3
        LSLS     R0,R4,#+24
        BPL.N    ??OLED_WrCmd_1
        MOVS     R2,#+1
        MOVS     R1,#+18
        LDR.W    R0,??DataTable11_1  ;; 0x400ff080
        BL       GPIO_SetPinStat
        B.N      ??OLED_WrCmd_2
//  316   }
//  317 }
??OLED_WrCmd_3:
        POP      {R0,R4,R5,PC}    ;; return
//  318 //¸üÐÂÏÔ´æµ½LCD		 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  319 void OLED_Refresh_Gram(void)
//  320 {
OLED_Refresh_Gram:
        PUSH     {R3-R5,LR}
//  321     int8u_t i,n;		    
//  322     for(i=0;i<8;i++)  
        MOVS     R4,#+0
        B.N      ??OLED_Refresh_Gram_0
//  323     {  
//  324         OLED_WrCmd(0xB0+i);    //ÉèÖÃÒ³µØÖ·£¨0~7£©
//  325         OLED_WrCmd(0x00);      //ÉèÖÃÏÔÊ¾Î»ÖÃ-ÁÐµÍµØÖ·
//  326         OLED_WrCmd(0x10);      //ÉèÖÃÏÔÊ¾Î»ÖÃ-ÁÐ¸ßµØÖ·   
//  327         for(n=0;n<128;n++)
//  328           OLED_WrDat(Display_GRAM[n][i]);
??OLED_Refresh_Gram_1:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LDR.W    R0,??DataTable11_3
        ADDS     R0,R0,R5, LSL #+3
        LDRB     R0,[R4, R0]
        BL       OLED_WrDat
        ADDS     R5,R5,#+1
??OLED_Refresh_Gram_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+128
        BCC.N    ??OLED_Refresh_Gram_1
        ADDS     R4,R4,#+1
??OLED_Refresh_Gram_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+8
        BCS.N    ??OLED_Refresh_Gram_3
        SUBS     R0,R4,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
        MOVS     R0,#+0
        BL       OLED_WrCmd
        MOVS     R0,#+16
        BL       OLED_WrCmd
        MOVS     R5,#+0
        B.N      ??OLED_Refresh_Gram_2
//  329     }
//  330 }
??OLED_Refresh_Gram_3:
        POP      {R0,R4,R5,PC}    ;; return
//  331 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  332 void OLED_Refresh_Row(int8u_t row)
//  333 {
OLED_Refresh_Row:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
//  334   int8u_t n;
//  335   
//  336   OLED_WrCmd(0xB0+row);    //ÉèÖÃÒ³µØÖ·£¨0~7£©
        SUBS     R0,R4,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  337   OLED_WrCmd(0x00);      //ÉèÖÃÏÔÊ¾Î»ÖÃ-ÁÐµÍµØÖ·
        MOVS     R0,#+0
        BL       OLED_WrCmd
//  338   OLED_WrCmd(0x10);      //ÉèÖÃÏÔÊ¾Î»ÖÃ-ÁÐ¸ßµØÖ·   
        MOVS     R0,#+16
        BL       OLED_WrCmd
//  339   for(n=0;n<128;n++)
        MOVS     R5,#+0
        B.N      ??OLED_Refresh_Row_0
//  340     OLED_WrDat(Display_GRAM[n][row]);
??OLED_Refresh_Row_1:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LDR.W    R0,??DataTable11_3
        ADDS     R0,R0,R5, LSL #+3
        LDRB     R0,[R4, R0]
        BL       OLED_WrDat
        ADDS     R5,R5,#+1
??OLED_Refresh_Row_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+128
        BCC.N    ??OLED_Refresh_Row_1
//  341 }
        POP      {R0,R4,R5,PC}    ;; return
//  342 /*****************************************************************************
//  343  º¯ Êý Ãû  : OLED_SetPos
//  344  ¹¦ÄÜÃèÊö  : ÉèÖÃÏÔÊ¾×ø±ê
//  345  ÊäÈë²ÎÊý  : int8u_t X  
//  346              int8u_t Y  
//  347  Êä³ö²ÎÊý  : NONE
//  348  ·µ »Ø Öµ  : NONE
//  349 *****************************************************************************/
//  350 //0xb0+0~7±íÊ¾Ò³0~7
//  351 //0x00+0~16±íÊ¾½«128ÁÐ·Ö³É16×éÆäµØÖ·ÔÚÄ³×éÖÐµÄµÚ¼¸ÁÐ
//  352 //0x10+0~16±íÊ¾½«128ÁÐ·Ö³É16×éÆäµØÖ·ËùÔÚµÚ¼¸×é

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  353 void OLED_SetPos(int8u_t x, int8u_t y)
//  354 { 
OLED_SetPos:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  355   OLED_WrCmd(0xb0 + y);
        SUBS     R0,R1,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  356   OLED_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  357   OLED_WrCmd((x&0x0f)|0x01);
        ANDS     R0,R4,#0xF
        ORRS     R0,R0,#0x1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  358 } 
        POP      {R4,PC}          ;; return
//  359 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  360 void OLED_Fill(unsigned char bmp_dat)//È«ÆÁÌî³ä
//  361 {
OLED_Fill:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
//  362 	unsigned char y,x;
//  363 	for(y=0;y<8;y++)
        MOVS     R5,#+0
        B.N      ??OLED_Fill_0
//  364 	{
//  365 		OLED_WrCmd(0xb0+y);
//  366 		OLED_WrCmd(0x01);
//  367 		OLED_WrCmd(0x10);
//  368 		for(x=0;x<LED_MAX_COLUMN_NUM;x++)
//  369 		{
//  370 			OLED_WrDat(bmp_dat);
??OLED_Fill_1:
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  371 		}
        ADDS     R6,R6,#+1
??OLED_Fill_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+128
        BCC.N    ??OLED_Fill_1
        ADDS     R5,R5,#+1
??OLED_Fill_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+8
        BCS.N    ??OLED_Fill_3
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
        MOVS     R0,#+1
        BL       OLED_WrCmd
        MOVS     R0,#+16
        BL       OLED_WrCmd
        MOVS     R6,#+0
        B.N      ??OLED_Fill_2
//  372 	}
//  373 }
??OLED_Fill_3:
        POP      {R4-R6,PC}       ;; return
//  374 /*****************************************************************************
//  375  º¯ Êý Ãû  : OLED_Init
//  376  ¹¦ÄÜÃèÊö  : OLED³õÊ¼»¯
//  377  ÊäÈë²ÎÊý  : void  
//  378  Êä³ö²ÎÊý  : NONE
//  379  ·µ »Ø Öµ  : NONE
//  380 *****************************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  381 void OLED_Init(void)        
//  382 {
OLED_Init:
        PUSH     {R7,LR}
//  383     int16u_t i;
//  384     
//  385     OLED_IO_Init();
        BL       OLED_IO_Init
//  386    /* OLED_SCL=1;      
//  387     OLED_RST=0;*/
//  388     OLED_SCLH;
        MOVS     R2,#+1
        MOVS     R1,#+0
        LDR.N    R0,??DataTable11  ;; 0x400ff0c0
        BL       GPIO_SetPinStat
//  389     OLED_RSTL;
        MOVS     R2,#+0
        MOVS     R1,#+16
        LDR.N    R0,??DataTable11_2  ;; 0x400ff100
        BL       GPIO_SetPinStat
//  390     
//  391     for(i=0;i<200;i++)
        MOVS     R0,#+0
        B.N      ??OLED_Init_0
??OLED_Init_1:
        ADDS     R0,R0,#+1
??OLED_Init_0:
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        CMP      R0,#+200
        BCC.N    ??OLED_Init_1
//  392     {
//  393         ;            //´ÓÉÏµçµ½ÏÂÃæ¿ªÊ¼³õÊ¼»¯ÒªÓÐ×ã¹»µÄÊ±¼ä£¬¼´µÈ´ýRC¸´Î»Íê±Ï
//  394     }
//  395     OLED_RSTH;
        MOVS     R2,#+1
        MOVS     R1,#+16
        LDR.N    R0,??DataTable11_2  ;; 0x400ff100
        BL       GPIO_SetPinStat
//  396 
//  397     OLED_WrCmd(0xAE); //¹Ø±ÕÏÔÊ¾
        MOVS     R0,#+174
        BL       OLED_WrCmd
//  398     OLED_WrCmd(0xD5); //ÉèÖÃÊ±ÖÓ·ÖÆµÒò×Ó,Õðµ´ÆµÂÊ
        MOVS     R0,#+213
        BL       OLED_WrCmd
//  399     OLED_WrCmd(0x80); //[3:0],·ÖÆµÒò×Ó;[7:4],Õðµ´ÆµÂÊ
        MOVS     R0,#+128
        BL       OLED_WrCmd
//  400     OLED_WrCmd(0xA8); //ÉèÖÃÇý¶¯Â·Êý
        MOVS     R0,#+168
        BL       OLED_WrCmd
//  401     OLED_WrCmd(0x3F); //Ä¬ÈÏ0x3F(1-64)63
        MOVS     R0,#+63
        BL       OLED_WrCmd
//  402     OLED_WrCmd(0xD3); //ÉèÖÃÏÔÊ¾Æ«ÒÆ(¼´ÔÚÉè¶¨µÄ»ù´¡ÉÏ×Ô¶¯¼ÓÉÏÒ»¶¨µÄÆ«ÒÆÁ¿,×¨Ö¸ÐÐµØÖ·µÄÆ«ÒÆ£¬¶ÔÁÐµØÖ·ÎÞÓ°Ïì)
        MOVS     R0,#+211
        BL       OLED_WrCmd
//  403     OLED_WrCmd(0x00); //Ä¬ÈÏÎª0
        MOVS     R0,#+0
        BL       OLED_WrCmd
//  404     OLED_WrCmd(0x40); //ÉèÖÃÏÔÊ¾¿ªÊ¼ÐÐ[5:0],ÐÐÊý.
        MOVS     R0,#+64
        BL       OLED_WrCmd
//  405     OLED_WrCmd(0x8D); //µçºÉ±ÃÉèÖÃ
        MOVS     R0,#+141
        BL       OLED_WrCmd
//  406     OLED_WrCmd(0x14); //bit2,¿ªÆô/¹Ø±Õ 
        MOVS     R0,#+20
        BL       OLED_WrCmd
//  407     OLED_WrCmd(0x20); //ÉèÖÃÄÚ´æµØÖ·Ä£Ê½
        MOVS     R0,#+32
        BL       OLED_WrCmd
//  408     OLED_WrCmd(0x02); //[1:0],00,ÁÐµØÖ·Ä£Ê½;01,ÐÐµØÖ·Ä£Ê½;10,Ò³µØÖ·Ä£Ê½;Ä¬ÈÏ10; 
        MOVS     R0,#+2
        BL       OLED_WrCmd
//  409     OLED_WrCmd(0xA1); //¶ÎÖØ¶¨ÒåÉèÖÃbit0:0,0->0;1,0->127;
        MOVS     R0,#+161
        BL       OLED_WrCmd
//  410     //A1ÁÐÉ¨ÃèË³Ðò¾ùÎª×Ô×óÏòÓÒ£¬A0ÁÐÉ¨ÃèË³Ðò¾ùÎª×ÔÓÒÏò×ó	
//  411     //COMÉ¨Ãè·½Ïò£º0xC0:COM0-COM63 ; 0xC8:COM63-COM0
//  412     OLED_WrCmd(0xC8);// ÉèÖÃCOMÉ¨Ãè·½Ïò;bit3:0,ÆÕÍ¨Ä£Ê½;1,ÖØ¶¨ÒåÄ£Ê½ COM[N-1]->COM0;N:Çý¶¯Â·Êý
        MOVS     R0,#+200
        BL       OLED_WrCmd
//  413     OLED_WrCmd(0xDA);//ÉèÖÃCOMÓ²¼þÒý½ÅÅäÖÃ
        MOVS     R0,#+218
        BL       OLED_WrCmd
//  414     OLED_WrCmd(0x12); //[5:4]ÅäÖÃ
        MOVS     R0,#+18
        BL       OLED_WrCmd
//  415     //µÚ4Î»0¾ö¶¨ÊÇÁ¬ÐøÉ¨ÃèCOM¶Ë(0,1...32...63)»¹ÊÇ1½»ÌæÉ¨ÃèCOM¶Ë(0,32,1,33....31,63)
//  416     //×¢ÒâÊµ¼ÊÊä³öË³ÐòÎª0£¬32£¬1£¬33.....31£¬63£¬Òò´ËÁ¬ÐøÉ¨Ãè¶ÔÓ¦½»ÌæÏÔÊ¾£¬½»ÌæÉ¨Ãè¶ÔÓ¦Á¬ÐøÏÔÊ¾
//  417     //µÚÎåÎ»¾ö¶¨ÊÇ·ñ¶ÔCOM0-COM31ÓëCOM32-COM63½øÐÐÖØÓ³Éä£¬1ÎªÔÊÐí£¬0Îª½ûÖ¹
//  418 
//  419     OLED_WrCmd(0x81); //¶Ô±È¶ÈÉèÖÃ
        MOVS     R0,#+129
        BL       OLED_WrCmd
//  420     OLED_WrCmd(0xEF); //1~255,Ä¬ÈÏ0X7F(ÁÁ¶ÈÉèÖÃ£¬Ô½´óÔ½ÁÁ)
        MOVS     R0,#+239
        BL       OLED_WrCmd
//  421     OLED_WrCmd(0xD9); //ÉèÖÃÔ¤³äµçÖÜÆÚ
        MOVS     R0,#+217
        BL       OLED_WrCmd
//  422     OLED_WrCmd(0xF1); //[3:0],PHASE 1;[7:4],PHASE 2;
        MOVS     R0,#+241
        BL       OLED_WrCmd
//  423     OLED_WrCmd(0xDB); //ÉèÖÃVCOMHµçÑ¹±¶ÂÊ
        MOVS     R0,#+219
        BL       OLED_WrCmd
//  424     OLED_WrCmd(0x30); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
        MOVS     R0,#+48
        BL       OLED_WrCmd
//  425     OLED_WrCmd(0xA4); //È«¾ÖÏÔÊ¾¿ªÆôbit0:1,¿ªÆô;0,¹Ø±Õ;(°×ÆÁ/ºÚÆÁ )
        MOVS     R0,#+164
        BL       OLED_WrCmd
//  426     OLED_WrCmd(0xA6); //ÉèÖÃÏÔÊ¾·½Ê½;bit0:1,·´ÏàÏÔÊ¾;0,Õý³£ÏÔÊ¾
        MOVS     R0,#+166
        BL       OLED_WrCmd
//  427     OLED_WrCmd(0xAF); //¿ªÆôÏÔÊ¾	
        MOVS     R0,#+175
        BL       OLED_WrCmd
//  428 
//  429     OLED_SetPos(0,0);
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       OLED_SetPos
//  430 } 
        POP      {R0,PC}          ;; return
//  431  
//  432 	   			 
//  433 //ÇåÆÁº¯Êý,ÇåÍêÆÁ,Õû¸öÆÁÄ»ÊÇºÚÉ«µÄ£¬ºÍÃ»µãÁÁÒ»Ñù	  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  434 void OLED_Clear(void)  
//  435 {  
//  436       int8u_t i,n;  
//  437       for(i=0;i<8;i++)
OLED_Clear:
        MOVS     R0,#+0
        B.N      ??OLED_Clear_0
//  438               for(n=0;n<128;n++)
//  439                       Display_GRAM[n][i]=0x00;  
??OLED_Clear_1:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LDR.N    R2,??DataTable11_3
        ADDS     R2,R2,R1, LSL #+3
        MOVS     R3,#+0
        STRB     R3,[R0, R2]
        ADDS     R1,R1,#+1
??OLED_Clear_2:
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        CMP      R1,#+128
        BCC.N    ??OLED_Clear_1
        ADDS     R0,R0,#+1
??OLED_Clear_0:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+8
        BCS.N    ??OLED_Clear_3
        MOVS     R1,#+0
        B.N      ??OLED_Clear_2
//  440       //OLED_Refresh_Gram();//¸üÐÂÏÔÊ¾
//  441 }
??OLED_Clear_3:
        BX       LR               ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  442 void OLED_Clear_Num(int8u_t row)  
//  443 {
//  444   int8u_t n;
//  445   
//  446   for(n=NUMPOS;n<128;n++)
OLED_Clear_Num:
        MOVS     R1,#+88
        B.N      ??OLED_Clear_Num_0
//  447     Display_GRAM[n][row]=0x00;
??OLED_Clear_Num_1:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LDR.N    R2,??DataTable11_3
        ADDS     R2,R2,R1, LSL #+3
        MOVS     R3,#+0
        STRB     R3,[R0, R2]
        ADDS     R1,R1,#+1
??OLED_Clear_Num_0:
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        CMP      R1,#+128
        BCC.N    ??OLED_Clear_Num_1
//  448 }
        BX       LR               ;; return
//  449 //ÔÚÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸ö×Ö·û,°üÀ¨²¿·Ö×Ö·û
//  450 //x:0~127
//  451 //y:0~63
//  452 //mode:0,·´°×ÏÔÊ¾;1,Õý³£ÏÔÊ¾				 
//  453 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  454 void OLED_Write_Char(int8u_t x,int8u_t y,int8u_t chr,int8u_t mode)
//  455 {      			    
OLED_Write_Char:
        PUSH     {R4-R7}
//  456    			    
//  457     int8u_t t;
//  458     chr=chr-' ';//µÃµ½Æ«ÒÆºóµÄÖµ			   
        SUBS     R2,R2,#+32
//  459     for(t=0;t<6;t++)//°´ÐÐÐ´Èë£¬Ò»¹²Ð´sizeÐÐ
        MOVS     R4,#+0
        B.N      ??OLED_Write_Char_0
//  460     {   
//  461         if(mode) 
//  462         {
//  463             Display_GRAM[x+t][y/8]=ASCII_0608[chr][t];  //µ÷ÓÃ0608×ÖÌå
//  464         }
//  465         else //·´°×ÏÔÊ¾
//  466         {
//  467             Display_GRAM[x+t][y/8]=~ASCII_0608[chr][t];  //µ÷ÓÃ0608×ÖÌå
??OLED_Write_Char_1:
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R5,#+8
        SDIV     R5,R1,R5
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        UXTAB    R6,R4,R0
        LDR.N    R7,??DataTable11_3
        ADDS     R6,R7,R6, LSL #+3
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R7,#+6
        LDR.W    R12,??DataTable11_4
        MLA      R7,R7,R2,R12
        LDRB     R7,[R4, R7]
        MVNS     R7,R7
        STRB     R7,[R5, R6]
//  468         }	
??OLED_Write_Char_2:
        ADDS     R4,R4,#+1
??OLED_Write_Char_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+6
        BCS.N    ??OLED_Write_Char_3
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        CMP      R3,#+0
        BEQ.N    ??OLED_Write_Char_1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R5,#+8
        SDIV     R5,R1,R5
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        UXTAB    R6,R4,R0
        LDR.N    R7,??DataTable11_3
        ADDS     R6,R7,R6, LSL #+3
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R7,#+6
        LDR.W    R12,??DataTable11_4
        MLA      R7,R7,R2,R12
        LDRB     R7,[R4, R7]
        STRB     R7,[R5, R6]
        B.N      ??OLED_Write_Char_2
//  469      }
//  470 }
??OLED_Write_Char_3:
        POP      {R4-R7}
        BX       LR               ;; return
//  471 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  472 void OLED_6x8Str(unsigned char x, unsigned char y, unsigned char ch[])
//  473 {
OLED_6x8Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  474 	unsigned char c=0,i=0,j=0;
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??OLED_6x8Str_0
//  475 	while (ch[j]!='\0')
//  476 	{
//  477 		c = ch[j]-32;
//  478 		if(x>126)
//  479 		{
//  480 		  x=0;y++;
//  481 		}
//  482 		OLED_SetPos(x,y);
//  483 		for(i=0;i<6;i++)
//  484 		{
//  485 	          OLED_WrDat(ASCII_0608[c][i]);
??OLED_6x8Str_1:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R0,#+6
        LDR.N    R1,??DataTable11_4
        MLA      R0,R0,R7,R1
        LDRB     R0,[R8, R0]
        BL       OLED_WrDat
//  486 		}
        ADDS     R8,R8,#+1
??OLED_6x8Str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+6
        BCC.N    ??OLED_6x8Str_1
//  487 		x+=6;
        ADDS     R4,R4,#+6
//  488 		j++;
        ADDS     R9,R9,#+1
??OLED_6x8Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_6x8Str_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+127
        BCC.N    ??OLED_6x8Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??OLED_6x8Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_SetPos
        MOVS     R8,#+0
        B.N      ??OLED_6x8Str_2
//  489 	}
//  490 }
??OLED_6x8Str_3:
        POP      {R0,R4-R9,PC}    ;; return
//  491 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  492 void Show_BaseData(void) 
//  493 {
//  494     
//  495     
//  496 }
Show_BaseData:
        BX       LR               ;; return
//  497 /**********************************************************
//  498  * º¯ÊýÃû£ºvoid Dis_String
//  499  * Èë¿Ú²ÎÊý£ºx(0~121):×Ö·û´®ÆðÊ¼Î»ÖÃ
//  500  * 			y(0~56):×Ö·û´®ÐÐÊý
//  501  * 			mode:1 Õý³£ÏÔÊ¾£¬0 ·´É«ÏÔÊ¾
//  502  * ×÷ÓÃ£ºÏÔÊ¾Ò»´®×Ö·û´®
//  503  * ********************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  504  void Dis_String(int8u_t x,int8u_t y, int8u_t *str,int8u_t mode)
//  505  {
Dis_String:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
        MOVS     R7,R3
        B.N      ??Dis_String_0
//  506 	 while(*str && x < 121) {OLED_Write_Char(x+=6, y, *str,mode); str++;}
??Dis_String_1:
        ADDS     R4,R4,#+6
        MOVS     R3,R7
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        LDRB     R2,[R6, #+0]
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Write_Char
        ADDS     R6,R6,#+1
??Dis_String_0:
        LDRB     R0,[R6, #+0]
        CMP      R0,#+0
        BEQ.N    ??Dis_String_2
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BCC.N    ??Dis_String_1
//  507  }
??Dis_String_2:
        POP      {R0,R4-R7,PC}    ;; return
//  508 
//  509  /*********************************************************
//  510   * º¯ÊýÃû£ºvoid Dis_Number
//  511   * Èë¿Ú²ÎÊý£ºx(0~121):Êý×ÖµÄÎ»ÖÃ
//  512   * 		y(0~56):Êý×ÖµÄÐÐÊý
//  513   * 		num(0~65535):ÒªÏÔÊ¾µÄÊý×Ö
//  514   * ×÷ÓÃ£º¶¨Î»ÏÔÊ¾Êý×Ö
//  515   ***********************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  516 void Dis_Number(int8u_t x, int8u_t y, int16u_t num)
//  517 {
Dis_Number:
        PUSH     {R2-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  518     signed   char i;
//  519     unsigned char ii;
//  520     unsigned char dat[6];
//  521 
//  522     for(i = 0; i < 6; i++) dat[i] = 0; 	//³õÊ¼»¯Êý¾Ý
        MOVS     R6,#+0
        B.N      ??Dis_Number_0
??Dis_Number_1:
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
        ADD      R0,SP,#+0
        MOVS     R1,#+0
        STRB     R1,[R6, R0]
        ADDS     R6,R6,#+1
??Dis_Number_0:
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
        CMP      R6,#+6
        BLT.N    ??Dis_Number_1
//  523     i = 0;
        MOVS     R6,#+0
        B.N      ??Dis_Number_2
//  524     while(num / 10)						//²ðÎ»
//  525     {
//  526             dat[i] = num % 10;				//×îµÍÎ»
??Dis_Number_3:
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        MOVS     R0,#+10
        SDIV     R1,R2,R0
        MLS      R0,R0,R1,R2
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
        ADD      R1,SP,#+0
        STRB     R0,[R6, R1]
//  527             num /= 10; 
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        MOVS     R0,#+10
        SDIV     R2,R2,R0
//  528             i++;
        ADDS     R6,R6,#+1
//  529     }
??Dis_Number_2:
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        MOVS     R0,#+10
        SDIV     R0,R2,R0
        CMP      R0,#+0
        BNE.N    ??Dis_Number_3
//  530     dat[i] = num;					//×î¸ßÎ»
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
        ADD      R0,SP,#+0
        STRB     R2,[R6, R0]
//  531     ii = i;								//±£´ædatµÄÎ»Êý
        MOVS     R0,R6
        B.N      ??Dis_Number_4
//  532     for(; i >= 0; i--)	dat[i] += 48;	//×ª»¯³ÉASCII
??Dis_Number_5:
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
        ADD      R1,SP,#+0
        LDRB     R1,[R6, R1]
        ADDS     R1,R1,#+48
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
        ADD      R2,SP,#+0
        STRB     R1,[R6, R2]
        SUBS     R6,R6,#+1
??Dis_Number_4:
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
        CMP      R6,#+0
        BPL.N    ??Dis_Number_5
//  533     
//  534     for(i = ii; i >= 0; i--)
        MOVS     R6,R0
        B.N      ??Dis_Number_6
//  535       OLED_Write_Char(x+=6, y, dat[i],1);			//Êä³öÊýÖµ
??Dis_Number_7:
        ADDS     R4,R4,#+6
        MOVS     R3,#+1
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
        ADD      R0,SP,#+0
        LDRB     R2,[R6, R0]
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Write_Char
        SUBS     R6,R6,#+1
??Dis_Number_6:
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
        CMP      R6,#+0
        BPL.N    ??Dis_Number_7
//  536 }
        POP      {R0,R1,R4-R6,PC}  ;; return
//  537 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  538 void write_OLED(void)
//  539 {
write_OLED:
        PUSH     {R7,LR}
//  540   OLED_Refresh_Gram();
        BL       OLED_Refresh_Gram
//  541 }
        POP      {R0,PC}          ;; return
//  542 
//  543 //ÔÚÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸öºº×Ö
//  544 //x:0~127
//  545 //y:0~63
//  546 //mode:0,·´°×ÏÔÊ¾;1,Õý³£ÏÔÊ¾				 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  547 void OLED_PrintChn(int8u_t x, int8u_t y, char* h_dat, int8u_t mode)
//  548 {
OLED_PrintChn:
        PUSH     {R4-R7}
//  549   int i,j;
//  550   
//  551   for(i=1;i>=0;i--)
        MOVS     R4,#+1
        B.N      ??OLED_PrintChn_0
??OLED_PrintChn_1:
        SUBS     R4,R4,#+1
??OLED_PrintChn_0:
        CMP      R4,#+0
        BMI.N    ??OLED_PrintChn_2
//  552   {
//  553     for(j=15;j>=0;j--)
        MOVS     R5,#+15
        B.N      ??OLED_PrintChn_3
//  554     {
//  555       if(mode==1)
//  556         Display_GRAM[x+j][y/8+i] = h_dat[16 * i + j];
//  557       else
//  558         Display_GRAM[x+j][y/8+i] = h_dat[16 * i + j];
??OLED_PrintChn_4:
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R6,#+8
        SDIV     R6,R1,R6
        ADDS     R6,R4,R6
        UXTAB    R7,R5,R0
        LDR.W    R12,??DataTable11_3
        ADDS     R7,R12,R7, LSL #+3
        ADDS     R12,R5,R4, LSL #+4
        LDRB     R12,[R12, R2]
        STRB     R12,[R6, R7]
??OLED_PrintChn_5:
        SUBS     R5,R5,#+1
??OLED_PrintChn_3:
        CMP      R5,#+0
        BMI.N    ??OLED_PrintChn_1
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        CMP      R3,#+1
        BNE.N    ??OLED_PrintChn_4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R6,#+8
        SDIV     R6,R1,R6
        ADDS     R6,R4,R6
        UXTAB    R7,R5,R0
        LDR.W    R12,??DataTable11_3
        ADDS     R7,R12,R7, LSL #+3
        ADDS     R12,R5,R4, LSL #+4
        LDRB     R12,[R12, R2]
        STRB     R12,[R6, R7]
        B.N      ??OLED_PrintChn_5
//  559     }
//  560   }
//  561 }
??OLED_PrintChn_2:
        POP      {R4-R7}
        BX       LR               ;; return
//  562 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  563 void OLED_ShowChn(unsigned char x, unsigned char y, signed char *dat)
//  564 {
OLED_ShowChn:
        PUSH     {R3-R5,LR}
//  565   unsigned char i;
//  566   
//  567   for(i = 0; i < GB_16_num; i++)
        MOVS     R4,#+0
        B.N      ??OLED_ShowChn_0
??OLED_ShowChn_1:
        ADDS     R4,R4,#+1
??OLED_ShowChn_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+38
        BCS.N    ??OLED_ShowChn_2
//  568   {
//  569           if((GB_16[i].Index[0] == dat[0]) && (GB_16[i].Index[1] == dat[1])) break;
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R3,#+34
        LDR.N    R5,??DataTable11_5
        MLA      R3,R3,R4,R5
        LDRSB    R3,[R3, #+0]
        LDRSB    R5,[R2, #+0]
        CMP      R3,R5
        BNE.N    ??OLED_ShowChn_1
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R3,#+34
        LDR.N    R5,??DataTable11_5
        MLA      R3,R3,R4,R5
        LDRSB    R3,[R3, #+1]
        LDRSB    R5,[R2, #+1]
        CMP      R3,R5
        BNE.N    ??OLED_ShowChn_1
//  570   }
//  571   OLED_PrintChn(x, y, GB_16[i].Msk, 1);
??OLED_ShowChn_2:
        MOVS     R3,#+1
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R2,#+34
        LDR.N    R5,??DataTable11_5
        MLA      R2,R2,R4,R5
        ADDS     R2,R2,#+2
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_PrintChn
//  572 }
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11:
        DC32     0x400ff0c0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_1:
        DC32     0x400ff080

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_2:
        DC32     0x400ff100

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_3:
        DC32     Display_GRAM

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_4:
        DC32     ASCII_0608

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_5:
        DC32     GB_16
//  573 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  574 void OLED_DisChnStr(unsigned char x, unsigned char y, int8s_t* chnstr)
//  575 {
OLED_DisChnStr:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
        B.N      ??OLED_DisChnStr_0
//  576   while(*chnstr != '\0')
//  577   {
//  578     OLED_ShowChn(x,y,chnstr);
//  579     x+=16;
//  580     if(x>=128)
//  581       break;
//  582     chnstr+=2;
??OLED_DisChnStr_1:
        ADDS     R6,R6,#+2
??OLED_DisChnStr_0:
        LDRSB    R0,[R6, #+0]
        CMP      R0,#+0
        BEQ.N    ??OLED_DisChnStr_2
        MOVS     R2,R6
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_ShowChn
        ADDS     R4,R4,#+16
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+128
        BCC.N    ??OLED_DisChnStr_1
//  583   }
//  584 }
??OLED_DisChnStr_2:
        POP      {R4-R6,PC}       ;; return

        SECTION `.iar_vfe_header`:DATA:REORDER:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
//  585 /*********************************************************/
//  586 //  Angle_m  Gyro_m  L_ValidYou  R_ValidYou
//  587 //  NowSpeed_L NowSpeed_R ObjectDifSpd  g_nMotorDiff
//  588 //  ÃÔÄãÈüµÀÍ¼Ïñ
//  589 /*********************************************************/
//  590 
//  591 //void Show_Path(void)
//  592 //{
//  593     /*  INT32U Temp=0;
//  594     int8u_t i,t,n,m,Start,End;
//  595     Temp=LightPos;   //¼ÓËÙ¶È¼ÆËã³öµÄ½Ç¶È
//  596  
//  597     for(t=2;t<8;t++) 
//  598     {
//  599              Display_GRAM[t][0]=ASCII_0608[11][t-2];
//  600        
//  601 		  
//  602     }
//  603     for(n=3;n>0;n--) 
//  604     {
//  605         m=n*6;
//  606             
//  607        for(t=2;t<8;t++)
//  608         {            
//  609          Display_GRAM[t+m][0]=ASCII_0608[Temp%10+16][t-2];            
//  610         } 
//  611         Temp/=10;
//  612     } 
//  613     Temp=LightPos;
//  614     for(t=2;t<8;t++)
//  615     {
//  616         
//  617              Display_GRAM[t+30][0]=ASCII_0608[11][t-2];
//  618         
//  619 		  
//  620     }
//  621     for(n=8;n>5;n--) 
//  622     {
//  623         m=n*6;
//  624             
//  625         for(t=2;t<8;t++)
//  626         {            
//  627          Display_GRAM[t+m][0]=ASCII_0608[Temp%10+16][t-2];            
//  628         } 
//  629         Temp/=10;
//  630     }
//  631     Temp=LightPos;
//  632     for(t=2;t<8;t++)
//  633     {
//  634         if(Temp>0)
//  635              Display_GRAM[t+60][0]=ASCII_0608[11][t-2];
//  636         else
//  637 		{
//  638              Display_GRAM[t+60][0]=ASCII_0608[13][t-2];
//  639 			 Temp=-Temp;
//  640 		}  
//  641     }
//  642     for(n=13;n>10;n--) 
//  643     {
//  644         m=n*6;
//  645             
//  646         for(t=2;t<8;t++) 
//  647         {            
//  648          Display_GRAM[t+m][0]=ASCII_0608[Temp%10+16][t-2];            
//  649         } 
//  650         Temp/=10;
//  651     }
//  652     Temp=LightPos;
//  653     for(t=2;t<8;t++)
//  654     {
//  655         if(Temp>0)
//  656              Display_GRAM[t+90][0]=ASCII_0608[11][t-2];
//  657         else
//  658 		{
//  659              Display_GRAM[t+90][0]=ASCII_0608[13][t-2];
//  660 			 Temp=-Temp;
//  661 		}  
//  662     }
//  663     for(n=18;n>15;n--) 
//  664     {
//  665         m=n*6;
//  666             
//  667         for(t=2;t<8;t++) 
//  668         {            
//  669          Display_GRAM[t+m][0]=ASCII_0608[Temp%10+16][t-2];            
//  670         } 
//  671         Temp/=10;
//  672     }                   
//  673    
//  674     for(n=3;n>0;n--) 
//  675     {
//  676         m=n*6;
//  677             
//  678        for(t=2;t<8;t++)
//  679         {            
//  680          Display_GRAM[t+m][1]=ASCII_0608[Temp%10+16][t-2];            
//  681         } 
//  682         Temp/=10;
//  683     } 
//  684     
//  685     for(m=7;m>1;m--) 
//  686     {
//  687         
//  688         for(i=0;i<8;i++) 
//  689         {
//  690             
//  691         }
//  692     }
//  693     //OLED_Refresh_Gram();
//  694        
//  695    */
//  696  /*   int8u_t cnt,temp,i,PointNumTemp,j,EdgeTemp,PosTemp;
//  697     //OLED_Clear();
//  698     for(cnt=0;cnt<60;cnt++) 
//  699     {
//  700         temp=7-cnt/8;
//  701         PointNumTemp=PointNum[UseLine[cnt]];
//  702         PosTemp=(0x80>>(cnt%8));
//  703         j=0;
//  704         for(i=PointNumTemp;i>0;i--) 
//  705         {
//  706             EdgeTemp=v_point_up[UseLine[cnt]][i-1]/2;
//  707           //j=v_point_up[UseLine[cnt]][i-1]/2;
//  708            for(;j<EdgeTemp;j++)
//  709                Display_GRAM[j][temp]&=~PosTemp;
//  710             EdgeTemp=v_point_down[UseLine[cnt]][i-1]/2;
//  711             for(;j<EdgeTemp;j++)
//  712                 Display_GRAM[j][temp]|=PosTemp;
//  713             
//  714         }
//  715         for(;j<128;j++)
//  716                 Display_GRAM[j][temp]&=~PosTemp; 
//  717     }
//  718     OLED_Refresh_Gram();
//  719 }
//  720 */
// 
// 2 352 bytes in section .data
//   576 bytes in section .rodata
// 1 484 bytes in section .text
// 
// 1 484 bytes of CODE  memory
//   576 bytes of CONST memory
// 2 352 bytes of DATA  memory
//
//Errors: none
//Warnings: none
