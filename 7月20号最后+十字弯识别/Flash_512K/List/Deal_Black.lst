###############################################################################
#                                                                             #
#                                                       14/Oct/2013  15:16:32 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\qlalxx\Desktop\fighting\MyFunction\Deal_Black.c #
#    Command line =  C:\Users\qlalxx\Desktop\fighting\MyFunction\Deal_Black.c #
#                     -D IAR -lCN C:\Users\qlalxx\Desktop\fighting\Flash_512K #
#                    \List\ -lB C:\Users\qlalxx\Desktop\fighting\Flash_512K\L #
#                    ist\ -o C:\Users\qlalxx\Desktop\fighting\Flash_512K\Obj\ #
#                     --no_cse --no_unroll --no_inline --no_code_motion       #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0 Evaluation\arm\INC\c\DLib_Config_Normal.h" #
#                     -I C:\Users\qlalxx\Desktop\fighting\Library\CPU\ -I     #
#                    C:\Users\qlalxx\Desktop\fighting\Library\Drivers\ADC\    #
#                    -I C:\Users\qlalxx\Desktop\fighting\Library\Drivers\FTM\ #
#                     -I C:\Users\qlalxx\Desktop\fighting\Library\Drivers\GPI #
#                    O\ -I C:\Users\qlalxx\Desktop\fighting\Library\Drivers\P #
#                    IT\ -I C:\Users\qlalxx\Desktop\fighting\MyFunction\ -I   #
#                    C:\Users\qlalxx\Desktop\fighting\SD_System\ -Ol          #
#    List file    =  C:\Users\qlalxx\Desktop\fighting\Flash_512K\List\Deal_Bl #
#                    ack.lst                                                  #
#    Object file  =  C:\Users\qlalxx\Desktop\fighting\Flash_512K\Obj\Deal_Bla #
#                    ck.o                                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\qlalxx\Desktop\fighting\MyFunction\Deal_Black.c
      1          
      2          #include "AllHeaders.h"
      3          

   \                                 In section .bss, align 2
      4          int16s_t   Black_Position=0;
   \                     Black_Position:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
      5          int16s_t   His_Black_Position=0;
   \                     His_Black_Position:
   \   00000000                      DS8 2
      6          

   \                                 In section .bss, align 4
      7          int16s_t   Surface_CCD_Black_Value[20][128]={0};                      //记录历史二值化点
   \                     Surface_CCD_Black_Value:
   \   00000000                      DS8 5120

   \                                 In section .bss, align 4
      8          int16s_t   Surface_CCD_Black_Position[20][2]={0};                     //记录历史左右黑点数
   \                     Surface_CCD_Black_Position:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
      9          int16s_t   Surface_CCD_Black_Weight[20]={0};                       //记录历史权值点
   \                     Surface_CCD_Black_Weight:
   \   00000000                      DS8 40

   \                                 In section .bss, align 2
     10          int16s_t   Surface_CCD_Black_Value_Cnt=0;
   \                     Surface_CCD_Black_Value_Cnt:
   \   00000000                      DS8 2
     11          

   \                                 In section .bss, align 4
     12          int16s_t   ccd_value[128]={0};
   \                     ccd_value:
   \   00000000                      DS8 256

   \                                 In section .bss, align 4
     13          int16s_t   Down_ccd_value[128]={0};
   \                     Down_ccd_value:
   \   00000000                      DS8 256

   \                                 In section .bss, align 4
     14          int16s_t   Start_value[3]={0};                    //对管二值化
   \                     Start_value:
   \   00000000                      DS8 8
     15          

   \                                 In section .bss, align 4
     16          int total_weight;                                 //总权值
   \                     total_weight:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     17          int aver_weight;                                  //平均权值
   \                     aver_weight:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     18          int Up_black_num;                                 //黑点个数 
   \                     Up_black_num:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     19          int Down_black_num;
   \                     Down_black_num:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     20          int Sum_Black_Position=0;
   \                     Sum_Black_Position:
   \   00000000                      DS8 4
     21          

   \                                 In section .bss, align 4
     22          int Start_flag=0;
   \                     Start_flag:
   \   00000000                      DS8 4
     23          

   \                                 In section .bss, align 4
     24          int Servo_Temp_P = 0;
   \                     Servo_Temp_P:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     25          int Servo_Temp_D = 0;
   \                     Servo_Temp_D:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     26          int Line_Lost_Flag=0;                             //丢线标志位
   \                     Line_Lost_Flag:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     27          int Black_Position_Last=0;                        //上一次的黑线位置
   \                     Black_Position_Last:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     28          int barrier_flag=0;
   \                     barrier_flag:
   \   00000000                      DS8 4
     29          int Start_flag;

   \                                 In section .bss, align 4
     30          int j=0;
   \                     j:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     31          int32s_t Turn_Speed;                               //转向速度
   \                     Turn_Speed:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     32          int32s_t Turn_Speedold;                            //历史转向速度
   \                     Turn_Speedold:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     33          int32s_t Turn_Speednew;                            //最新转向速度
   \                     Turn_Speednew:
   \   00000000                      DS8 4
     34          

   \                                 In section .bss, align 4
     35          int32s_t Turn_SpeedOut;                            //转向输出值，用于平缓输出
   \                     Turn_SpeedOut:
   \   00000000                      DS8 4
     36          
     37          
     38          #define Turn_Kp  2.5
     39          #define Turn_Kd  4.4                            //微分项的作用需要稍微减弱防止转向突变
     40          
     41          //----------------------------------------------------------------------
     42          //函 数 名:Deal_Black                                                       
     43          //功    能:对采集的黑线值进行处理                                       
     44          //参    数:无                          
     45          //返    回:无                                                                                       
     46          //----------------------------------------------------------------------

   \                                 In section .rodata, align 4
     47          const unsigned  CCD_AD_LEVEL[128]=                                            //CCD采样值用二值化表
   \                     CCD_AD_LEVEL:
   \   00000000   0x0000002D         DC32 45, 45, 50, 50, 50, 50, 50, 60, 60, 60, 60, 70, 70, 75, 75, 75, 75
   \              0x0000002D   
   \              0x00000032   
   \              0x00000032   
   \              0x00000032   
   \              0x00000032   
   \              0x00000032   
   \              0x0000003C   
   \              0x0000003C   
   \              0x0000003C   
   \              0x0000003C   
   \              0x00000046   
   \              0x00000046   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \   00000044   0x0000004B         DC32 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \   00000088   0x0000004B         DC32 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \   000000CC   0x0000004B         DC32 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \   00000110   0x0000004B         DC32 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \   00000154   0x0000004B         DC32 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \   00000198   0x0000004B         DC32 75, 75, 75, 75, 75, 75, 75, 75, 75, 78, 75, 75, 75, 70, 70, 65, 60
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004E   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x00000046   
   \              0x00000046   
   \              0x00000041   
   \              0x0000003C   
   \   000001DC   0x0000003C         DC32 60, 60, 50, 45, 45, 40, 40, 40, 35
   \              0x0000003C   
   \              0x00000032   
   \              0x0000002D   
   \              0x0000002D   
   \              0x00000028   
   \              0x00000028   
   \              0x00000028   
   \              0x00000023   
     48          {
     49            45,45,50,50,50,50,50,60,60,60,60,70,70,75,75,75,
     50            75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,
     51            75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,
     52            75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,
     53            75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,
     54            75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,
     55            75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,78,
     56            75,75,75,70,70,65,60,60,60,50,45,45,40,40,40,35
     57          };
     58          

   \                                 In section .rodata, align 4
     59          const unsigned  CCD_AD_LEVEL1[128]=                                            //CCD采样值用二值化表
   \                     CCD_AD_LEVEL1:
   \   00000000   0x0000002D         DC32 45, 45, 50, 50, 50, 50, 50, 60, 60, 60, 60, 70, 70, 75, 75, 75, 75
   \              0x0000002D   
   \              0x00000032   
   \              0x00000032   
   \              0x00000032   
   \              0x00000032   
   \              0x00000032   
   \              0x0000003C   
   \              0x0000003C   
   \              0x0000003C   
   \              0x0000003C   
   \              0x00000046   
   \              0x00000046   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \   00000044   0x0000004B         DC32 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \   00000088   0x0000004B         DC32 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \   000000CC   0x0000004B         DC32 75, 75, 75, 60, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000003C   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \   00000110   0x0000004B         DC32 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \   00000154   0x0000004B         DC32 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \   00000198   0x0000004B         DC32 75, 75, 75, 75, 75, 75, 75, 75, 75, 78, 75, 75, 75, 70, 70, 65, 60
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004E   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x00000046   
   \              0x00000046   
   \              0x00000041   
   \              0x0000003C   
   \   000001DC   0x0000003C         DC32 60, 60, 50, 45, 45, 40, 40, 40, 35
   \              0x0000003C   
   \              0x00000032   
   \              0x0000002D   
   \              0x0000002D   
   \              0x00000028   
   \              0x00000028   
   \              0x00000028   
   \              0x00000023   
     60          {
     61            45,45,50,50,50,50,50,60,60,60,60,70,70,75,75,75,
     62            75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,
     63            75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,
     64            75,75,75,75,75,75,60,75,75,75,75,75,75,75,75,75,
     65            75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,
     66            75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,
     67            75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,78,
     68            75,75,75,70,70,65,60,60,60,50,45,45,40,40,40,35
     69          };

   \                                 In section .data, align 4
     70          unsigned CCD_AD_LEVEL_END[128]=
   \                     CCD_AD_LEVEL_END:
   \   00000000   0x0000002D         DC32 45, 45, 50, 50, 50, 50, 50, 60, 60, 60, 60, 70, 70, 75, 75, 75, 75
   \              0x0000002D   
   \              0x00000032   
   \              0x00000032   
   \              0x00000032   
   \              0x00000032   
   \              0x00000032   
   \              0x0000003C   
   \              0x0000003C   
   \              0x0000003C   
   \              0x0000003C   
   \              0x00000046   
   \              0x00000046   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \   00000044   0x0000004B         DC32 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \   00000088   0x0000004B         DC32 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \   000000CC   0x0000004B         DC32 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \   00000110   0x0000004B         DC32 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \   00000154   0x0000004B         DC32 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \   00000198   0x0000004B         DC32 75, 75, 75, 75, 75, 75, 75, 75, 75, 78, 75, 75, 75, 70, 70, 65, 60
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004E   
   \              0x0000004B   
   \              0x0000004B   
   \              0x0000004B   
   \              0x00000046   
   \              0x00000046   
   \              0x00000041   
   \              0x0000003C   
   \   000001DC   0x0000003C         DC32 60, 60, 50, 45, 45, 40, 40, 40, 35
   \              0x0000003C   
   \              0x00000032   
   \              0x0000002D   
   \              0x0000002D   
   \              0x00000028   
   \              0x00000028   
   \              0x00000028   
   \              0x00000023   
     71          {
     72            45,45,50,50,50,50,50,60,60,60,60,70,70,75,75,75,
     73            75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,
     74            75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,
     75            75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,
     76            75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,
     77            75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,
     78            75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,78,
     79            75,75,75,70,70,65,60,60,60,50,45,45,40,40,40,35
     80          };
     81          
     82          

   \                                 In section .rodata, align 4
     83          const short int tab[128]=
   \                     tab:
   \   00000000   0xFFFF 0xFFFE      DC16 -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15
   \              0xFFFD 0xFFFC
   \              0xFFFB 0xFFFA
   \              0xFFF9 0xFFF8
   \              0xFFF7 0xFFF6
   \              0xFFF5 0xFFF4
   \              0xFFF3 0xFFF2
   \              0xFFF1       
   \   0000001E   0xFFF0 0xFFEF      DC16 -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28
   \              0xFFEE 0xFFED
   \              0xFFEC 0xFFEB
   \              0xFFEA 0xFFE9
   \              0xFFE8 0xFFE7
   \              0xFFE6 0xFFE5
   \              0xFFE4       
   \   00000038   0xFFE3 0xFFE2      DC16 -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41
   \              0xFFE1 0xFFE0
   \              0xFFDF 0xFFDE
   \              0xFFDD 0xFFDC
   \              0xFFDB 0xFFDA
   \              0xFFD9 0xFFD8
   \              0xFFD7       
   \   00000052   0xFFD6 0xFFD5      DC16 -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54
   \              0xFFD4 0xFFD3
   \              0xFFD2 0xFFD1
   \              0xFFD0 0xFFCF
   \              0xFFCE 0xFFCD
   \              0xFFCC 0xFFCB
   \              0xFFCA       
   \   0000006C   0xFFC9 0xFFC8      DC16 -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, 64, 63, 62, 61
   \              0xFFC7 0xFFC6
   \              0xFFC5 0xFFC4
   \              0xFFC3 0xFFC2
   \              0xFFC1 0xFFC0
   \              0x0040 0x003F
   \              0x003E 0x003D
   \   00000088   0x003C 0x003B      DC16 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44
   \              0x003A 0x0039
   \              0x0038 0x0037
   \              0x0036 0x0035
   \              0x0034 0x0033
   \              0x0032 0x0031
   \              0x0030 0x002F
   \              0x002E 0x002D
   \              0x002C       
   \   000000AA   0x002B 0x002A      DC16 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27
   \              0x0029 0x0028
   \              0x0027 0x0026
   \              0x0025 0x0024
   \              0x0023 0x0022
   \              0x0021 0x0020
   \              0x001F 0x001E
   \              0x001D 0x001C
   \              0x001B       
   \   000000CC   0x001A 0x0019      DC16 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10
   \              0x0018 0x0017
   \              0x0016 0x0015
   \              0x0014 0x0013
   \              0x0012 0x0011
   \              0x0010 0x000F
   \              0x000E 0x000D
   \              0x000C 0x000B
   \              0x000A       
   \   000000EE   0x0009 0x0008      DC16 9, 8, 7, 6, 5, 4, 3, 2, 1
   \              0x0007 0x0006
   \              0x0005 0x0004
   \              0x0003 0x0002
   \              0x0001       
     84          {
     85            -1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,
     86            -27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,
     87            -51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,64,63,62,61,60,59,58,57,56,55,54,53,52,51,
     88            50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,
     89            17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1
     90          };

   \                                 In section .rodata, align 4
     91          const short int tab1[128]=
   \                     tab1:
   \   00000000   0xFFFF 0xFFFD      DC16 -1, -3, -5, -7, -9, -11, -13, -15, -17, -19, -21, -23, -25, -27
   \              0xFFFB 0xFFF9
   \              0xFFF7 0xFFF5
   \              0xFFF3 0xFFF1
   \              0xFFEF 0xFFED
   \              0xFFEB 0xFFE9
   \              0xFFE7 0xFFE5
   \   0000001C   0xFFE3 0xFFE1      DC16 -29, -31, -33, -35, -37, -39, -40, -41, -42, -43, -44, -45, -46
   \              0xFFDF 0xFFDD
   \              0xFFDB 0xFFD9
   \              0xFFD8 0xFFD7
   \              0xFFD6 0xFFD5
   \              0xFFD4 0xFFD3
   \              0xFFD2       
   \   00000036   0xFFD1 0xFFD0      DC16 -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59
   \              0xFFCF 0xFFCE
   \              0xFFCD 0xFFCC
   \              0xFFCB 0xFFCA
   \              0xFFC9 0xFFC8
   \              0xFFC7 0xFFC6
   \              0xFFC5       
   \   00000050   0xFFC4 0xFFC3      DC16 -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72
   \              0xFFC2 0xFFC1
   \              0xFFC0 0xFFBF
   \              0xFFBE 0xFFBD
   \              0xFFBC 0xFFBB
   \              0xFFBA 0xFFB9
   \              0xFFB8       
   \   0000006A   0xFFB7 0xFFB6      DC16 -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, 83, 82, 81
   \              0xFFB5 0xFFB4
   \              0xFFB3 0xFFB2
   \              0xFFB1 0xFFB0
   \              0xFFAF 0xFFAE
   \              0xFFAD 0x0053
   \              0x0052 0x0051
   \   00000086   0x0050 0x004F      DC16 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64
   \              0x004E 0x004D
   \              0x004C 0x004B
   \              0x004A 0x0049
   \              0x0048 0x0047
   \              0x0046 0x0045
   \              0x0044 0x0043
   \              0x0042 0x0041
   \              0x0040       
   \   000000A8   0x003F 0x003E      DC16 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47
   \              0x003D 0x003C
   \              0x003B 0x003A
   \              0x0039 0x0038
   \              0x0037 0x0036
   \              0x0035 0x0034
   \              0x0033 0x0032
   \              0x0031 0x0030
   \              0x002F       
   \   000000CA   0x002E 0x002D      DC16 46, 45, 44, 43, 42, 41, 40, 39, 37, 35, 33, 31, 29, 27, 25, 23, 21
   \              0x002C 0x002B
   \              0x002A 0x0029
   \              0x0028 0x0027
   \              0x0025 0x0023
   \              0x0021 0x001F
   \              0x001D 0x001B
   \              0x0019 0x0017
   \              0x0015       
   \   000000EC   0x0013 0x0011      DC16 19, 17, 15, 13, 11, 9, 7, 5, 3, 1
   \              0x000F 0x000D
   \              0x000B 0x0009
   \              0x0007 0x0005
   \              0x0003 0x0001
     92          {
     93            -1,-3,-5,-7,-9,-11,-13,-15,-17,-19,-21,-23,-25,-27,-29,-31,-33,-35,-37,-39,-40,-41,-42,-43,-44,
     94            -45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,
     95            -69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,83,82,81,80,79,78,77,76,75,74,73,72,71,
     96            70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,37,35,
     97            33,31,29,27,25,23,21,19,17,15,13,11,9,7,5,3,1
     98          };
     99          

   \                                 In section .rodata, align 4
    100          const short int tab2[128]=
   \                     tab2:
   \   00000000   0xFFFF 0xFFFD      DC16 -1, -3, -5, -7, -9, -11, -13, -15, -17, -19, -20, -21, -22, -23
   \              0xFFFB 0xFFF9
   \              0xFFF7 0xFFF5
   \              0xFFF3 0xFFF1
   \              0xFFEF 0xFFED
   \              0xFFEC 0xFFEB
   \              0xFFEA 0xFFE9
   \   0000001C   0xFFE8 0xFFE7      DC16 -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36
   \              0xFFE6 0xFFE5
   \              0xFFE4 0xFFE3
   \              0xFFE2 0xFFE1
   \              0xFFE0 0xFFDF
   \              0xFFDE 0xFFDD
   \              0xFFDC       
   \   00000036   0xFFDB 0xFFDA      DC16 -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49
   \              0xFFD9 0xFFD8
   \              0xFFD7 0xFFD6
   \              0xFFD5 0xFFD4
   \              0xFFD3 0xFFD2
   \              0xFFD1 0xFFD0
   \              0xFFCF       
   \   00000050   0xFFCE 0xFFCD      DC16 -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62
   \              0xFFCC 0xFFCB
   \              0xFFCA 0xFFC9
   \              0xFFC8 0xFFC7
   \              0xFFC6 0xFFC5
   \              0xFFC4 0xFFC3
   \              0xFFC2       
   \   0000006A   0xFFC1 0xFFC0      DC16 -63, -64, -65, -66, -67, -68, -69, -70, 70, 69, 68, 67, 66, 65, 64
   \              0xFFBF 0xFFBE
   \              0xFFBD 0xFFBC
   \              0xFFBB 0xFFBA
   \              0x0046 0x0045
   \              0x0044 0x0043
   \              0x0042 0x0041
   \              0x0040       
   \   00000088   0x003F 0x003E      DC16 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47
   \              0x003D 0x003C
   \              0x003B 0x003A
   \              0x0039 0x0038
   \              0x0037 0x0036
   \              0x0035 0x0034
   \              0x0033 0x0032
   \              0x0031 0x0030
   \              0x002F       
   \   000000AA   0x002E 0x002D      DC16 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30
   \              0x002C 0x002B
   \              0x002A 0x0029
   \              0x0028 0x0027
   \              0x0026 0x0025
   \              0x0024 0x0023
   \              0x0022 0x0021
   \              0x0020 0x001F
   \              0x001E       
   \   000000CC   0x001D 0x001C      DC16 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 17, 15, 13, 11, 9, 7
   \              0x001B 0x001A
   \              0x0019 0x0018
   \              0x0017 0x0016
   \              0x0015 0x0014
   \              0x0013 0x0011
   \              0x000F 0x000D
   \              0x000B 0x0009
   \              0x0007       
   \   000000EE   0x0005 0x0003      DC16 5, 3, 1, 0, 0, 0, 0, 0, 0
   \              0x0001 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
    101          {
    102            -1,-3,-5,-7,-9,-11,-13,-15,-17,-19,-20,-21,-22,-23,-24,-25,
    103            -26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,
    104            -41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,
    105            -56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,
    106            70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,
    107            50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,
    108            30,29,28,27,26,25,24,23,22,21,20,19,17,15,13,11,9,7,5,3,1
    109          
    110          };
    111          

   \                                 In section .rodata, align 4
    112          const unsigned  Start_AD_LEVEL[3]={150,150,150};
   \                     Start_AD_LEVEL:
   \   00000000   0x00000096         DC32 150, 150, 150
   \              0x00000096   
   \              0x00000096   
    113          
    114          

   \                                 In section .text, align 2, keep-with-next
    115          void Deal_Black(void)                                  //Black_posiion为正时从后面看向左转
    116          {
   \                     Deal_Black:
   \   00000000   0xB580             PUSH     {R7,LR}
    117            int i=0;
   \   00000002   0x2000             MOVS     R0,#+0
    118           
    119            Up_black_num = 0;
   \   00000004   0x....             LDR.N    R1,??DataTable4
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x600A             STR      R2,[R1, #+0]
    120            /******************************上CCD采样二值化处理**********************************/
    121           
    122           for(i=0;i<=127;i++)
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x0008             MOVS     R0,R1
   \   0000000E   0xE004             B.N      ??Deal_Black_0
    123           { 
    124             
    125             
    126             if((Up_CCD_AD_Value[i])<(CCD_AD_LEVEL_END[i]))
    127                
    128               { 
    129                 ccd_value[i]=1;
    130                 Up_black_num++;
    131               }
    132             else
    133               {
    134                 ccd_value[i]=0;
   \                     ??Deal_Black_1:
   \   00000010   0x....             LDR.N    R1,??DataTable4_1
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0xF821 0x2010      STRH     R2,[R1, R0, LSL #+1]
    135               
    136               }
   \                     ??Deal_Black_2:
   \   00000018   0x1C40             ADDS     R0,R0,#+1
   \                     ??Deal_Black_0:
   \   0000001A   0x2880             CMP      R0,#+128
   \   0000001C   0xDA11             BGE.N    ??Deal_Black_3
   \   0000001E   0x....             LDR.N    R1,??DataTable4_2
   \   00000020   0xF831 0x1010      LDRH     R1,[R1, R0, LSL #+1]
   \   00000024   0x....             LDR.N    R2,??DataTable4_3
   \   00000026   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   0000002A   0x4291             CMP      R1,R2
   \   0000002C   0xD2F0             BCS.N    ??Deal_Black_1
   \   0000002E   0x....             LDR.N    R1,??DataTable4_1
   \   00000030   0x2201             MOVS     R2,#+1
   \   00000032   0xF821 0x2010      STRH     R2,[R1, R0, LSL #+1]
   \   00000036   0x....             LDR.N    R1,??DataTable4
   \   00000038   0x6809             LDR      R1,[R1, #+0]
   \   0000003A   0x1C49             ADDS     R1,R1,#+1
   \   0000003C   0x....             LDR.N    R2,??DataTable4
   \   0000003E   0x6011             STR      R1,[R2, #+0]
   \   00000040   0xE7EA             B.N      ??Deal_Black_2
    137           }
    138            if(Up_black_num>0&&Up_black_num<=64)   //正常情况下黑点数量在1个到4个之间 且应避免跳变次数大于三的情况
   \                     ??Deal_Black_3:
   \   00000042   0x....             LDR.N    R0,??DataTable4
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x1E40             SUBS     R0,R0,#+1
   \   00000048   0x2840             CMP      R0,#+64
   \   0000004A   0xD21C             BCS.N    ??Deal_Black_4
    139                { 
    140                   total_weight=0;                       //给保存权值之和的变量清零
   \   0000004C   0x....             LDR.N    R0,??DataTable4_4
   \   0000004E   0x2100             MOVS     R1,#+0
   \   00000050   0x6001             STR      R1,[R0, #+0]
    141                   for(i = 0;i<128;i++)                   //以下三行计算出总权值
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xE00D             B.N      ??Deal_Black_5
    142                      {
    143                       if(ccd_value[i]==1) 
   \                     ??Deal_Black_6:
   \   00000056   0x....             LDR.N    R1,??DataTable4_1
   \   00000058   0xF931 0x1010      LDRSH    R1,[R1, R0, LSL #+1]
   \   0000005C   0x2901             CMP      R1,#+1
   \   0000005E   0xD107             BNE.N    ??Deal_Black_7
    144                         {            
    145                          total_weight += tab2[i];    
   \   00000060   0x....             LDR.N    R1,??DataTable4_4
   \   00000062   0x6809             LDR      R1,[R1, #+0]
   \   00000064   0x....             LDR.N    R2,??DataTable4_5
   \   00000066   0xF932 0x2010      LDRSH    R2,[R2, R0, LSL #+1]
   \   0000006A   0x1889             ADDS     R1,R1,R2
   \   0000006C   0x....             LDR.N    R2,??DataTable4_4
   \   0000006E   0x6011             STR      R1,[R2, #+0]
    146                         }
    147                      }
   \                     ??Deal_Black_7:
   \   00000070   0x1C40             ADDS     R0,R0,#+1
   \                     ??Deal_Black_5:
   \   00000072   0x2880             CMP      R0,#+128
   \   00000074   0xDBEF             BLT.N    ??Deal_Black_6
    148                    aver_weight = total_weight/Up_black_num;  //计算出平均权值
   \   00000076   0x....             LDR.N    R0,??DataTable4_4
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0x....             LDR.N    R1,??DataTable4
   \   0000007C   0x6809             LDR      R1,[R1, #+0]
   \   0000007E   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000082   0x....             LDR.N    R1,??DataTable4_6
   \   00000084   0x6008             STR      R0,[R1, #+0]
    149               }
    150              if(Up_black_num<=4)         
   \                     ??Deal_Black_4:
   \   00000086   0x....             LDR.N    R0,??DataTable4
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x2805             CMP      R0,#+5
   \   0000008C   0xDA02             BGE.N    ??Deal_Black_8
    151             
    152              {   
    153                  
    154                  aver_weight =0; 
   \   0000008E   0x....             LDR.N    R0,??DataTable4_6
   \   00000090   0x2100             MOVS     R1,#+0
   \   00000092   0x6001             STR      R1,[R0, #+0]
    155              }
    156              Black_Position=aver_weight;
   \                     ??Deal_Black_8:
   \   00000094   0x....             LDR.N    R0,??DataTable4_7
   \   00000096   0x....             LDR.N    R1,??DataTable4_6
   \   00000098   0x6809             LDR      R1,[R1, #+0]
   \   0000009A   0x8001             STRH     R1,[R0, #+0]
    157              Surface_CCD_Black_Position_Settle();
   \   0000009C   0x.... 0x....      BL       Surface_CCD_Black_Position_Settle
    158          }
   \   000000A0   0xBD01             POP      {R0,PC}          ;; return
    159          

   \                                 In section .text, align 2, keep-with-next
    160          void Surface_CCD_Black_Position_Settle(void)
    161          {
   \                     Surface_CCD_Black_Position_Settle:
   \   00000000   0xB430             PUSH     {R4,R5}
    162               int i;
    163               int Left_Black_Position_Cnt=0;
   \   00000002   0x2000             MOVS     R0,#+0
    164               int Right_Black_Position_Cnt=0;
   \   00000004   0x2100             MOVS     R1,#+0
    165               Surface_CCD_Black_Weight[Surface_CCD_Black_Value_Cnt]=aver_weight;
   \   00000006   0x....             LDR.N    R2,??DataTable4_8
   \   00000008   0xF9B2 0x2000      LDRSH    R2,[R2, #+0]
   \   0000000C   0x....             LDR.N    R3,??DataTable4_9
   \   0000000E   0x....             LDR.N    R4,??DataTable4_6
   \   00000010   0x6824             LDR      R4,[R4, #+0]
   \   00000012   0xF823 0x4012      STRH     R4,[R3, R2, LSL #+1]
    166               for(i=0;i<128;i++)
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0xE01D             B.N      ??Surface_CCD_Black_Position_Settle_0
    167               {
    168                   Surface_CCD_Black_Value[Surface_CCD_Black_Value_Cnt][i]=ccd_value[i];
   \                     ??Surface_CCD_Black_Position_Settle_1:
   \   0000001A   0x....             LDR.N    R3,??DataTable4_8
   \   0000001C   0xF9B3 0x3000      LDRSH    R3,[R3, #+0]
   \   00000020   0xF44F 0x7480      MOV      R4,#+256
   \   00000024   0x....             LDR.N    R5,??DataTable4_10
   \   00000026   0xFB04 0x5303      MLA      R3,R4,R3,R5
   \   0000002A   0x....             LDR.N    R4,??DataTable4_1
   \   0000002C   0xF834 0x4012      LDRH     R4,[R4, R2, LSL #+1]
   \   00000030   0xF823 0x4012      STRH     R4,[R3, R2, LSL #+1]
    169                   if(i<64)
   \   00000034   0x2A40             CMP      R2,#+64
   \   00000036   0xDA05             BGE.N    ??Surface_CCD_Black_Position_Settle_2
    170                   {
    171                       if(ccd_value[i]==1)
   \   00000038   0x....             LDR.N    R3,??DataTable4_1
   \   0000003A   0xF933 0x3012      LDRSH    R3,[R3, R2, LSL #+1]
   \   0000003E   0x2B01             CMP      R3,#+1
   \   00000040   0xD100             BNE.N    ??Surface_CCD_Black_Position_Settle_2
    172                        Left_Black_Position_Cnt++;
   \   00000042   0x1C40             ADDS     R0,R0,#+1
    173                   }
    174                   if(i>=64)
   \                     ??Surface_CCD_Black_Position_Settle_2:
   \   00000044   0x2A40             CMP      R2,#+64
   \   00000046   0xDB05             BLT.N    ??Surface_CCD_Black_Position_Settle_3
    175                   {
    176                       if(ccd_value[i]==1)
   \   00000048   0x....             LDR.N    R3,??DataTable4_1
   \   0000004A   0xF933 0x3012      LDRSH    R3,[R3, R2, LSL #+1]
   \   0000004E   0x2B01             CMP      R3,#+1
   \   00000050   0xD100             BNE.N    ??Surface_CCD_Black_Position_Settle_3
    177                        Right_Black_Position_Cnt++;
   \   00000052   0x1C49             ADDS     R1,R1,#+1
    178                   }
    179               }
   \                     ??Surface_CCD_Black_Position_Settle_3:
   \   00000054   0x1C52             ADDS     R2,R2,#+1
   \                     ??Surface_CCD_Black_Position_Settle_0:
   \   00000056   0x2A80             CMP      R2,#+128
   \   00000058   0xDBDF             BLT.N    ??Surface_CCD_Black_Position_Settle_1
    180          }
   \   0000005A   0xBC30             POP      {R4,R5}
   \   0000005C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    181          void start_line(void)
    182          {
    183           int i=0;
   \                     start_line:
   \   00000000   0x2000             MOVS     R0,#+0
    184          
    185           for(i=0;i<3;i++)
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x0008             MOVS     R0,R1
   \   00000006   0xE003             B.N      ??start_line_0
    186               {
    187               if(Start_AD_Value[i]>Start_AD_LEVEL[i])
    188                    {
    189                    Start_value[i]=1;
    190           
    191                    }
    192               else
    193                    {
    194                    Start_value[i]=0;
    195                    }
    196               if(Start_value[0]==0&&Start_value[1]==1&&Start_value[2]==0)
    197               {   
    198                    Start_flag=1;
    199                   
    200               }
    201              else
    202                    Start_flag=0;
   \                     ??start_line_1:
   \   00000008   0x....             LDR.N    R1,??DataTable4_11
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x600A             STR      R2,[R1, #+0]
   \                     ??start_line_2:
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \                     ??start_line_0:
   \   00000010   0x2803             CMP      R0,#+3
   \   00000012   0xDA23             BGE.N    ??start_line_3
   \   00000014   0x....             LDR.N    R1,??DataTable4_12
   \   00000016   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000001A   0x....             LDR.N    R2,??DataTable4_13
   \   0000001C   0xF832 0x2010      LDRH     R2,[R2, R0, LSL #+1]
   \   00000020   0x4291             CMP      R1,R2
   \   00000022   0xD204             BCS.N    ??start_line_4
   \   00000024   0x....             LDR.N    R1,??DataTable4_14
   \   00000026   0x2201             MOVS     R2,#+1
   \   00000028   0xF821 0x2010      STRH     R2,[R1, R0, LSL #+1]
   \   0000002C   0xE003             B.N      ??start_line_5
   \                     ??start_line_4:
   \   0000002E   0x....             LDR.N    R1,??DataTable4_14
   \   00000030   0x2200             MOVS     R2,#+0
   \   00000032   0xF821 0x2010      STRH     R2,[R1, R0, LSL #+1]
   \                     ??start_line_5:
   \   00000036   0x....             LDR.N    R1,??DataTable4_14
   \   00000038   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000003C   0x2900             CMP      R1,#+0
   \   0000003E   0xD1E3             BNE.N    ??start_line_1
   \   00000040   0x....             LDR.N    R1,??DataTable4_14
   \   00000042   0xF9B1 0x1002      LDRSH    R1,[R1, #+2]
   \   00000046   0x2901             CMP      R1,#+1
   \   00000048   0xD1DE             BNE.N    ??start_line_1
   \   0000004A   0x....             LDR.N    R1,??DataTable4_14
   \   0000004C   0xF9B1 0x1004      LDRSH    R1,[R1, #+4]
   \   00000050   0x2900             CMP      R1,#+0
   \   00000052   0xD1D9             BNE.N    ??start_line_1
   \   00000054   0x....             LDR.N    R1,??DataTable4_11
   \   00000056   0x2201             MOVS     R2,#+1
   \   00000058   0x600A             STR      R2,[R1, #+0]
   \   0000005A   0xE7D8             B.N      ??start_line_2
    203                  
    204               }
    205          }
   \                     ??start_line_3:
   \   0000005C   0x4770             BX       LR               ;; return
    206          

   \                                 In section .text, align 2, keep-with-next
    207          void Turn_Speed_PID(void)
    208          {
   \                     Turn_Speed_PID:
   \   00000000   0xB500             PUSH     {LR}
    209            int32s_t nP,nD;
    210           
    211            
    212            /**************************转向限幅******************************************/
    213            if(Black_Position>-45 && Black_Position<45 && Line_Lost_Flag!=0)
   \   00000002   0x....             LDR.N    R0,??DataTable4_7
   \   00000004   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000008   0xF64F 0x71D4      MOVW     R1,#+65492
   \   0000000C   0x1A40             SUBS     R0,R0,R1
   \   0000000E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000010   0x2859             CMP      R0,#+89
   \   00000012   0xD206             BCS.N    ??Turn_Speed_PID_0
   \   00000014   0x....             LDR.N    R0,??DataTable4_15
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD002             BEQ.N    ??Turn_Speed_PID_0
    214            {
    215              Line_Lost_Flag=0;
   \   0000001C   0x....             LDR.N    R0,??DataTable4_15
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x6001             STR      R1,[R0, #+0]
    216            }
    217            if(Black_Position>=45 && Line_Lost_Flag==0)
   \                     ??Turn_Speed_PID_0:
   \   00000022   0x....             LDR.N    R0,??DataTable4_7
   \   00000024   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000028   0x282D             CMP      R0,#+45
   \   0000002A   0xDB09             BLT.N    ??Turn_Speed_PID_1
   \   0000002C   0x....             LDR.N    R0,??DataTable4_15
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD105             BNE.N    ??Turn_Speed_PID_1
    218            {
    219               Black_Position=45;
   \   00000034   0x....             LDR.N    R0,??DataTable4_7
   \   00000036   0x212D             MOVS     R1,#+45
   \   00000038   0x8001             STRH     R1,[R0, #+0]
    220               Line_Lost_Flag=1;
   \   0000003A   0x....             LDR.N    R0,??DataTable4_15
   \   0000003C   0x2101             MOVS     R1,#+1
   \   0000003E   0x6001             STR      R1,[R0, #+0]
    221            }
    222            if(Black_Position<=-45 && Line_Lost_Flag==0)
   \                     ??Turn_Speed_PID_1:
   \   00000040   0x....             LDR.N    R0,??DataTable4_7
   \   00000042   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000046   0xF07F 0x012B      MVNS     R1,#+43
   \   0000004A   0x4288             CMP      R0,R1
   \   0000004C   0xDA0A             BGE.N    ??Turn_Speed_PID_2
   \   0000004E   0x....             LDR.N    R0,??DataTable4_15
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD106             BNE.N    ??Turn_Speed_PID_2
    223            {
    224               Black_Position=-45;
   \   00000056   0x....             LDR.N    R0,??DataTable4_7
   \   00000058   0xF07F 0x012C      MVNS     R1,#+44
   \   0000005C   0x8001             STRH     R1,[R0, #+0]
    225               Line_Lost_Flag=2;
   \   0000005E   0x....             LDR.N    R0,??DataTable4_15
   \   00000060   0x2102             MOVS     R1,#+2
   \   00000062   0x6001             STR      R1,[R0, #+0]
    226            }
    227            
    228           /*****************************************************************************/
    229            Servo_Temp_P = (int)(Black_Position * Turn_Kp);                         //计算出控制量
   \                     ??Turn_Speed_PID_2:
   \   00000064   0x....             LDR.N    R0,??DataTable4_7
   \   00000066   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000006A   0x.... 0x....      BL       __aeabi_i2d
   \   0000006E   0x2200             MOVS     R2,#+0
   \   00000070   0x....             LDR.N    R3,??DataTable4_16  ;; 0x40040000
   \   00000072   0x.... 0x....      BL       __aeabi_dmul
   \   00000076   0x.... 0x....      BL       __aeabi_d2iz
   \   0000007A   0x....             LDR.N    R1,??DataTable4_17
   \   0000007C   0x6008             STR      R0,[R1, #+0]
    230            Servo_Temp_D = (int)((Black_Position-Black_Position_Last)*(Turn_Kd));
   \   0000007E   0x....             LDR.N    R0,??DataTable4_7
   \   00000080   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000084   0x....             LDR.N    R1,??DataTable4_18
   \   00000086   0x6809             LDR      R1,[R1, #+0]
   \   00000088   0x1A40             SUBS     R0,R0,R1
   \   0000008A   0x.... 0x....      BL       __aeabi_i2d
   \   0000008E   0x....             LDR.N    R2,??DataTable4_19  ;; 0x9999999a
   \   00000090   0x....             LDR.N    R3,??DataTable4_20  ;; 0x40119999
   \   00000092   0x.... 0x....      BL       __aeabi_dmul
   \   00000096   0x.... 0x....      BL       __aeabi_d2iz
   \   0000009A   0x....             LDR.N    R1,??DataTable4_21
   \   0000009C   0x6008             STR      R0,[R1, #+0]
    231            
    232            Black_Position_Last=Black_Position;
   \   0000009E   0x....             LDR.N    R0,??DataTable4_18
   \   000000A0   0x....             LDR.N    R1,??DataTable4_7
   \   000000A2   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000A6   0x6001             STR      R1,[R0, #+0]
    233           
    234            nP=(int32s_t)(Servo_Temp_P);                                          //计算比例部分转向速度
   \   000000A8   0x....             LDR.N    R0,??DataTable4_17
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
    235            nD=(int32s_t)(Servo_Temp_D);                                          //计算微分部分转向速度
   \   000000AC   0x....             LDR.N    R1,??DataTable4_21
   \   000000AE   0x6809             LDR      R1,[R1, #+0]
    236            if(nD>=25)    nD=25;
   \   000000B0   0x2919             CMP      R1,#+25
   \   000000B2   0xDB00             BLT.N    ??Turn_Speed_PID_3
   \   000000B4   0x2119             MOVS     R1,#+25
    237            if(nD<=-25)   nD=-25;
   \                     ??Turn_Speed_PID_3:
   \   000000B6   0xF111 0x0F18      CMN      R1,#+24
   \   000000BA   0xDA01             BGE.N    ??Turn_Speed_PID_4
   \   000000BC   0xF07F 0x0118      MVNS     R1,#+24
    238            Turn_Speedold = Turn_Speednew;                                        //上一次计算的转向值
   \                     ??Turn_Speed_PID_4:
   \   000000C0   0x....             LDR.N    R2,??DataTable4_22
   \   000000C2   0x....             LDR.N    R3,??DataTable4_23
   \   000000C4   0x681B             LDR      R3,[R3, #+0]
   \   000000C6   0x6013             STR      R3,[R2, #+0]
    239            Turn_Speed = (nP+nD); 
   \   000000C8   0x1808             ADDS     R0,R1,R0
   \   000000CA   0x....             LDR.N    R1,??DataTable4_24
   \   000000CC   0x6008             STR      R0,[R1, #+0]
    240            Turn_Speednew=Turn_Speed;
   \   000000CE   0x....             LDR.N    R0,??DataTable4_23
   \   000000D0   0x....             LDR.N    R1,??DataTable4_24
   \   000000D2   0x6809             LDR      R1,[R1, #+0]
   \   000000D4   0x6001             STR      R1,[R0, #+0]
    241           
    242           
    243          
    244          }
   \   000000D6   0xBD00             POP      {PC}             ;; return
    245          /*==================================
    246          函数名：Turn_Speed_PID_Out()
    247          作用  ：计算转向速度的输出，使转向输出平滑
    248          备注  ：无
    249          ====================================*/

   \                                 In section .text, align 2, keep-with-next
    250          void Turn_Speed_PID_Out(void)
    251          {
    252           int16s_t nValue;
    253           nValue = (int16s_t)(Turn_Speednew-Turn_Speedold);
   \                     Turn_Speed_PID_Out:
   \   00000000   0x....             LDR.N    R0,??DataTable4_23
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x....             LDR.N    R1,??DataTable4_22
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x1A40             SUBS     R0,R0,R1
    254           nValue = (int16s_t)(nValue * (Turn_Count + 1) / (CAR_TURN_PERIOD -1) + Turn_Speedold);
   \   0000000A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000000C   0x....             LDR.N    R1,??DataTable4_25
   \   0000000E   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000012   0x1C49             ADDS     R1,R1,#+1
   \   00000014   0x4348             MULS     R0,R1,R0
   \   00000016   0x2103             MOVS     R1,#+3
   \   00000018   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000001C   0x....             LDR.N    R1,??DataTable4_22
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0x1808             ADDS     R0,R1,R0
    255           Turn_SpeedOut=nValue;
   \   00000022   0x....             LDR.N    R1,??DataTable4_26
   \   00000024   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000026   0x6008             STR      R0,[R1, #+0]
    256          }
   \   00000028   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     Up_black_num

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ccd_value

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     Up_CCD_AD_Value

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     CCD_AD_LEVEL_END

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     total_weight

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     tab2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     aver_weight

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     Black_Position

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     Surface_CCD_Black_Value_Cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     Surface_CCD_Black_Weight

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     Surface_CCD_Black_Value

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     Start_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x........         DC32     Start_AD_LEVEL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x........         DC32     Start_AD_Value

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x........         DC32     Start_value

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x........         DC32     Line_Lost_Flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x40040000         DC32     0x40040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x........         DC32     Servo_Temp_P

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0x........         DC32     Black_Position_Last

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x9999999A         DC32     0x9999999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   0x40119999         DC32     0x40119999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0x........         DC32     Servo_Temp_D

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   0x........         DC32     Turn_Speedold

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   0x........         DC32     Turn_Speednew

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_24:
   \   00000000   0x........         DC32     Turn_Speed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_25:
   \   00000000   0x........         DC32     Turn_Count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_26:
   \   00000000   0x........         DC32     Turn_SpeedOut

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  Deal_Black
             8 -> Surface_CCD_Black_Position_Settle
        8  Surface_CCD_Black_Position_Settle
        4  Turn_Speed_PID
             4 -> __aeabi_d2iz
             4 -> __aeabi_dmul
             4 -> __aeabi_i2d
        0  Turn_Speed_PID_Out
        0  start_line


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_21
       4  ??DataTable4_22
       4  ??DataTable4_23
       4  ??DataTable4_24
       4  ??DataTable4_25
       4  ??DataTable4_26
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       2  Black_Position
       4  Black_Position_Last
     512  CCD_AD_LEVEL
     512  CCD_AD_LEVEL1
     512  CCD_AD_LEVEL_END
     162  Deal_Black
       4  Down_black_num
     256  Down_ccd_value
       2  His_Black_Position
       4  Line_Lost_Flag
       4  Servo_Temp_D
       4  Servo_Temp_P
      12  Start_AD_LEVEL
       4  Start_flag
       8  Start_value
       4  Sum_Black_Position
      80  Surface_CCD_Black_Position
      94  Surface_CCD_Black_Position_Settle
    5120  Surface_CCD_Black_Value
       2  Surface_CCD_Black_Value_Cnt
      40  Surface_CCD_Black_Weight
       4  Turn_Speed
       4  Turn_SpeedOut
     216  Turn_Speed_PID
      42  Turn_Speed_PID_Out
       4  Turn_Speednew
       4  Turn_Speedold
       4  Up_black_num
       4  aver_weight
       4  barrier_flag
     256  ccd_value
       4  j
      94  start_line
     256  tab
     256  tab1
     256  tab2
       4  total_weight

 
 5 830 bytes in section .bss
   512 bytes in section .data
 1 804 bytes in section .rodata
   716 bytes in section .text
 
   716 bytes of CODE  memory
 1 804 bytes of CONST memory
 6 342 bytes of DATA  memory

Errors: none
Warnings: none
