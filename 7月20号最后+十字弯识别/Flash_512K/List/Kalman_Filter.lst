###############################################################################
#                                                                             #
#                                                       14/Oct/2013  11:39:07 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\qlalxx\Desktop\fighting\MyFunction\Kalman_Filte #
#                    r.c                                                      #
#    Command line =  C:\Users\qlalxx\Desktop\fighting\MyFunction\Kalman_Filte #
#                    r.c -D IAR -lCN C:\Users\qlalxx\Desktop\fighting\Flash_5 #
#                    12K\List\ -lB C:\Users\qlalxx\Desktop\fighting\Flash_512 #
#                    K\List\ -o C:\Users\qlalxx\Desktop\fighting\Flash_512K\O #
#                    bj\ --no_cse --no_unroll --no_inline --no_code_motion    #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0 Evaluation\arm\INC\c\DLib_Config_Normal.h" #
#                     -I C:\Users\qlalxx\Desktop\fighting\Library\CPU\ -I     #
#                    C:\Users\qlalxx\Desktop\fighting\Library\Drivers\ADC\    #
#                    -I C:\Users\qlalxx\Desktop\fighting\Library\Drivers\FTM\ #
#                     -I C:\Users\qlalxx\Desktop\fighting\Library\Drivers\GPI #
#                    O\ -I C:\Users\qlalxx\Desktop\fighting\Library\Drivers\P #
#                    IT\ -I C:\Users\qlalxx\Desktop\fighting\MyFunction\ -I   #
#                    C:\Users\qlalxx\Desktop\fighting\SD_System\ -Ol          #
#    List file    =  C:\Users\qlalxx\Desktop\fighting\Flash_512K\List\Kalman_ #
#                    Filter.lst                                               #
#    Object file  =  C:\Users\qlalxx\Desktop\fighting\Flash_512K\Obj\Kalman_F #
#                    ilter.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\qlalxx\Desktop\fighting\MyFunction\Kalman_Filter.c
      1          #include "AllHeaders.h"
      2          
      3          /*********Kalman滤波，8MHz的处理时间约1.8ms***********/

   \                                 In section .bss, align 4
      4          float Angle, Angle_dot; 		                                  //外部需要引用的变量
   \                     Angle:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     Angle_dot:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
      5          float Q_angle=0.001, Q_gyro=0.003, R_angle=0.5, dt=0.005;   	//dt的取值为kalman滤波器采样时间;		
   \                     Q_angle:
   \   00000000   0x3A83126F         DC32 3A83126FH

   \                                 In section .data, align 4
   \                     Q_gyro:
   \   00000000   0x3B449BA6         DC32 3B449BA6H

   \                                 In section .data, align 4
   \                     R_angle:
   \   00000000   0x3F000000         DC32 3F000000H

   \                                 In section .data, align 4
   \                     dt:
   \   00000000   0x3BA3D70A         DC32 3BA3D70AH

   \                                 In section .data, align 4
      6          float P[2][2] =
   \                     P:
   \   00000000   0x3F800000         DC32 3F800000H, 0H, 0H, 3F800000H
   \              0x00000000   
   \              0x00000000   
   \              0x3F800000   
      7                      {
      8          	{ 1, 0 },
      9                              { 0, 1 }
     10                      };
     11          	

   \                                 In section .data, align 1
     12          char  C_0 = 1;
   \                     C_0:
   \   00000000   0x01               DC8 1

   \                                 In section .bss, align 4
     13          float E;  
   \                     E:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     14          float q_bias;
   \                     q_bias:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     15          float Angle_err;
   \                     Angle_err:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     16          float PCt_0, PCt_1;
   \                     PCt_0:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     PCt_1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     17          float K_0, K_1;
   \                     K_0:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     K_1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     18          float t_0, t_1;
   \                     t_0:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     t_1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     19          float Pdot[4] ={0,0,0,0};
   \                     Pdot:
   \   00000000                      DS8 16
     20          
     21          /******************************************************
     22          函数名：Kalman_Filter()
     23          作用  ：预估滤波
     24          备注  ：无
     25          *******************************************************/

   \                                 In section .text, align 4, keep-with-next
     26          void Kalman_Filter(float angle_m,float gyro_m)			          //gyro_m:gyro_measure
     27          {
   \                     Kalman_Filter:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     28          	Angle+=(gyro_m-q_bias) * dt;                                //先验估计
   \   00000006   0x0028             MOVS     R0,R5
   \   00000008   0x497A             LDR.N    R1,??Kalman_Filter_0
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0x.... 0x....      BL       __aeabi_fsub
   \   00000010   0x4979             LDR.N    R1,??Kalman_Filter_0+0x4
   \   00000012   0x6809             LDR      R1,[R1, #+0]
   \   00000014   0x.... 0x....      BL       __aeabi_fmul
   \   00000018   0x4978             LDR.N    R1,??Kalman_Filter_0+0x8
   \   0000001A   0x6809             LDR      R1,[R1, #+0]
   \   0000001C   0x.... 0x....      BL       __aeabi_fadd
   \   00000020   0x4976             LDR.N    R1,??Kalman_Filter_0+0x8
   \   00000022   0x6008             STR      R0,[R1, #+0]
     29          	
     30          	Pdot[0]=Q_angle - P[0][1] - P[1][0];                        // Pk-' 先验估计误差协方差的微分
   \   00000024   0x4876             LDR.N    R0,??Kalman_Filter_0+0xC
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x4976             LDR.N    R1,??Kalman_Filter_0+0x10
   \   0000002A   0x6849             LDR      R1,[R1, #+4]
   \   0000002C   0x.... 0x....      BL       __aeabi_fsub
   \   00000030   0x4974             LDR.N    R1,??Kalman_Filter_0+0x10
   \   00000032   0x6889             LDR      R1,[R1, #+8]
   \   00000034   0x.... 0x....      BL       __aeabi_fsub
   \   00000038   0x4973             LDR.N    R1,??Kalman_Filter_0+0x14
   \   0000003A   0x6008             STR      R0,[R1, #+0]
     31          	Pdot[1]=- P[1][1];
   \   0000003C   0x4872             LDR.N    R0,??Kalman_Filter_0+0x14
   \   0000003E   0x4971             LDR.N    R1,??Kalman_Filter_0+0x10
   \   00000040   0x68C9             LDR      R1,[R1, #+12]
   \   00000042   0xF091 0x4100      EORS     R1,R1,#0x80000000
   \   00000046   0x6041             STR      R1,[R0, #+4]
     32          	Pdot[2]=- P[1][1];
   \   00000048   0x486F             LDR.N    R0,??Kalman_Filter_0+0x14
   \   0000004A   0x496E             LDR.N    R1,??Kalman_Filter_0+0x10
   \   0000004C   0x68C9             LDR      R1,[R1, #+12]
   \   0000004E   0xF091 0x4100      EORS     R1,R1,#0x80000000
   \   00000052   0x6081             STR      R1,[R0, #+8]
     33          	Pdot[3]=Q_gyro;
   \   00000054   0x486C             LDR.N    R0,??Kalman_Filter_0+0x14
   \   00000056   0x496D             LDR.N    R1,??Kalman_Filter_0+0x18
   \   00000058   0x6809             LDR      R1,[R1, #+0]
   \   0000005A   0x60C1             STR      R1,[R0, #+12]
     34          	
     35          	P[0][0] += Pdot[0] * dt;                                    // Pk- 先验估计误差协方差微分的积分 = 先验估计误差协方差
   \   0000005C   0x486A             LDR.N    R0,??Kalman_Filter_0+0x14
   \   0000005E   0x6801             LDR      R1,[R0, #+0]
   \   00000060   0x4865             LDR.N    R0,??Kalman_Filter_0+0x4
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x.... 0x....      BL       __aeabi_fmul
   \   00000068   0x4966             LDR.N    R1,??Kalman_Filter_0+0x10
   \   0000006A   0x6809             LDR      R1,[R1, #+0]
   \   0000006C   0x.... 0x....      BL       __aeabi_fadd
   \   00000070   0x4964             LDR.N    R1,??Kalman_Filter_0+0x10
   \   00000072   0x6008             STR      R0,[R1, #+0]
     36          	P[0][1] += Pdot[1] * dt;
   \   00000074   0x4864             LDR.N    R0,??Kalman_Filter_0+0x14
   \   00000076   0x6841             LDR      R1,[R0, #+4]
   \   00000078   0x485F             LDR.N    R0,??Kalman_Filter_0+0x4
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x.... 0x....      BL       __aeabi_fmul
   \   00000080   0x4960             LDR.N    R1,??Kalman_Filter_0+0x10
   \   00000082   0x6849             LDR      R1,[R1, #+4]
   \   00000084   0x.... 0x....      BL       __aeabi_fadd
   \   00000088   0x495E             LDR.N    R1,??Kalman_Filter_0+0x10
   \   0000008A   0x6048             STR      R0,[R1, #+4]
     37          	P[1][0] += Pdot[2] * dt;
   \   0000008C   0x485E             LDR.N    R0,??Kalman_Filter_0+0x14
   \   0000008E   0x6881             LDR      R1,[R0, #+8]
   \   00000090   0x4859             LDR.N    R0,??Kalman_Filter_0+0x4
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0x.... 0x....      BL       __aeabi_fmul
   \   00000098   0x495A             LDR.N    R1,??Kalman_Filter_0+0x10
   \   0000009A   0x6889             LDR      R1,[R1, #+8]
   \   0000009C   0x.... 0x....      BL       __aeabi_fadd
   \   000000A0   0x4958             LDR.N    R1,??Kalman_Filter_0+0x10
   \   000000A2   0x6088             STR      R0,[R1, #+8]
     38          	P[1][1] += Pdot[3] * dt;
   \   000000A4   0x4858             LDR.N    R0,??Kalman_Filter_0+0x14
   \   000000A6   0x68C1             LDR      R1,[R0, #+12]
   \   000000A8   0x4853             LDR.N    R0,??Kalman_Filter_0+0x4
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0x.... 0x....      BL       __aeabi_fmul
   \   000000B0   0x4954             LDR.N    R1,??Kalman_Filter_0+0x10
   \   000000B2   0x68C9             LDR      R1,[R1, #+12]
   \   000000B4   0x.... 0x....      BL       __aeabi_fadd
   \   000000B8   0x4952             LDR.N    R1,??Kalman_Filter_0+0x10
   \   000000BA   0x60C8             STR      R0,[R1, #+12]
     39          		
     40          	Angle_err = angle_m - Angle;                                //zk-先验估计
   \   000000BC   0x0020             MOVS     R0,R4
   \   000000BE   0x494F             LDR.N    R1,??Kalman_Filter_0+0x8
   \   000000C0   0x6809             LDR      R1,[R1, #+0]
   \   000000C2   0x.... 0x....      BL       __aeabi_fsub
   \   000000C6   0x4952             LDR.N    R1,??Kalman_Filter_0+0x1C
   \   000000C8   0x6008             STR      R0,[R1, #+0]
     41          		
     42          	PCt_0 = C_0 * P[0][0];
   \   000000CA   0x4852             LDR.N    R0,??Kalman_Filter_0+0x20
   \   000000CC   0x7800             LDRB     R0,[R0, #+0]
   \   000000CE   0x.... 0x....      BL       __aeabi_ui2f
   \   000000D2   0x494C             LDR.N    R1,??Kalman_Filter_0+0x10
   \   000000D4   0x6809             LDR      R1,[R1, #+0]
   \   000000D6   0x.... 0x....      BL       __aeabi_fmul
   \   000000DA   0x494F             LDR.N    R1,??Kalman_Filter_0+0x24
   \   000000DC   0x6008             STR      R0,[R1, #+0]
     43          	PCt_1 = C_0 * P[1][0];
   \   000000DE   0x484D             LDR.N    R0,??Kalman_Filter_0+0x20
   \   000000E0   0x7800             LDRB     R0,[R0, #+0]
   \   000000E2   0x.... 0x....      BL       __aeabi_ui2f
   \   000000E6   0x4947             LDR.N    R1,??Kalman_Filter_0+0x10
   \   000000E8   0x6889             LDR      R1,[R1, #+8]
   \   000000EA   0x.... 0x....      BL       __aeabi_fmul
   \   000000EE   0x494B             LDR.N    R1,??Kalman_Filter_0+0x28
   \   000000F0   0x6008             STR      R0,[R1, #+0]
     44          	
     45          	E = R_angle + C_0 * PCt_0;
   \   000000F2   0x4848             LDR.N    R0,??Kalman_Filter_0+0x20
   \   000000F4   0x7800             LDRB     R0,[R0, #+0]
   \   000000F6   0x.... 0x....      BL       __aeabi_ui2f
   \   000000FA   0x4947             LDR.N    R1,??Kalman_Filter_0+0x24
   \   000000FC   0x6809             LDR      R1,[R1, #+0]
   \   000000FE   0x.... 0x....      BL       __aeabi_fmul
   \   00000102   0x4947             LDR.N    R1,??Kalman_Filter_0+0x2C
   \   00000104   0x6809             LDR      R1,[R1, #+0]
   \   00000106   0x.... 0x....      BL       __aeabi_fadd
   \   0000010A   0x4946             LDR.N    R1,??Kalman_Filter_0+0x30
   \   0000010C   0x6008             STR      R0,[R1, #+0]
     46          	
     47          	K_0 = PCt_0 / E;                                            //Kk
   \   0000010E   0x4842             LDR.N    R0,??Kalman_Filter_0+0x24
   \   00000110   0x6800             LDR      R0,[R0, #+0]
   \   00000112   0x4944             LDR.N    R1,??Kalman_Filter_0+0x30
   \   00000114   0x6809             LDR      R1,[R1, #+0]
   \   00000116   0x.... 0x....      BL       __aeabi_fdiv
   \   0000011A   0x4943             LDR.N    R1,??Kalman_Filter_0+0x34
   \   0000011C   0x6008             STR      R0,[R1, #+0]
     48          	K_1 = PCt_1 / E;
   \   0000011E   0x483F             LDR.N    R0,??Kalman_Filter_0+0x28
   \   00000120   0x6800             LDR      R0,[R0, #+0]
   \   00000122   0x4940             LDR.N    R1,??Kalman_Filter_0+0x30
   \   00000124   0x6809             LDR      R1,[R1, #+0]
   \   00000126   0x.... 0x....      BL       __aeabi_fdiv
   \   0000012A   0x4940             LDR.N    R1,??Kalman_Filter_0+0x38
   \   0000012C   0x6008             STR      R0,[R1, #+0]
     49          	
     50          	t_0 = PCt_0;
   \   0000012E   0x4840             LDR.N    R0,??Kalman_Filter_0+0x3C
   \   00000130   0x4939             LDR.N    R1,??Kalman_Filter_0+0x24
   \   00000132   0x6809             LDR      R1,[R1, #+0]
   \   00000134   0x6001             STR      R1,[R0, #+0]
     51          	t_1 = C_0 * P[0][1];
   \   00000136   0x4837             LDR.N    R0,??Kalman_Filter_0+0x20
   \   00000138   0x7800             LDRB     R0,[R0, #+0]
   \   0000013A   0x.... 0x....      BL       __aeabi_ui2f
   \   0000013E   0x4931             LDR.N    R1,??Kalman_Filter_0+0x10
   \   00000140   0x6849             LDR      R1,[R1, #+4]
   \   00000142   0x.... 0x....      BL       __aeabi_fmul
   \   00000146   0x493B             LDR.N    R1,??Kalman_Filter_0+0x40
   \   00000148   0x6008             STR      R0,[R1, #+0]
     52          
     53          	P[0][0] -= K_0 * t_0;                                       //后验估计误差协方差
   \   0000014A   0x4837             LDR.N    R0,??Kalman_Filter_0+0x34
   \   0000014C   0x6801             LDR      R1,[R0, #+0]
   \   0000014E   0x4838             LDR.N    R0,??Kalman_Filter_0+0x3C
   \   00000150   0x6800             LDR      R0,[R0, #+0]
   \   00000152   0x.... 0x....      BL       __aeabi_fmul
   \   00000156   0x0001             MOVS     R1,R0
   \   00000158   0x482A             LDR.N    R0,??Kalman_Filter_0+0x10
   \   0000015A   0x6800             LDR      R0,[R0, #+0]
   \   0000015C   0x.... 0x....      BL       __aeabi_fsub
   \   00000160   0x4928             LDR.N    R1,??Kalman_Filter_0+0x10
   \   00000162   0x6008             STR      R0,[R1, #+0]
     54          	P[0][1] -= K_0 * t_1;
   \   00000164   0x4830             LDR.N    R0,??Kalman_Filter_0+0x34
   \   00000166   0x6801             LDR      R1,[R0, #+0]
   \   00000168   0x4832             LDR.N    R0,??Kalman_Filter_0+0x40
   \   0000016A   0x6800             LDR      R0,[R0, #+0]
   \   0000016C   0x.... 0x....      BL       __aeabi_fmul
   \   00000170   0x0001             MOVS     R1,R0
   \   00000172   0x4824             LDR.N    R0,??Kalman_Filter_0+0x10
   \   00000174   0x6840             LDR      R0,[R0, #+4]
   \   00000176   0x.... 0x....      BL       __aeabi_fsub
   \   0000017A   0x4922             LDR.N    R1,??Kalman_Filter_0+0x10
   \   0000017C   0x6048             STR      R0,[R1, #+4]
     55          	P[1][0] -= K_1 * t_0;
   \   0000017E   0x482B             LDR.N    R0,??Kalman_Filter_0+0x38
   \   00000180   0x6801             LDR      R1,[R0, #+0]
   \   00000182   0x482B             LDR.N    R0,??Kalman_Filter_0+0x3C
   \   00000184   0x6800             LDR      R0,[R0, #+0]
   \   00000186   0x.... 0x....      BL       __aeabi_fmul
   \   0000018A   0x0001             MOVS     R1,R0
   \   0000018C   0x481D             LDR.N    R0,??Kalman_Filter_0+0x10
   \   0000018E   0x6880             LDR      R0,[R0, #+8]
   \   00000190   0x.... 0x....      BL       __aeabi_fsub
   \   00000194   0x491B             LDR.N    R1,??Kalman_Filter_0+0x10
   \   00000196   0x6088             STR      R0,[R1, #+8]
     56          	P[1][1] -= K_1 * t_1;
   \   00000198   0x4824             LDR.N    R0,??Kalman_Filter_0+0x38
   \   0000019A   0x6801             LDR      R1,[R0, #+0]
   \   0000019C   0x4825             LDR.N    R0,??Kalman_Filter_0+0x40
   \   0000019E   0x6800             LDR      R0,[R0, #+0]
   \   000001A0   0x.... 0x....      BL       __aeabi_fmul
   \   000001A4   0x0001             MOVS     R1,R0
   \   000001A6   0x4817             LDR.N    R0,??Kalman_Filter_0+0x10
   \   000001A8   0x68C0             LDR      R0,[R0, #+12]
   \   000001AA   0x.... 0x....      BL       __aeabi_fsub
   \   000001AE   0x4915             LDR.N    R1,??Kalman_Filter_0+0x10
   \   000001B0   0x60C8             STR      R0,[R1, #+12]
     57          		
     58          	Angle	+= K_0 * Angle_err;                     //后验估计	
   \   000001B2   0x481D             LDR.N    R0,??Kalman_Filter_0+0x34
   \   000001B4   0x6801             LDR      R1,[R0, #+0]
   \   000001B6   0x4816             LDR.N    R0,??Kalman_Filter_0+0x1C
   \   000001B8   0x6800             LDR      R0,[R0, #+0]
   \   000001BA   0x.... 0x....      BL       __aeabi_fmul
   \   000001BE   0x490F             LDR.N    R1,??Kalman_Filter_0+0x8
   \   000001C0   0x6809             LDR      R1,[R1, #+0]
   \   000001C2   0x.... 0x....      BL       __aeabi_fadd
   \   000001C6   0x490D             LDR.N    R1,??Kalman_Filter_0+0x8
   \   000001C8   0x6008             STR      R0,[R1, #+0]
     59          	q_bias+= K_1 * Angle_err;                                   //后验估计
   \   000001CA   0x4818             LDR.N    R0,??Kalman_Filter_0+0x38
   \   000001CC   0x6801             LDR      R1,[R0, #+0]
   \   000001CE   0x4810             LDR.N    R0,??Kalman_Filter_0+0x1C
   \   000001D0   0x6800             LDR      R0,[R0, #+0]
   \   000001D2   0x.... 0x....      BL       __aeabi_fmul
   \   000001D6   0x4907             LDR.N    R1,??Kalman_Filter_0
   \   000001D8   0x6809             LDR      R1,[R1, #+0]
   \   000001DA   0x.... 0x....      BL       __aeabi_fadd
   \   000001DE   0x4905             LDR.N    R1,??Kalman_Filter_0
   \   000001E0   0x6008             STR      R0,[R1, #+0]
     60          	Angle_dot = gyro_m-q_bias;                                  //输出值（后验估计）的微分 = 角速度
   \   000001E2   0x0028             MOVS     R0,R5
   \   000001E4   0x4903             LDR.N    R1,??Kalman_Filter_0
   \   000001E6   0x6809             LDR      R1,[R1, #+0]
   \   000001E8   0x.... 0x....      BL       __aeabi_fsub
   \   000001EC   0x4912             LDR.N    R1,??Kalman_Filter_0+0x44
   \   000001EE   0x6008             STR      R0,[R1, #+0]
     61          }
   \   000001F0   0xBD30             POP      {R4,R5,PC}       ;; return
   \   000001F2   0xBF00             Nop      
   \                     ??Kalman_Filter_0:
   \   000001F4   0x........         DC32     q_bias
   \   000001F8   0x........         DC32     dt
   \   000001FC   0x........         DC32     Angle
   \   00000200   0x........         DC32     Q_angle
   \   00000204   0x........         DC32     P
   \   00000208   0x........         DC32     Pdot
   \   0000020C   0x........         DC32     Q_gyro
   \   00000210   0x........         DC32     Angle_err
   \   00000214   0x........         DC32     C_0
   \   00000218   0x........         DC32     PCt_0
   \   0000021C   0x........         DC32     PCt_1
   \   00000220   0x........         DC32     R_angle
   \   00000224   0x........         DC32     E
   \   00000228   0x........         DC32     K_0
   \   0000022C   0x........         DC32     K_1
   \   00000230   0x........         DC32     t_0
   \   00000234   0x........         DC32     t_1
   \   00000238   0x........         DC32     Angle_dot

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       12  Kalman_Filter
             12 -> __aeabi_fadd
             12 -> __aeabi_fdiv
             12 -> __aeabi_fmul
             12 -> __aeabi_fsub
             12 -> __aeabi_ui2f


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  Angle
       4  Angle_dot
       4  Angle_err
       1  C_0
       4  E
       4  K_0
       4  K_1
     572  Kalman_Filter
      16  P
       4  PCt_0
       4  PCt_1
      16  Pdot
       4  Q_angle
       4  Q_gyro
       4  R_angle
       4  dt
       4  q_bias
       4  t_0
       4  t_1

 
  60 bytes in section .bss
  33 bytes in section .data
 572 bytes in section .text
 
 572 bytes of CODE memory
  93 bytes of DATA memory

Errors: none
Warnings: none
