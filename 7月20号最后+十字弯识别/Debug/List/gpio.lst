###############################################################################
#                                                                             #
#                                                       10/Jan/2013  19:05:40 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\¿ÎÍâ×ÊÁÏ\·ÉË¼¿¨¶ûÖÇÄÜ³µ\ÈÕ³£×ÊÁÏ\µÚ°Ë½ì×ÊÁÏ\µÚ°Ë½ìÖÇÄ #
#                    Ü³µ\Ö±Á¢³µµ÷ÊÔ\ARM\ARMÑ§Ï°Ê¹ÓÃ\20130110\V0.0.3\Library\D #
#                    rivers\GPIO\gpio.c                                       #
#    Command line =  E:\¿ÎÍâ×ÊÁÏ\·ÉË¼¿¨¶ûÖÇÄÜ³µ\ÈÕ³£×ÊÁÏ\µÚ°Ë½ì×ÊÁÏ\µÚ°Ë½ìÖÇÄ #
#                    Ü³µ\Ö±Á¢³µµ÷ÊÔ\ARM\ARMÑ§Ï°Ê¹ÓÃ\20130110\V0.0.3\Library\D #
#                    rivers\GPIO\gpio.c -D IAR -lCN                           #
#                    E:\¿ÎÍâ×ÊÁÏ\·ÉË¼¿¨¶ûÖÇÄÜ³µ\ÈÕ³£×ÊÁÏ\µÚ°Ë½ì×ÊÁÏ\µÚ°Ë½ìÖÇÄ #
#                    Ü³µ\Ö±Á¢³µµ÷ÊÔ\ARM\ARMÑ§Ï°Ê¹ÓÃ\20130110\V0.0.3\Debug\Lis #
#                    t\ -lB E:\¿ÎÍâ×ÊÁÏ\·ÉË¼¿¨¶ûÖÇÄÜ³µ\ÈÕ³£×ÊÁÏ\µÚ°Ë½ì×ÊÁÏ\µÚ #
#                    °Ë½ìÖÇÄÜ³µ\Ö±Á¢³µµ÷ÊÔ\ARM\ARMÑ§Ï°Ê¹ÓÃ\20130110\V0.0.3\De #
#                    bug\List\ -o E:\¿ÎÍâ×ÊÁÏ\·ÉË¼¿¨¶ûÖÇÄÜ³µ\ÈÕ³£×ÊÁÏ\µÚ°Ë½ì× #
#                    ÊÁÏ\µÚ°Ë½ìÖÇÄÜ³µ\Ö±Á¢³µµ÷ÊÔ\ARM\ARMÑ§Ï°Ê¹ÓÃ\20130110\V0. #
#                    0.3\Debug\Obj\ --no_cse --no_unroll --no_inline          #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config                              #
#                    D:\Tools\IAR6.30\arm\INC\c\DLib_Config_Normal.h -I       #
#                    E:\¿ÎÍâ×ÊÁÏ\·ÉË¼¿¨¶ûÖÇÄÜ³µ\ÈÕ³£×ÊÁÏ\µÚ°Ë½ì×ÊÁÏ\µÚ°Ë½ìÖÇÄ #
#                    Ü³µ\Ö±Á¢³µµ÷ÊÔ\ARM\ARMÑ§Ï°Ê¹ÓÃ\20130110\V0.0.3\Library\C #
#                    PU\ -I E:\¿ÎÍâ×ÊÁÏ\·ÉË¼¿¨¶ûÖÇÄÜ³µ\ÈÕ³£×ÊÁÏ\µÚ°Ë½ì×ÊÁÏ\µÚ #
#                    °Ë½ìÖÇÄÜ³µ\Ö±Á¢³µµ÷ÊÔ\ARM\ARMÑ§Ï°Ê¹ÓÃ\20130110\V0.0.3\Li #
#                    brary\Drivers\ADC\ -I E:\¿ÎÍâ×ÊÁÏ\·ÉË¼¿¨¶ûÖÇÄÜ³µ\ÈÕ³£×ÊÁ #
#                    Ï\µÚ°Ë½ì×ÊÁÏ\µÚ°Ë½ìÖÇÄÜ³µ\Ö±Á¢³µµ÷ÊÔ\ARM\ARMÑ§Ï°Ê¹ÓÃ\201 #
#                    30110\V0.0.3\Library\Drivers\FTM\ -I                     #
#                    E:\¿ÎÍâ×ÊÁÏ\·ÉË¼¿¨¶ûÖÇÄÜ³µ\ÈÕ³£×ÊÁÏ\µÚ°Ë½ì×ÊÁÏ\µÚ°Ë½ìÖÇÄ #
#                    Ü³µ\Ö±Á¢³µµ÷ÊÔ\ARM\ARMÑ§Ï°Ê¹ÓÃ\20130110\V0.0.3\Library\D #
#                    rivers\GPIO\ -I E:\¿ÎÍâ×ÊÁÏ\·ÉË¼¿¨¶ûÖÇÄÜ³µ\ÈÕ³£×ÊÁÏ\µÚ°Ë #
#                    ½ì×ÊÁÏ\µÚ°Ë½ìÖÇÄÜ³µ\Ö±Á¢³µµ÷ÊÔ\ARM\ARMÑ§Ï°Ê¹ÓÃ\20130110\ #
#                    V0.0.3\Library\Drivers\PIT\ -Ol                          #
#    List file    =  E:\¿ÎÍâ×ÊÁÏ\·ÉË¼¿¨¶ûÖÇÄÜ³µ\ÈÕ³£×ÊÁÏ\µÚ°Ë½ì×ÊÁÏ\µÚ°Ë½ìÖÇÄ #
#                    Ü³µ\Ö±Á¢³µµ÷ÊÔ\ARM\ARMÑ§Ï°Ê¹ÓÃ\20130110\V0.0.3\Debug\Lis #
#                    t\gpio.lst                                               #
#    Object file  =  E:\¿ÎÍâ×ÊÁÏ\·ÉË¼¿¨¶ûÖÇÄÜ³µ\ÈÕ³£×ÊÁÏ\µÚ°Ë½ì×ÊÁÏ\µÚ°Ë½ìÖÇÄ #
#                    Ü³µ\Ö±Á¢³µµ÷ÊÔ\ARM\ARMÑ§Ï°Ê¹ÓÃ\20130110\V0.0.3\Debug\Obj #
#                    \gpio.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

E:\¿ÎÍâ×ÊÁÏ\·ÉË¼¿¨¶ûÖÇÄÜ³µ\ÈÕ³£×ÊÁÏ\µÚ°Ë½ì×ÊÁÏ\µÚ°Ë½ìÖÇÄÜ³µ\Ö±Á¢³µµ÷ÊÔ\ARM\ARMÑ§Ï°Ê¹ÓÃ\20130110\V0.0.3\Library\Drivers\GPIO\gpio.c
      1          /*******************************************************************************
      2          * ÎÄ¼þÃû³Æ£ºgpio.c
      3          * Ãè    Êö: GPIO¿ÚÇý¶¯³ÌÐò£¨²Î¿¼¼Í³ÉÊ¦ÐÖÇý¶¯³ÌÐò£©
      4          * ×÷    Õß£ºÍò±ù±ù
      5          * ÌØ±ðÃùÐ»£º¼Í³ÉÊ¦ÐÖ(²©¿Íhttp://blog.chinaaet.com/jihceng0622)
      6          * Ê±    ¼ä£º2012Äê5ÔÂ17ÈÕ
      7          *******************************************************************************/
      8          
      9          #include "gpio.h"
     10          
     11          
     12          static PORT_MemMapPtr GPIO_GetPortMapPtr(GPIO_MemMapPtr gpio);
     13          
     14          /*******************************************************************************
     15          * º¯ÊýÃû³Æ£ºGPIO_SetPinMod
     16          * Èë¿Ú²ÎÊý£ºgpio   GPIO¿Ú
     17                      pin    gpio¿ÚµÄÒý½ÅºÅ
     18                      mux    ¸ÃÒý½ÅµÄ¹¦ÄÜºÅ
     19          * Ãè    Êö£ºÉèÖÃGPIOÖÐµÚ pin ¸öÒý½ÅµÄ¹¦ÄÜºÅ
     20          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     21          void GPIO_SetPinMod(GPIO_MemMapPtr gpio, int8u_t pin, int8u_t mux)
     22          {
   \                     GPIO_SetPinMod:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
     23            PORT_MemMapPtr port;
     24            int32u_t       readReg = 0;
   \   00000006   0x2600             MOVS     R6,#+0
     25            
     26            port = GPIO_GetPortMapPtr(gpio);
   \   00000008   0x.... 0x....      BL       GPIO_GetPortMapPtr
     27            readReg = PORT_PCR_REG(port,pin);
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   00000012   0x000E             MOVS     R6,R1
     28            readReg &= ~PORT_PCR_MUX_MASK;
   \   00000014   0xF436 0x66E0      BICS     R6,R6,#0x700
     29            readReg |= PORT_PCR_MUX(mux);
   \   00000018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   0x0229             LSLS     R1,R5,#+8
   \   0000001C   0xF411 0x61E0      ANDS     R1,R1,#0x700
   \   00000020   0x430E             ORRS     R6,R1,R6
     30            PORT_PCR_REG(port,pin) = readReg;
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0xF840 0x6024      STR      R6,[R0, R4, LSL #+2]
     31          }
   \   00000028   0xBD70             POP      {R4-R6,PC}       ;; return
     32          
     33          /*******************************************************************************
     34          * º¯ÊýÃû³Æ£ºGPIO_ConfigPinInt
     35          * Èë¿Ú²ÎÊý£ºgpio   GPIO¿ÚÖ¸Õë
     36                      pin    gpio¿ÚµÄÒý½ÅºÅ
     37                      irqc   ¸ÃÒý½ÅµÄÖÐ¶ÏÀàÐÍ
     38                              0000 Interrupt/DMA Request disabled.
     39                              0001 DMA Request on rising edge.
     40                              0010 DMA Request on falling edge.
     41                              0011 DMA Request on either edge.
     42                              0100 Reserved.
     43                              1000 Interrupt when logic zero
     44                              1001 Interrupt on rising edge.
     45                              1010 Interrupt on falling edge.
     46                              1011 Interrupt on either edge.
     47                              1100 Interrupt when logic one.
     48                              Others Reserved.
     49          * Ãè    Êö£ºÉèÖÃGPIOÖÐµÚ pin ¸öÒý½ÅµÄÖÐ¶ÏÀàÐÍ
     50          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     51          void GPIO_ConfigPinInt(GPIO_MemMapPtr gpio, int8u_t pin, int8u_t irqc)
     52          {
   \                     GPIO_ConfigPinInt:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
     53            PORT_MemMapPtr port;
     54            int32u_t       readReg = 0;
   \   00000006   0x2600             MOVS     R6,#+0
     55            
     56            port = GPIO_GetPortMapPtr(gpio);
   \   00000008   0x.... 0x....      BL       GPIO_GetPortMapPtr
     57            readReg = PORT_PCR_REG(port,pin);
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   00000012   0x000E             MOVS     R6,R1
     58            readReg &= ~PORT_PCR_IRQC_MASK;
   \   00000014   0xF436 0x2670      BICS     R6,R6,#0xF0000
     59            readReg |= PORT_PCR_IRQC(irqc); 
   \   00000018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   0x0429             LSLS     R1,R5,#+16
   \   0000001C   0xF411 0x2170      ANDS     R1,R1,#0xF0000
   \   00000020   0x430E             ORRS     R6,R1,R6
     60            PORT_PCR_REG(port,pin) = readReg; 
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0xF840 0x6024      STR      R6,[R0, R4, LSL #+2]
     61          }
   \   00000028   0xBD70             POP      {R4-R6,PC}       ;; return
     62          
     63          /*******************************************************************************
     64          * º¯ÊýÃû³Æ£ºGPIO_SetPinDriveStrgth
     65          * Èë¿Ú²ÎÊý£ºgpio   GPIO¿ÚÖ¸Õë
     66                      pin    gpio¿ÚµÄÒý½ÅºÅ
     67                      mux    ¸ÃÒý½ÅµÄ¹¦ÄÜºÅ
     68                              0: ÈõÇý¶¯ÄÜÁ¦
     69                              1£ºÇ¿Çý¶¯ÄÜÁ¦
     70          * Ãè    Êö£ºÉèÖÃGPIOÖÐµÚ pin ¸öÒý½ÅµÄÇý¶¯ÄÜÁ¦
     71          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     72          void GPIO_SetPinDriveStrgth(GPIO_MemMapPtr gpio, int8u_t pin, int8u_t dse)
     73          {
   \                     GPIO_SetPinDriveStrgth:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
     74            PORT_MemMapPtr port;
     75            
     76            port = GPIO_GetPortMapPtr(gpio);
   \   00000006   0x.... 0x....      BL       GPIO_GetPortMapPtr
     77            if(dse == 1)
   \   0000000A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000C   0x2D01             CMP      R5,#+1
   \   0000000E   0xD108             BNE.N    ??GPIO_SetPinDriveStrgth_0
     78            {
     79              PORT_PCR_REG(port,pin) |= PORT_PCR_DSE_MASK;
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   00000016   0xF051 0x0140      ORRS     R1,R1,#0x40
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
   \   00000020   0xE007             B.N      ??GPIO_SetPinDriveStrgth_1
     80            }
     81            else
     82            {
     83              PORT_PCR_REG(port,pin) &= ~PORT_PCR_DSE_MASK;
   \                     ??GPIO_SetPinDriveStrgth_0:
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   00000028   0xF031 0x0140      BICS     R1,R1,#0x40
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
     84            }
     85          }
   \                     ??GPIO_SetPinDriveStrgth_1:
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     86          
     87          /*******************************************************************************
     88          * º¯ÊýÃû³Æ£ºGPIO_SetPinOpenDrain
     89          * Èë¿Ú²ÎÊý£ºgpio   GPIO¿ÚÖ¸Õë
     90                      pin    gpio¿ÚµÄÒý½ÅºÅ
     91                      ode    ¸ÃÒý½ÅµÄ¹¦ÄÜºÅ
     92                              0: ½ûÖ¹¿ªÂ©Êä³ö
     93                              1£ºÊ¹ÄÜ¿ªÂ©Êä³ö
     94          * Ãè    Êö£ºÉèÖÃGPIOÖÐµÚ pin ¸öÒý½ÅµÄ¿ªÂ©Ä£Ê½
     95          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     96          void GPIO_SetPinOpenDrain(GPIO_MemMapPtr gpio, int8u_t pin, int8u_t ode)
     97          {
   \                     GPIO_SetPinOpenDrain:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
     98            PORT_MemMapPtr port;
     99            
    100            port = GPIO_GetPortMapPtr(gpio);
   \   00000006   0x.... 0x....      BL       GPIO_GetPortMapPtr
    101            if(ode == 1)
   \   0000000A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000C   0x2D01             CMP      R5,#+1
   \   0000000E   0xD108             BNE.N    ??GPIO_SetPinOpenDrain_0
    102            {
    103              PORT_PCR_REG(port,pin) |= PORT_PCR_ODE_MASK;
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   00000016   0xF051 0x0120      ORRS     R1,R1,#0x20
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
   \   00000020   0xE007             B.N      ??GPIO_SetPinOpenDrain_1
    104            }
    105            else
    106            {
    107              PORT_PCR_REG(port,pin) &= ~PORT_PCR_ODE_MASK;
   \                     ??GPIO_SetPinOpenDrain_0:
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   00000028   0xF031 0x0120      BICS     R1,R1,#0x20
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
    108            }
    109          }
   \                     ??GPIO_SetPinOpenDrain_1:
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    110          
    111          /*******************************************************************************
    112          * º¯ÊýÃû³Æ£ºGPIO_SetPinPassiveFilter
    113          * Èë¿Ú²ÎÊý£ºgpio   GPIO¿ÚÖ¸Õë
    114                      pin    gpio¿ÚµÄÒý½ÅºÅ
    115                      ode    ¸ÃÒý½ÅµÄ¹¦ÄÜºÅ
    116                              0: ½ûÖ¹µÍÍ¨ÂË²¨
    117                              1£ºÊ¹ÄÜµÍÍ¨ÂË²¨£¨10MHZ~30MHZ´ø¿í£©£¬ÐÅºÅÆµÂÊ¸ßÓÚ2MHZÊ±Ó¦½ûÖ¹¸Ã¹¦ÄÜ
    118          * Ãè    Êö£ºÉèÖÃGPIOÖÐµÚ pin ¸öÒý½ÅµÄÂË²¨Ä£Ê½
    119          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    120          void GPIO_SetPinPassiveFilter(GPIO_MemMapPtr gpio, int8u_t pin, int8u_t pfe)
    121          {
   \                     GPIO_SetPinPassiveFilter:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
    122            PORT_MemMapPtr port;
    123            
    124            port = GPIO_GetPortMapPtr(gpio);
   \   00000006   0x.... 0x....      BL       GPIO_GetPortMapPtr
    125            if(pfe == 1)
   \   0000000A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000C   0x2D01             CMP      R5,#+1
   \   0000000E   0xD108             BNE.N    ??GPIO_SetPinPassiveFilter_0
    126            {
    127              PORT_PCR_REG(port,pin) |= PORT_PCR_PFE_MASK;
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   00000016   0xF051 0x0110      ORRS     R1,R1,#0x10
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
   \   00000020   0xE007             B.N      ??GPIO_SetPinPassiveFilter_1
    128            }
    129            else
    130            {
    131              PORT_PCR_REG(port,pin) &= ~PORT_PCR_PFE_MASK;
   \                     ??GPIO_SetPinPassiveFilter_0:
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   00000028   0xF031 0x0110      BICS     R1,R1,#0x10
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
    132            }
    133          }
   \                     ??GPIO_SetPinPassiveFilter_1:
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    134          
    135          /*******************************************************************************
    136          * º¯ÊýÃû³Æ£ºGPIO_SetPinPull
    137          * Èë¿Ú²ÎÊý£ºgpio   GPIO¿ÚÖ¸Õë
    138                      pin    gpio¿ÚµÄÒý½ÅºÅ
    139                      pe     ¸ÃÒý½ÅµÄ¹¦ÄÜºÅ
    140                              0: ½ûÖ¹ÉÏÀ­ºÍÏÂÀ­µç×è¹¦ÄÜ
    141                              1£ºÊ¹ÄÜÉÏÀ­ºÍÏÂÀ­µç×è¹¦ÄÜ
    142                      ps     ¸ÃÒý½ÅµÄ¹¦ÄÜºÅ£¬ÔÚ pe=1 Ê±ÓÐÐ§
    143                              0: Ê¹ÄÜÏÂÀ­µç×è¹¦ÄÜ
    144                              1£ºÊ¹ÄÜÉÏÀ­µç×è¹¦ÄÜ
    145          * Ãè    Êö£ºÉèÖÃGPIOÖÐµÚ pin ¸öÒý½ÅµÄÉÏÀ­ÏÂÀ­µç×èÄ£Ê½
    146          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    147          void GPIO_SetPinPull(GPIO_MemMapPtr gpio, int8u_t pin, int8u_t pe, int8u_t ps)
    148          {
   \                     GPIO_SetPinPull:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
   \   00000006   0x001E             MOVS     R6,R3
    149            PORT_MemMapPtr port;
    150            
    151            port = GPIO_GetPortMapPtr(gpio);
   \   00000008   0x.... 0x....      BL       GPIO_GetPortMapPtr
    152            if(pe == 1)
   \   0000000C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000E   0x2D01             CMP      R5,#+1
   \   00000010   0xD11C             BNE.N    ??GPIO_SetPinPull_0
    153            {
    154              PORT_PCR_REG(port,pin) |= PORT_PCR_PE_MASK;
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   00000018   0xF051 0x0102      ORRS     R1,R1,#0x2
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
    155              if(ps == 1)
   \   00000022   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000024   0x2E01             CMP      R6,#+1
   \   00000026   0xD108             BNE.N    ??GPIO_SetPinPull_1
    156              {
    157                PORT_PCR_REG(port,pin) |= PORT_PCR_PS_MASK;
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   0000002E   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
   \   00000038   0xE010             B.N      ??GPIO_SetPinPull_2
    158              }
    159              else
    160              {
    161                PORT_PCR_REG(port,pin) &= ~PORT_PCR_PS_MASK;
   \                     ??GPIO_SetPinPull_1:
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   00000040   0x0849             LSRS     R1,R1,#+1
   \   00000042   0x0049             LSLS     R1,R1,#+1
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
   \   0000004A   0xE007             B.N      ??GPIO_SetPinPull_2
    162              }
    163            }
    164            else
    165            {
    166              PORT_PCR_REG(port,pin) &= ~PORT_PCR_PE_MASK;
   \                     ??GPIO_SetPinPull_0:
   \   0000004C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004E   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   00000052   0xF031 0x0102      BICS     R1,R1,#0x2
   \   00000056   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000058   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
    167            }
    168          }
   \                     ??GPIO_SetPinPull_2:
   \   0000005C   0xBD70             POP      {R4-R6,PC}       ;; return
    169          
    170          /*******************************************************************************
    171          * º¯ÊýÃû³Æ£ºGPIO_SetPortDir
    172          * Èë¿Ú²ÎÊý£ºgpio   GPIO¿ÚÖ¸Õë
    173                      dir    gpio¿ÚµÄÊäÈëÊä³öÄ£Ê½
    174          * Ãè    Êö£ºÉèÖÃGPIOÊäÈëÊä³öÄ£Ê½
    175          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    176          void GPIO_SetPortDir(GPIO_MemMapPtr gpio, int32u_t dir)
    177          {
    178            GPIO_PDDR_REG(gpio) = GPIO_PDDR_PDD(dir);
   \                     GPIO_SetPortDir:
   \   00000000   0x6141             STR      R1,[R0, #+20]
    179          }
   \   00000002   0x4770             BX       LR               ;; return
    180            
    181          /*******************************************************************************
    182          * º¯ÊýÃû³Æ£ºGPIO_SetPinDir
    183          * Èë¿Ú²ÎÊý£ºgpio   GPIO¿Ú
    184                      pin    gpio¿ÚµÄÒý½ÅºÅ
    185                      dir    gpio¿ÚµÄÊäÈëÊä³öÄ£Ê½
    186                              0£ºÊäÈë
    187                              1£ºÊä³ö  
    188          * Ãè    Êö£ºÉèÖÃGPIOÖÐµÚ pin Î»µÄÊäÈëÊä³öÄ£Ê½
    189          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    190          void GPIO_SetPinDir(GPIO_MemMapPtr gpio, int8u_t pin, int8u_t dir)
    191          {
    192            if(dir == 1)                                        // ¶¨ÒåÒý½ÅÎªÊä³ö·½Ê½
   \                     GPIO_SetPinDir:
   \   00000000   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000002   0x2A01             CMP      R2,#+1
   \   00000004   0xD106             BNE.N    ??GPIO_SetPinDir_0
    193            {
    194              GPIO_PDDR_REG(gpio) |= 1<<pin;                    // set the GPIO_DDR as output 
   \   00000006   0x6942             LDR      R2,[R0, #+20]
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0xFA13 0xF101      LSLS     R1,R3,R1
   \   0000000E   0x4311             ORRS     R1,R1,R2
   \   00000010   0x6141             STR      R1,[R0, #+20]
   \   00000012   0xE006             B.N      ??GPIO_SetPinDir_1
    195            }
    196            else
    197            {
    198              GPIO_PDDR_REG(gpio) &= ~(1<<pin);                 // set the GPIO_DDR as input 
   \                     ??GPIO_SetPinDir_0:
   \   00000014   0x6942             LDR      R2,[R0, #+20]
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0xFA13 0xF101      LSLS     R1,R3,R1
   \   0000001C   0xEA32 0x0101      BICS     R1,R2,R1
   \   00000020   0x6141             STR      R1,[R0, #+20]
    199            }
    200          }
   \                     ??GPIO_SetPinDir_1:
   \   00000022   0x4770             BX       LR               ;; return
    201          
    202          /*******************************************************************************
    203          * º¯ÊýÃû³Æ£ºGPIO_SetPortStat
    204          * Èë¿Ú²ÎÊý£ºgpio   GPIO¿ÚÖ¸Õë
    205                      state  gpio¿ÚµÄÊä³öµçÆ½
    206          * Ãè    Êö£ºÉèÖÃGPIOµÄÊä³öµçÆ½
    207          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    208          void GPIO_SetPortStat(GPIO_MemMapPtr gpio, int32u_t state)
    209          {
    210            GPIO_PDOR_REG(gpio) = state;
   \                     GPIO_SetPortStat:
   \   00000000   0x6001             STR      R1,[R0, #+0]
    211          }
   \   00000002   0x4770             BX       LR               ;; return
    212          
    213          /*******************************************************************************
    214          * º¯ÊýÃû³Æ£ºGPIO_SetPinStat
    215          * Èë¿Ú²ÎÊý£ºgpio   GPIO¿ÚÖ¸Õë
    216                      pin    gpio¿ÚµÄÒý½ÅºÅ
    217                      state  gpio¿ÚµÄÊä³öµçÆ½
    218          * Ãè    Êö£ºÉèÖÃGPIOÖÐµÚ pin Î»µÄµçÆ½
    219          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    220          void GPIO_SetPinStat(GPIO_MemMapPtr gpio, int8u_t pin, int8u_t state)
    221          {
    222            if(state==1)
   \                     GPIO_SetPinStat:
   \   00000000   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000002   0x2A01             CMP      R2,#+1
   \   00000004   0xD106             BNE.N    ??GPIO_SetPinStat_0
    223            {
    224              GPIO_PDOR_REG(gpio) |= 1<<pin;                     // set 1 to corresponding pin
   \   00000006   0x6802             LDR      R2,[R0, #+0]
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0xFA13 0xF101      LSLS     R1,R3,R1
   \   0000000E   0x4311             ORRS     R1,R1,R2
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0xE006             B.N      ??GPIO_SetPinStat_1
    225            }    
    226            else 
    227            {
    228              GPIO_PDOR_REG(gpio) &= ~(1<<pin);                  // set 0 to corresponding pin
   \                     ??GPIO_SetPinStat_0:
   \   00000014   0x6802             LDR      R2,[R0, #+0]
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0xFA13 0xF101      LSLS     R1,R3,R1
   \   0000001C   0xEA32 0x0101      BICS     R1,R2,R1
   \   00000020   0x6001             STR      R1,[R0, #+0]
    229            }
    230          }
   \                     ??GPIO_SetPinStat_1:
   \   00000022   0x4770             BX       LR               ;; return
    231          
    232          /*******************************************************************************
    233          * º¯ÊýÃû³Æ£ºGPIO_ReadPortStat
    234          * Èë¿Ú²ÎÊý£ºgpio   GPIO¿ÚÖ¸Õë
    235                      state  gpio¿ÚµÄµçÆ½
    236          * Ãè    Êö£º¶ÁÈ¡ gpio ¿ÚµÄ×´Ì¬
    237          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    238          void GPIO_ReadPortStat(GPIO_MemMapPtr gpio, int32u_t * state)
    239          {
    240            *state = GPIO_PDIR_REG(gpio);            
   \                     GPIO_ReadPortStat:
   \   00000000   0x6900             LDR      R0,[R0, #+16]
   \   00000002   0x6008             STR      R0,[R1, #+0]
    241          }
   \   00000004   0x4770             BX       LR               ;; return
    242          
    243          /*******************************************************************************
    244          * º¯ÊýÃû³Æ£ºGPIO_TogglePinStat
    245          * Èë¿Ú²ÎÊý£ºgpio   GPIO¿ÚÖ¸Õë
    246                      pin    gpio¿ÚµÄÒý½ÅºÅ
    247          * Ãè    Êö£º·´×ªGPIOÖÐµÚ pin Î»µÄµçÆ½
    248          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    249          void GPIO_TogglePinStat(GPIO_MemMapPtr gpio, int8u_t pin)
    250          {
    251            GPIO_PTOR_REG(gpio) ^= 1<<pin;                       // toggle the corresponding pin's state
   \                     GPIO_TogglePinStat:
   \   00000000   0x68C2             LDR      R2,[R0, #+12]
   \   00000002   0x2301             MOVS     R3,#+1
   \   00000004   0xFA13 0xF101      LSLS     R1,R3,R1
   \   00000008   0x4051             EORS     R1,R1,R2
   \   0000000A   0x60C1             STR      R1,[R0, #+12]
    252          }
   \   0000000C   0x4770             BX       LR               ;; return
    253          
    254          /*******************************************************************************
    255          * º¯ÊýÃû³Æ£ºGPIO_GetPortMapPtr
    256          * Èë¿Ú²ÎÊý£ºgpio   GPIO¿ÚÖ¸Õë
    257          * ·µ»Ø²ÎÊý£ºp      gpio¿Ú¼Ä´æÆ÷Ö¸Õë
    258          * Ãè    Êö£ºÍ¨¹ý GPIO_MemMapPtr Ö¸Õë²éÕÒ PORT_MemMapPtr Ö¸Õë
    259          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    260          static PORT_MemMapPtr GPIO_GetPortMapPtr(GPIO_MemMapPtr gpio)
    261          {
    262            PORT_MemMapPtr p;
    263            switch((int32u_t)gpio)
   \                     GPIO_GetPortMapPtr:
   \   00000000   0x....             LDR.N    R2,??DataTable0  ;; 0x400ff000
   \   00000002   0x1A80             SUBS     R0,R0,R2
   \   00000004   0xD008             BEQ.N    ??GPIO_GetPortMapPtr_0
   \   00000006   0x3840             SUBS     R0,R0,#+64
   \   00000008   0xD008             BEQ.N    ??GPIO_GetPortMapPtr_1
   \   0000000A   0x3840             SUBS     R0,R0,#+64
   \   0000000C   0xD008             BEQ.N    ??GPIO_GetPortMapPtr_2
   \   0000000E   0x3840             SUBS     R0,R0,#+64
   \   00000010   0xD008             BEQ.N    ??GPIO_GetPortMapPtr_3
   \   00000012   0x3840             SUBS     R0,R0,#+64
   \   00000014   0xD008             BEQ.N    ??GPIO_GetPortMapPtr_4
   \   00000016   0xE009             B.N      ??GPIO_GetPortMapPtr_5
    264            {
    265              case 0x400FF000u:
    266                                p = PORTA_BASE_PTR;
   \                     ??GPIO_GetPortMapPtr_0:
   \   00000018   0x....             LDR.N    R1,??DataTable0_1  ;; 0x40049000
    267                                break;
   \   0000001A   0xE007             B.N      ??GPIO_GetPortMapPtr_6
    268              case 0x400FF040u:
    269                                p = PORTB_BASE_PTR;
   \                     ??GPIO_GetPortMapPtr_1:
   \   0000001C   0x....             LDR.N    R1,??DataTable0_2  ;; 0x4004a000
    270                                break;
   \   0000001E   0xE005             B.N      ??GPIO_GetPortMapPtr_6
    271              case 0x400FF080u:
    272                                p = PORTC_BASE_PTR;
   \                     ??GPIO_GetPortMapPtr_2:
   \   00000020   0x....             LDR.N    R1,??DataTable0_3  ;; 0x4004b000
    273                                break;
   \   00000022   0xE003             B.N      ??GPIO_GetPortMapPtr_6
    274              case 0x400FF0C0u:
    275                                p = PORTD_BASE_PTR;
   \                     ??GPIO_GetPortMapPtr_3:
   \   00000024   0x....             LDR.N    R1,??DataTable0_4  ;; 0x4004c000
    276                                break;
   \   00000026   0xE001             B.N      ??GPIO_GetPortMapPtr_6
    277              case 0x400FF100u: 
    278                                p = PORTE_BASE_PTR;
   \                     ??GPIO_GetPortMapPtr_4:
   \   00000028   0x....             LDR.N    R1,??DataTable0_5  ;; 0x4004d000
    279                                break;
   \   0000002A   0xE7FF             B.N      ??GPIO_GetPortMapPtr_6
    280              default:
    281                      break;
    282                      
    283            }
    284            return p;
   \                     ??GPIO_GetPortMapPtr_5:
   \                     ??GPIO_GetPortMapPtr_6:
   \   0000002C   0x0008             MOVS     R0,R1
   \   0000002E   0x4770             BX       LR               ;; return
    285          }
    286          
    287          //===========================================================================
    288          //º¯ÊýÃû³Æ£ºGPIO_get
    289          //º¯Êý·µ»Ø£ºÖ¸¶¨Òý½Å×´Ì¬¡£0=µÍµçÆ½£¬1=¸ßµçÆ½¡£
    290          //²ÎÊýËµÃ÷£ºport£º¶Ë¿ÚºÅ¡£ÓÉºê¶¨Òå¡£
    291          //          pin£ºÒý½ÅºÅ¡£0¡«31¡£
    292          //¹¦ÄÜ¸ÅÒª£º»ñÈ¡Ö¸¶¨Òý½Å×´Ì¬¡£
    293          //===========================================================================

   \                                 In section .text, align 2, keep-with-next
    294          int8u_t GPIO_get(GPIO_MemMapPtr gpio, int8u_t pin)
    295          {
    296                  //PORT_MemMapPtr port;
    297          	int8u_t i; 
    298          	//½«GPIO¶Ë¿ÚºÅ×ª»»³É¶Ë¿Ú¼Ä´æÆ÷×éÖ¸Õë
    299          	//GPIO_MemMapPtr pt = gpio_get_pt_addr(port);
    300          	//²é¿´Òý½Å×´Ì¬
    301          	i = BGET(pin, GPIO_PDIR_REG(gpio));
   \                     GPIO_get:
   \   00000000   0x6900             LDR      R0,[R0, #+16]
   \   00000002   0x40C8             LSRS     R0,R0,R1
   \   00000004   0xF010 0x0001      ANDS     R0,R0,#0x1
    302          	return i;     //·µ»ØÒý½Å×´Ì¬£¨0»ò1£©
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x4770             BX       LR               ;; return
    303          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x40049000         DC32     0x40049000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x4004A000         DC32     0x4004a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   0x4004B000         DC32     0x4004b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_4:
   \   00000000   0x4004C000         DC32     0x4004c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_5:
   \   00000000   0x4004D000         DC32     0x4004d000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  GPIO_ConfigPinInt
             16 -> GPIO_GetPortMapPtr
        0  GPIO_GetPortMapPtr
        0  GPIO_ReadPortStat
        0  GPIO_SetPinDir
       16  GPIO_SetPinDriveStrgth
             16 -> GPIO_GetPortMapPtr
       16  GPIO_SetPinMod
             16 -> GPIO_GetPortMapPtr
       16  GPIO_SetPinOpenDrain
             16 -> GPIO_GetPortMapPtr
       16  GPIO_SetPinPassiveFilter
             16 -> GPIO_GetPortMapPtr
       16  GPIO_SetPinPull
             16 -> GPIO_GetPortMapPtr
        0  GPIO_SetPinStat
        0  GPIO_SetPortDir
        0  GPIO_SetPortStat
        0  GPIO_TogglePinStat
        0  GPIO_get


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       4  ??DataTable0_3
       4  ??DataTable0_4
       4  ??DataTable0_5
      42  GPIO_ConfigPinInt
      48  GPIO_GetPortMapPtr
       6  GPIO_ReadPortStat
      36  GPIO_SetPinDir
      52  GPIO_SetPinDriveStrgth
      42  GPIO_SetPinMod
      52  GPIO_SetPinOpenDrain
      52  GPIO_SetPinPassiveFilter
      94  GPIO_SetPinPull
      36  GPIO_SetPinStat
       4  GPIO_SetPortDir
       4  GPIO_SetPortStat
      14  GPIO_TogglePinStat
      12  GPIO_get

 
 518 bytes in section .text
 
 518 bytes of CODE memory

Errors: none
Warnings: none
